// Test multiplication optimization
fun test_mul_by_2(x: u8) -> u8 {
    return x * 2;  // Should become ADD A, A
}

fun test_mul_by_4(x: u8) -> u8 {
    return x * 4;  // Should become 2 shifts
}

fun test_mul_by_8(x: u8) -> u8 {
    return x * 8;  // Should become 3 shifts
}

fun test_mul_by_3(x: u8) -> u8 {
    return x * 3;  // Should become (x << 1) + x
}

fun test_mul_by_5(x: u8) -> u8 {
    return x * 5;  // Should become (x << 2) + x
}

fun test_mul_by_10(x: u8) -> u8 {
    return x * 10; // Should become (x << 3) + (x << 1)
}

fun test_mul_by_15(x: u8) -> u8 {
    return x * 15; // Should become (x << 4) - x
}

// Test 16-bit multiplication
fun test_mul_16bit_by_2(x: u16) -> u16 {
    return x * 2;  // Should become ADD HL, HL
}

fun test_mul_16bit_by_10(x: u16) -> u16 {
    return x * 10; // Should become (x << 3) + (x << 1)
}

fun main() -> void {
    let a: u8 = 5;
    
    // Test various multiplications
    let b = test_mul_by_2(a);
    let c = test_mul_by_4(a);
    let d = test_mul_by_10(a);
    
    print_u8(b as u8);  // Should print 10
    print_u8(c as u8);  // Should print 20
    print_u8(d as u8);  // Should print 50
}