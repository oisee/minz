; MinZ Intermediate Representation (MIR)
; Module: main

Function main() -> void
  @smc
  Locals:
    r1 = x: u8
    r3 = y: u8
    r5 = counter: u16
  Instructions:
      0: r2 = 10
      1: store , r2
      2: r4 = 10
      3: store , r4
      4: r6 = 0
      5: store , r6
      6: loop_1:
      7: r7 = load counter
      8: r8 = 1000
      9: r9 = r7 < r8
     10: jump_if_not r9, end_loop_2
     11: r10 = load x
     12: r11 = 20
     13: r12 = r10 > r11
     14: jump_if_not r12, else_3
     15: r13 = load y
     16: r14 = 20
     17: r15 = r13 > r14
     18: jump_if_not r15, else_5
     19: jump end_if_6
     20: else_5:
     21: end_if_6:
     22: jump end_if_4
     23: else_3:
     24: end_if_4:
     25: jump loop_1
     26: end_loop_2:
     27: return

Function clear_screen() -> void
  @smc
  Locals:
    r1 = addr: u16
  Instructions:
      0: r2 = 16384
      1: store , r2
      2: loop_7:
      3: r3 = load addr
      4: r4 = 16384
      5: r5 = 6144
      6: r6 = r4 + r5
      7: r7 = r3 < r6
      8: jump_if_not r7, end_loop_8
      9: jump loop_7
     10: end_loop_8:
     11: return

Function set_border(color: u8) -> void
  @smc
  Instructions:
      0: return

Function draw_pixel(x: u8, y: u8) -> void
  @smc
  Locals:
    r3 = addr: u16
  Instructions:
      0: r4 = 16384
      1: 10
      2: r6 = r4 + r5
      3: store , r6
      4: return

Function delay(count: u16) -> void
  @smc
  Locals:
    r2 = i: u16
  Instructions:
      0: r3 = 0
      1: store , r3
      2: loop_9:
      3: r4 = load i
      4: 10
      5: r6 = r4 < r5
      6: jump_if_not r6, end_loop_10
      7: jump loop_9
      8: end_loop_10:
      9: return

