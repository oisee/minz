; MinZ generated code
; Generated: 2025-07-07 23:05:49


; Code section
    ORG $8000


; Function: main
main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A
    ; store , r2
    LD HL, ($F004)
    LD ($F002), HL
    ; r4 = 10
    LD A, 10
    LD ($F008), A
    ; store , r4
    LD HL, ($F008)
    LD ($F006), HL
    ; r6 = 0
    LD A, 0
    LD ($F00C), A
    ; store , r6
    LD HL, ($F00C)
    LD ($F00A), HL
    ; loop_1:
loop_1:
    ; r7 = load counter
    LD HL, ($F000)
    LD ($F00E), HL
    ; r8 = 1000
    LD HL, 1000
    LD ($F010), HL
    ; r9 = r7 < r8
    LD HL, ($F00E)
    PUSH HL
    LD HL, ($F010)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F012), HL
    ; jump_if_not r9, end_loop_2
    LD A, ($F012)
    OR A
    JP Z, end_loop_2
    ; r10 = load x
    LD HL, ($F000)
    LD ($F014), HL
    ; r11 = 20
    LD A, 20
    LD ($F016), A
    ; r12 = r10 > r11
    LD HL, ($F014)
    PUSH HL
    LD HL, ($F016)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L4
    JP P, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD ($F018), HL
    ; jump_if_not r12, else_3
    LD A, ($F018)
    OR A
    JP Z, else_3
    ; r13 = load y
    LD HL, ($F000)
    LD ($F01A), HL
    ; r14 = 20
    LD A, 20
    LD ($F01C), A
    ; r15 = r13 > r14
    LD HL, ($F01A)
    PUSH HL
    LD HL, ($F01C)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L6
    JP P, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    LD ($F01E), HL
    ; jump_if_not r15, else_5
    LD A, ($F01E)
    OR A
    JP Z, else_5
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    RET

; Function: clear_screen
clear_screen:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 16384
    LD HL, 16384
    LD ($F004), HL
    ; store , r2
    LD HL, ($F004)
    LD ($F002), HL
    ; loop_7:
loop_7:
    ; r3 = load addr
    LD HL, ($F000)
    LD ($F006), HL
    ; r4 = 16384
    LD HL, 16384
    LD ($F008), HL
    ; r5 = 6144
    LD HL, 6144
    LD ($F00A), HL
    ; r6 = r4 + r5
    LD HL, ($F008)
    PUSH HL
    LD HL, ($F00A)
    POP DE
    ADD HL, DE
    LD ($F00C), HL
    ; r7 = r3 < r6
    LD HL, ($F006)
    PUSH HL
    LD HL, ($F00C)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    LD ($F00E), HL
    ; jump_if_not r7, end_loop_8
    LD A, ($F00E)
    OR A
    JP Z, end_loop_8
    ; jump loop_7
    JP loop_7
    ; end_loop_8:
end_loop_8:
    ; return
    RET

; Function: set_border
set_border:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET

; Function: draw_pixel
draw_pixel:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r4 = 16384
    LD HL, 16384
    LD ($F008), HL
draw_pixel_param_y:
    LD A, #00      ; SMC parameter y
    LD ($F00A), A
    ; r6 = r4 + r5
    LD HL, ($F008)
    PUSH HL
    LD HL, ($F00A)
    POP DE
    ADD HL, DE
    LD ($F00C), HL
    ; store , r6
    LD HL, ($F00C)
    LD ($F006), HL
    ; return
    RET

; Function: delay
delay:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    LD ($F006), A
    ; store , r3
    LD HL, ($F006)
    LD ($F004), HL
    ; loop_9:
loop_9:
    ; r4 = load i
    LD HL, ($F000)
    LD ($F008), HL
delay_param_count:
    LD HL, #0000   ; SMC parameter count
    LD ($F00A), HL
    ; r6 = r4 < r5
    LD HL, ($F008)
    PUSH HL
    LD HL, ($F00A)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    LD ($F00C), HL
    ; jump_if_not r6, end_loop_10
    LD A, ($F00C)
    OR A
    JP Z, end_loop_10
    ; jump loop_9
    JP loop_9
    ; end_loop_10:
end_loop_10:
    ; return
    RET

    END main
