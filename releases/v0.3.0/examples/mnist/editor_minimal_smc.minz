// MNIST Digit Editor - Minimal version for TRUE SMC testing
// Focuses on testing TRUE SMC optimization with ZX Spectrum operations

// Set border color (TRUE SMC function)
fun set_border_color(color: u8) -> void {
    asm {
        LD A, color
        OUT (0xFE), A
    }
}

// Clear screen memory (TRUE SMC function)
fun clear_screen_area(start_addr: u16, size: u16) -> void {
    asm {
        LD HL, start_addr
        LD BC, size
        LD A, 0
clear_loop:
        LD (HL), A
        INC HL
        DEC BC
        LD A, B
        OR C
        JR NZ, clear_loop
    }
}

// Set attribute at position (TRUE SMC function)
fun set_attribute(x: u8, y: u8, attr: u8) -> void {
    let base_addr: u16 = 0x5800
    let offset = (y as u16) * 32 + (x as u16)
    let addr = base_addr + offset
    
    asm {
        LD HL, addr
        LD A, attr
        LD (HL), A
    }
}

// Draw pixel in screen memory (TRUE SMC function)
fun draw_pixel(x: u8, y: u8, pixel_on: u8) -> void {
    // Simplified ZX Spectrum screen address calculation
    let line_base: u16 = 0x4000
    let line_offset = (y as u16) * 32
    let byte_addr = line_base + line_offset + (x >> 3)
    let bit_pos = x & 7
    let bit_mask = 0x80 >> bit_pos
    
    if pixel_on != 0 {
        asm {
            LD HL, byte_addr
            LD A, (HL)
            OR bit_mask
            LD (HL), A
        }
    } else {
        let inv_mask = bit_mask ^ 0xFF
        asm {
            LD HL, byte_addr
            LD A, (HL)
            AND inv_mask
            LD (HL), A
        }
    }
}

// Simple delay (TRUE SMC function)
fun wait_delay(loops: u16) -> void {
    asm {
        LD BC, loops
delay_loop:
        DEC BC
        LD A, B
        OR C
        JR NZ, delay_loop
    }
}

// Read keyboard port (TRUE SMC function)
fun read_keyboard(port_addr: u8) -> u8 {
    asm {
        LD A, port_addr
        IN A, (0xFE)
        // Result in A
    }
    return 0  // Simplified return
}

// Initialize MNIST editor (TRUE SMC function)
fun init_editor(border_color: u8, screen_attr: u8) -> void {
    // Set border
    set_border_color(border_color)
    
    // Clear screen
    clear_screen_area(0x4000, 6144)
    
    // Set attributes
    clear_screen_area(0x5800, 768)
    
    // Set some attributes for visibility
    set_attribute(10, 10, screen_attr)
    set_attribute(11, 10, screen_attr)
    set_attribute(10, 11, screen_attr)
    set_attribute(11, 11, screen_attr)
}

// Draw a simple pattern (TRUE SMC function)
fun draw_pattern(start_x: u8, start_y: u8, size: u8) -> void {
    let i: u8 = 0
    while i < size {
        let j: u8 = 0
        while j < size {
            let x = start_x + i
            let y = start_y + j
            
            // Draw checkerboard pattern
            if (i + j) & 1 != 0 {
                draw_pixel(x, y, 1)
            }
            
            j = j + 1
        }
        i = i + 1
    }
}

// Main editor function (TRUE SMC function)
fun run_editor() -> u8 {
    // Initialize
    init_editor(4, 0x47)  // Blue border, white on blue
    
    // Draw some test patterns
    draw_pattern(8, 8, 16)
    
    // Simple main loop
    let counter: u8 = 0
    while counter < 10 {
        // Change border color to show activity
        set_border_color(counter & 7)
        
        // Wait
        wait_delay(0x2000)
        
        // Update some attributes
        set_attribute(counter & 31, 12, counter)
        
        counter = counter + 1
    }
    
    return counter
}

// Entry point
fun main() -> void {
    let result = run_editor()
    
    // Final border color based on result
    set_border_color(result & 7)
}