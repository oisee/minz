; MinZ generated code
; Generated: 2025-08-16 22:40:49


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.register_allocation.test_registers
examples.register_allocation.test_registers:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; store a, r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = 20
    LD A, 20
    LD C, A         ; Store to physical register C
    ; store b, r4
    LD A, C
    LD ($F006), A
    ; r6 = 30
    LD A, 30
    LD E, A         ; Store to physical register E
    ; store c, r6
    LD A, E
    LD ($F00A), A
    ; r8 = load a
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r9 = load b
    LD A, ($F006)
    EXX               ; Switch to shadow registers
    LD B, A         ; Store to shadow B' (now active)
    EXX               ; Switch back to main registers
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    ; r11 = load c
    LD A, ($F00A)
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r12 = r10 + r11
    LD D, H
    LD E, L
    ADD HL, DE
    ; store result, r12
    EXX               ; Switch to shadow registers
    LD A, E         ; From shadow E' (now active)
    EXX               ; Switch back to main registers
    LD ($F00E), A
    ; r13 = load result
    LD A, ($F00E)
    ; Register 13 already in A
    ; Register 13 already in A

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.register_allocation.test_registers_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.register_allocation.test_registers_store_addr.op:
examples.register_allocation.test_registers_store_addr equ examples.register_allocation.test_registers_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.register_allocation.main
examples.register_allocation.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.register_allocation.test_registers_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.register_allocation.test_registers_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.register_allocation.test_registers_store_addr), HL
    ; r2 = call examples.register_allocation.test_registers
    ; Call to examples.register_allocation.test_registers (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.register_allocation.test_registers
    ; store value, r2
    EXX               ; Switch to shadow registers
    LD A, E         ; From shadow E' (now active)
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; return
    RET

; Standard library routines

    END main
