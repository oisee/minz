; MinZ generated code
; Generated: 2025-08-16 22:40:48


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.basic_functions.add$u8$u8
examples.basic_functions.add$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.basic_functions.add$u8$u8_param_a.op:
examples.basic_functions.add$u8$u8_param_a equ examples.basic_functions.add$u8$u8_param_a.op + 1
    LD A, #00      ; Parameter a (gets patched)
    ; Register 3 already in A
examples.basic_functions.add$u8$u8_param_b.op:
examples.basic_functions.add$u8$u8_param_b equ examples.basic_functions.add$u8$u8_param_b.op + 1
    LD B, #00      ; Parameter b (gets patched)
    LD A, B
    LD B, A         ; Store to physical register B
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    LD A, D

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.basic_functions.add$u8$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.basic_functions.add$u8$u8_store_addr.op:
examples.basic_functions.add$u8$u8_store_addr equ examples.basic_functions.add$u8$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.basic_functions.main
examples.basic_functions.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD ($F004), A     ; Virtual register 2 to memory
    ; store x, r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = 3
    LD A, 3
    LD ($F008), A     ; Virtual register 4 to memory
    ; store y, r4
    LD A, ($F008)     ; Virtual register 4 from memory
    LD ($F006), A
    ; r6 = load x
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
    ; r7 = load y
    LD A, ($F006)
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r8 = load x
    LD A, ($F002)
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = load y
    LD A, ($F006)
    LD E, A         ; Store to physical register E
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.basic_functions.add$u8$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.basic_functions.add$u8$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.basic_functions.add$u8$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter a = 0
    LD A, 0               ; Parameter value
    LD (examples.basic_functions.add$u8$u8_param_a+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD A, 0               ; Parameter value
    LD (examples.basic_functions.add$u8$u8_param_b+1), A   ; Patch parameter immediate
    ; r10 = call examples.basic_functions.add$u8$u8
    ; Call to examples.basic_functions.add$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL examples.basic_functions.add$u8$u8
    ; store result, r10
    LD A, E
    LD ($F00A), A
    ; r12 = 0
    LD A, 0
    LD ($F018), A     ; Virtual register 12 to memory
    ; store i, r12
    LD A, ($F018)     ; Virtual register 12 from memory
    LD ($F016), A
    ; loop_1:
examples_basic_functions_main_loop_1:
    ; r13 = load i
    LD A, ($F016)
    LD ($F01A), A     ; Virtual register 13 to memory
    ; r14 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD E, A         ; Store to shadow E' (now active)
    EXX               ; Switch back to main registers
    ; r15 = r13 < r14
    LD HL, ($F01A)    ; Virtual register 13 from memory
    EXX               ; Switch to shadow registers
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, examples_basic_functions_main_lt_true_0
    LD HL, 0       ; False
    JP examples_basic_functions_main_lt_done_0
examples_basic_functions_main_lt_true_0:
    LD HL, 1       ; True
examples_basic_functions_main_lt_done_0:
    ; jump_if_not r15, end_loop_2
    EXX               ; Switch to shadow registers
    LD A, E         ; From shadow E' (now active)
    EXX               ; Switch back to main registers
    OR A
    JP Z, examples_basic_functions_main_end_loop_2
    ; r16 = load i
    LD A, ($F016)
    ; Register 16 already in A
    ; r17 = 1
    LD A, 1
    ; Register 17 already in A
    ; r18 = r16 + r17
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r18
    LD A, B
    LD ($F016), A
    ; jump loop_1
    JP examples_basic_functions_main_loop_1
    ; end_loop_2:
examples_basic_functions_main_end_loop_2:
    ; return
    RET

; Standard library routines

    END main
