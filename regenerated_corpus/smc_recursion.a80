; MinZ generated code
; Generated: 2025-08-16 22:40:49


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.smc_recursion.factorial_smc$u8
examples.smc_recursion.factorial_smc$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
examples.smc_recursion.factorial_smc$u8_param_n.op:
examples.smc_recursion.factorial_smc$u8_param_n equ examples.smc_recursion.factorial_smc$u8_param_n.op + 1
    LD A, #00      ; Parameter n (gets patched)
    ; Register 2 already in A
    ; r3 = 1
    LD A, 1
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 <= r3
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, examples_smc_recursion_factorial_smc_u8_le_true_0
    JP Z, examples_smc_recursion_factorial_smc_u8_le_true_0
    LD HL, 0       ; False
    JP examples_smc_recursion_factorial_smc_u8_le_done_0
examples_smc_recursion_factorial_smc_u8_le_true_0:
    LD HL, 1       ; True
examples_smc_recursion_factorial_smc_u8_le_done_0:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, examples_smc_recursion_factorial_smc_u8_else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; jump end_if_2
    JP examples_smc_recursion_factorial_smc_u8_end_if_2
    ; else_1:
examples_smc_recursion_factorial_smc_u8_else_1:
    ; end_if_2:
examples_smc_recursion_factorial_smc_u8_end_if_2:
    LD A, (examples.smc_recursion.factorial_smc$u8_param_n)
    LD E, A         ; Store to physical register E
    LD A, (examples.smc_recursion.factorial_smc$u8_param_n)
    LD H, A         ; Store to physical register H
    ; r8 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r9 = r7 - r8
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    LD A, (examples.smc_recursion.factorial_smc$u8_param_n)
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
    ; r11 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r12 = r10 - r11
    EXX               ; Switch to shadow registers
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.smc_recursion.factorial_smc$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.smc_recursion.factorial_smc$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.smc_recursion.factorial_smc$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.factorial_smc$u8_param_n+1), A   ; Patch parameter immediate
    ; === SMC Recursive Context Save ===
    LD A, (examples.smc_recursion.factorial_smc$u8_param_n)
    PUSH AF
    ; === Update SMC Parameters ===
    CALL examples.smc_recursion.factorial_smc$u8
    ; === SMC Recursive Context Restore ===
    POP AF
    LD (examples.smc_recursion.factorial_smc$u8_param_n), A
    ; r14 = r6 * r13
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, examples_smc_recursion_factorial_smc_u8_mul_done_1
examples_smc_recursion_factorial_smc_u8_mul_loop_1:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, examples_smc_recursion_factorial_smc_u8_mul_loop_1
examples_smc_recursion_factorial_smc_u8_mul_done_1:
    LD A, B

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.smc_recursion.factorial_smc$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.smc_recursion.factorial_smc$u8_store_addr.op:
examples.smc_recursion.factorial_smc$u8_store_addr equ examples.smc_recursion.factorial_smc$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.smc_recursion.fib_smc$u8
examples.smc_recursion.fib_smc$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
examples.smc_recursion.fib_smc$u8_param_n.op:
examples.smc_recursion.fib_smc$u8_param_n equ examples.smc_recursion.fib_smc$u8_param_n.op + 1
    LD A, #00      ; Parameter n (gets patched)
    ; Register 2 already in A
    ; r3 = 1
    LD A, 1
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 <= r3
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, examples_smc_recursion_fib_smc_u8_le_true_2
    JP Z, examples_smc_recursion_fib_smc_u8_le_true_2
    LD HL, 0       ; False
    JP examples_smc_recursion_fib_smc_u8_le_done_2
examples_smc_recursion_fib_smc_u8_le_true_2:
    LD HL, 1       ; True
examples_smc_recursion_fib_smc_u8_le_done_2:
    ; jump_if_not r4, else_3
    ; Register 4 already in A
    OR A
    JP Z, examples_smc_recursion_fib_smc_u8_else_3
    LD A, (examples.smc_recursion.fib_smc$u8_param_n)
    LD B, A         ; Store to physical register B
    ; return r5
    RET
    ; jump end_if_4
    JP examples_smc_recursion_fib_smc_u8_end_if_4
    ; else_3:
examples_smc_recursion_fib_smc_u8_else_3:
    ; end_if_4:
examples_smc_recursion_fib_smc_u8_end_if_4:
    LD A, (examples.smc_recursion.fib_smc$u8_param_n)
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r8 = r6 - r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    LD A, (examples.smc_recursion.fib_smc$u8_param_n)
    ; Register 9 already in A
    ; r10 = 1
    LD A, 1
    LD ($F014), A     ; Virtual register 10 to memory
    ; r11 = r9 - r10
    LD HL, ($F014)    ; Virtual register 10 from memory
    EX DE, HL
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.smc_recursion.fib_smc$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.smc_recursion.fib_smc$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.smc_recursion.fib_smc$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.fib_smc$u8_param_n+1), A   ; Patch parameter immediate
    ; === SMC Recursive Context Save ===
    LD A, (examples.smc_recursion.fib_smc$u8_param_n)
    PUSH AF
    ; === Update SMC Parameters ===
    CALL examples.smc_recursion.fib_smc$u8
    ; === SMC Recursive Context Restore ===
    POP AF
    LD (examples.smc_recursion.fib_smc$u8_param_n), A
    LD A, (examples.smc_recursion.fib_smc$u8_param_n)
    LD B, A         ; Store to physical register B
    ; r14 = 2
    LD A, 2
    ; Register 14 already in A
    ; r15 = r13 - r14
    LD E, A        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    LD ($F01E), HL    ; Virtual register 15 to memory
    LD A, (examples.smc_recursion.fib_smc$u8_param_n)
    LD E, A         ; Store to physical register E
    ; r17 = 2
    LD A, 2
    LD B, A         ; Store to physical register B
    ; r18 = r16 - r17
    LD E, B        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.smc_recursion.fib_smc$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.smc_recursion.fib_smc$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.smc_recursion.fib_smc$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.fib_smc$u8_param_n+1), A   ; Patch parameter immediate
    ; === SMC Recursive Context Save ===
    LD A, (examples.smc_recursion.fib_smc$u8_param_n)
    PUSH AF
    ; === Update SMC Parameters ===
    CALL examples.smc_recursion.fib_smc$u8
    ; === SMC Recursive Context Restore ===
    POP AF
    LD (examples.smc_recursion.fib_smc$u8_param_n), A
    ; r20 = r12 + r19
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 20 already in A

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.smc_recursion.fib_smc$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.smc_recursion.fib_smc$u8_store_addr.op:
examples.smc_recursion.fib_smc$u8_store_addr equ examples.smc_recursion.fib_smc$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8
examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    ; Parameter a from stack
    LD L, (IX+4)
    LD H, (IX+5)
    LD (IX-2), L
    LD (IX-1), H
    ; Parameter b from stack
    LD L, (IX+6)
    LD H, (IX+7)
    LD (IX-4), L
    LD (IX-3), H
    ; Parameter c from stack
    LD L, (IX+8)
    LD H, (IX+9)
    LD (IX-6), L
    LD (IX-5), H
    ; Parameter d from stack
    LD L, (IX+10)
    LD H, (IX+11)
    LD (IX-8), L
    LD (IX-7), H
    ; Parameter e from stack
    LD L, (IX+12)
    LD H, (IX+13)
    LD (IX-10), L
    LD (IX-9), H
    ; r6 = param a
    ; Load parameter a
    ; r7 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; r8 = r6 == r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    ; E already in place
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, examples_smc_recursion_many_params_recursive_u8_u8_u8_u8_u8_eq_true_3
    LD HL, 0       ; False
    JP examples_smc_recursion_many_params_recursive_u8_u8_u8_u8_u8_eq_done_3
examples_smc_recursion_many_params_recursive_u8_u8_u8_u8_u8_eq_true_3:
    LD HL, 1       ; True
examples_smc_recursion_many_params_recursive_u8_u8_u8_u8_u8_eq_done_3:
    LD ($F010), HL    ; Virtual register 8 to memory
    ; jump_if_not r8, else_5
    LD A, ($F010)     ; Virtual register 8 from memory
    OR A
    JP Z, examples_smc_recursion_many_params_recursive_u8_u8_u8_u8_u8_else_5
    ; r9 = param b
    ; Load parameter b
    ; r10 = param c
    ; Load parameter c
    ; r11 = r9 + r10
    LD HL, ($F012)    ; Virtual register 9 from memory
    LD D, H
    LD E, L
    LD HL, ($F014)    ; Virtual register 10 from memory
    ADD HL, DE
    ; r12 = param d
    ; Load parameter d
    ; r13 = r11 + r12
    LD D, H
    LD E, L
    LD HL, ($F018)    ; Virtual register 12 from memory
    ADD HL, DE
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; r14 = param e
    ; Load parameter e
    ; r15 = r13 + r14
    LD HL, ($F01A)    ; Virtual register 13 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r15
    LD SP, IX
    POP IX
    RET
    ; jump end_if_6
    JP examples_smc_recursion_many_params_recursive_u8_u8_u8_u8_u8_end_if_6
    ; else_5:
examples_smc_recursion_many_params_recursive_u8_u8_u8_u8_u8_else_5:
    ; end_if_6:
examples_smc_recursion_many_params_recursive_u8_u8_u8_u8_u8_end_if_6:
    ; r16 = param a
    ; Load parameter a
    ; r17 = param a
    ; Load parameter a
    ; r18 = 1
    LD A, 1
    LD ($F024), A     ; Virtual register 18 to memory
    ; r19 = r17 - r18
    LD HL, ($F024)    ; Virtual register 18 from memory
    EX DE, HL
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    ; r20 = param b
    ; Load parameter b
    ; r21 = param c
    ; Load parameter c
    ; r22 = param d
    ; Load parameter d
    ; r23 = param e
    ; Load parameter e
    ; r24 = param a
    ; Load parameter a
    ; r25 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B, A         ; Store to shadow B' (now active)
    EXX               ; Switch back to main registers
    ; r26 = r24 - r25
    EXX               ; Switch to shadow registers
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    ; r27 = param b
    ; Load parameter b
    ; r28 = param c
    ; Load parameter c
    ; r29 = param d
    ; Load parameter d
    ; r30 = param e
    ; Load parameter e
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter a = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_a+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_b+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter c = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_c+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter d = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_d+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter e = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_e+1), A   ; Patch parameter immediate
    ; r31 = call examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8
    ; Call to examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8 (args: 5)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 4
    PUSH HL       ; Argument 3
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8
    ; r32 = r16 + r31
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r32
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.smc_recursion.main
examples.smc_recursion.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; r3 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.smc_recursion.factorial_smc$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.smc_recursion.factorial_smc$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.smc_recursion.factorial_smc$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.factorial_smc$u8_param_n+1), A   ; Patch parameter immediate
    ; r4 = call examples.smc_recursion.factorial_smc$u8
    ; Call to examples.smc_recursion.factorial_smc$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.smc_recursion.factorial_smc$u8
    ; store f5, r4
    LD ($F002), HL
    ; r6 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; r7 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.smc_recursion.fib_smc$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.smc_recursion.fib_smc$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.smc_recursion.fib_smc$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.fib_smc$u8_param_n+1), A   ; Patch parameter immediate
    ; r8 = call examples.smc_recursion.fib_smc$u8
    ; Call to examples.smc_recursion.fib_smc$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.smc_recursion.fib_smc$u8
    ; store fib10, r8
    LD ($F00A), HL
    ; r10 = 3
    LD A, 3
    LD ($F014), A     ; Virtual register 10 to memory
    ; r11 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r12 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; r13 = 3
    LD A, 3
    LD ($F01A), A     ; Virtual register 13 to memory
    ; r14 = 4
    LD A, 4
    LD H, A         ; Store to physical register H
    ; r15 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; r16 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r17 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r18 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; r19 = 4
    LD A, 4
    LD ($F026), A     ; Virtual register 19 to memory
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter a = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_a+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_b+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter c = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_c+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter d = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_d+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter e = 0
    LD A, 0               ; Parameter value
    LD (examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8_param_e+1), A   ; Patch parameter immediate
    ; r20 = call examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8
    ; Call to examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8 (args: 5)
    ; Stack-based parameter passing
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL       ; Argument 4
    PUSH HL       ; Argument 3
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL examples.smc_recursion.many_params_recursive$u8$u8$u8$u8$u8
    ; store result, r20
    LD A, L
    LD ($F012), A
    ; return
    RET

; Standard library routines

    END main
