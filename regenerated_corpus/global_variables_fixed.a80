; MinZ generated code
; Generated: 2025-08-16 22:40:48


; Data section
    ORG $F000

examples.global_variables_fixed.g_byte:
    DB 42
examples.global_variables_fixed.g_word:
    DW 4660
examples.global_variables_fixed.g_flag:
    DB 1
examples.global_variables_fixed.g_calc:
    DB 15
examples.global_variables_fixed.g_shift:
    DW 256
examples.global_variables_fixed.g_masked:
    DB 15
examples.global_variables_fixed.g_uninit_byte:
    DB 0
examples.global_variables_fixed.g_uninit_word:
    DW 0
str_0:
    DB 16    ; Length
    DB "g_byte success: "
str_1:
    DB 16    ; Length
    DB "g_word success: "
str_2:
    DB 15    ; Length
    DB "g_flag success", 10
str_3:
    DB 16    ; Length
    DB "g_calc success: "
str_4:
    DB 17    ; Length
    DB "g_shift success: "
str_5:
    DB 18    ; Length
    DB "g_masked success: "
str_6:
    DB 22    ; Length
    DB "g_uninit_byte is zero", 10
str_7:
    DB 22    ; Length
    DB "g_uninit_word is zero", 10

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.global_variables_fixed.main
examples.global_variables_fixed.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = load examples.global_variables_fixed.g_byte
    LD HL, ($F000)
    ; r2 = 42
    LD A, 42
    LD B, A         ; Store to physical register B
    ; r3 = r1 == r2
    LD E, B        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, examples_global_variables_fixed_main_eq_true_0
    LD HL, 0       ; False
    JP examples_global_variables_fixed_main_eq_done_0
examples_global_variables_fixed_main_eq_true_0:
    LD HL, 1       ; True
examples_global_variables_fixed_main_eq_done_0:
    ; jump_if_not r3, else_1
    LD A, C
    OR A
    JP Z, examples_global_variables_fixed_main_else_1
    ; r4 = string(str_0)
    LD HL, str_0
    ; Print "g_byte success: " (16 chars via loop)
    CALL print_string
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16         ; Print character
    ; jump end_if_2
    JP examples_global_variables_fixed_main_end_if_2
    ; else_1:
examples_global_variables_fixed_main_else_1:
    ; end_if_2:
examples_global_variables_fixed_main_end_if_2:
    ; r5 = load examples.global_variables_fixed.g_word
    LD HL, ($F020)
    ; r6 = 4660
    LD HL, 4660
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; r7 = r5 == r6
    LD HL, ($F00C)    ; Virtual register 6 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, examples_global_variables_fixed_main_eq_true_1
    LD HL, 0       ; False
    JP examples_global_variables_fixed_main_eq_done_1
examples_global_variables_fixed_main_eq_true_1:
    LD HL, 1       ; True
examples_global_variables_fixed_main_eq_done_1:
    LD D, H
    LD E, L
    ; jump_if_not r7, else_3
    LD A, E
    OR A
    JP Z, examples_global_variables_fixed_main_else_3
    ; r8 = string(str_1)
    LD HL, str_1
    ; Print "g_word success: " (16 chars via loop)
    CALL print_string
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16         ; Print character
    ; jump end_if_4
    JP examples_global_variables_fixed_main_end_if_4
    ; else_3:
examples_global_variables_fixed_main_else_3:
    ; end_if_4:
examples_global_variables_fixed_main_end_if_4:
    ; r9 = load examples.global_variables_fixed.g_flag
    LD HL, ($F040)
    ; jump_if_not r9, else_5
    EXX               ; Switch to shadow registers
    LD A, C         ; From shadow C' (now active)
    EXX               ; Switch back to main registers
    OR A
    JP Z, examples_global_variables_fixed_main_else_5
    ; r10 = string(str_2)
    LD HL, str_2
    ; Print "g_flag success
" (15 chars via loop)
    CALL print_string
    ; jump end_if_6
    JP examples_global_variables_fixed_main_end_if_6
    ; else_5:
examples_global_variables_fixed_main_else_5:
    ; end_if_6:
examples_global_variables_fixed_main_end_if_6:
    ; r11 = load examples.global_variables_fixed.g_calc
    LD HL, ($F060)
    ; r12 = 15
    LD A, 15
    LD ($F018), A     ; Virtual register 12 to memory
    ; r13 = r11 == r12
    LD HL, ($F018)    ; Virtual register 12 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, examples_global_variables_fixed_main_eq_true_2
    LD HL, 0       ; False
    JP examples_global_variables_fixed_main_eq_done_2
examples_global_variables_fixed_main_eq_true_2:
    LD HL, 1       ; True
examples_global_variables_fixed_main_eq_done_2:
    ; jump_if_not r13, else_7
    LD A, H
    OR A
    JP Z, examples_global_variables_fixed_main_else_7
    ; r14 = string(str_3)
    LD HL, str_3
    ; Print "g_calc success: " (16 chars via loop)
    CALL print_string
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16         ; Print character
    ; jump end_if_8
    JP examples_global_variables_fixed_main_end_if_8
    ; else_7:
examples_global_variables_fixed_main_else_7:
    ; end_if_8:
examples_global_variables_fixed_main_end_if_8:
    ; r15 = load examples.global_variables_fixed.g_shift
    LD HL, ($F080)
    ; Register 15 already in HL
    ; r16 = 256
    LD HL, 256
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = r15 == r16
    ; Register 15 already in HL
    LD HL, ($F020)    ; Virtual register 16 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, examples_global_variables_fixed_main_eq_true_3
    LD HL, 0       ; False
    JP examples_global_variables_fixed_main_eq_done_3
examples_global_variables_fixed_main_eq_true_3:
    LD HL, 1       ; True
examples_global_variables_fixed_main_eq_done_3:
    LD B, H
    LD C, L
    ; jump_if_not r17, else_9
    LD A, C
    OR A
    JP Z, examples_global_variables_fixed_main_else_9
    ; r18 = string(str_4)
    LD HL, str_4
    LD ($F024), HL    ; Virtual register 18 to memory
    ; Print "g_shift success: " (17 chars via loop)
    LD HL, ($F024)    ; Virtual register 18 from memory
    CALL print_string
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16         ; Print character
    ; jump end_if_10
    JP examples_global_variables_fixed_main_end_if_10
    ; else_9:
examples_global_variables_fixed_main_else_9:
    ; end_if_10:
examples_global_variables_fixed_main_end_if_10:
    ; r19 = load examples.global_variables_fixed.g_masked
    LD HL, ($F0A0)
    ; r20 = 15
    LD A, 15
    LD L, A         ; Store to physical register L
    ; r21 = r19 == r20
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, examples_global_variables_fixed_main_eq_true_4
    LD HL, 0       ; False
    JP examples_global_variables_fixed_main_eq_done_4
examples_global_variables_fixed_main_eq_true_4:
    LD HL, 1       ; True
examples_global_variables_fixed_main_eq_done_4:
    LD ($F02A), HL    ; Virtual register 21 to memory
    ; jump_if_not r21, else_11
    LD A, ($F02A)     ; Virtual register 21 from memory
    OR A
    JP Z, examples_global_variables_fixed_main_else_11
    ; r22 = string(str_5)
    LD HL, str_5
    ; Print "g_masked success: " (18 chars via loop)
    CALL print_string
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16         ; Print character
    ; jump end_if_12
    JP examples_global_variables_fixed_main_end_if_12
    ; else_11:
examples_global_variables_fixed_main_else_11:
    ; end_if_12:
examples_global_variables_fixed_main_end_if_12:
    ; r23 = load examples.global_variables_fixed.g_uninit_byte
    LD HL, ($F0C0)
    ; r24 = 0
    LD A, 0
    LD ($F030), A     ; Virtual register 24 to memory
    ; r25 = r23 == r24
    LD HL, ($F030)    ; Virtual register 24 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, examples_global_variables_fixed_main_eq_true_5
    LD HL, 0       ; False
    JP examples_global_variables_fixed_main_eq_done_5
examples_global_variables_fixed_main_eq_true_5:
    LD HL, 1       ; True
examples_global_variables_fixed_main_eq_done_5:
    ; jump_if_not r25, else_13
    LD A, H
    OR A
    JP Z, examples_global_variables_fixed_main_else_13
    ; r26 = string(str_6)
    LD HL, str_6
    ; Print "g_uninit_byte is zero
" (22 chars via loop)
    CALL print_string
    ; jump end_if_14
    JP examples_global_variables_fixed_main_end_if_14
    ; else_13:
examples_global_variables_fixed_main_else_13:
    ; end_if_14:
examples_global_variables_fixed_main_end_if_14:
    ; r27 = load examples.global_variables_fixed.g_uninit_word
    LD HL, ($F0E0)
    ; Register 27 already in HL
    ; r28 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r29 = r27 == r28
    ; Register 27 already in HL
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, examples_global_variables_fixed_main_eq_true_6
    LD HL, 0       ; False
    JP examples_global_variables_fixed_main_eq_done_6
examples_global_variables_fixed_main_eq_true_6:
    LD HL, 1       ; True
examples_global_variables_fixed_main_eq_done_6:
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; jump_if_not r29, else_15
    LD A, ($F03A)     ; Virtual register 29 from memory
    OR A
    JP Z, examples_global_variables_fixed_main_else_15
    ; r30 = string(str_7)
    LD HL, str_7
    ; Register 30 already in HL
    ; Print "g_uninit_word is zero
" (22 chars via loop)
    ; Register 30 already in HL
    CALL print_string
    ; jump end_if_16
    JP examples_global_variables_fixed_main_end_if_16
    ; else_15:
examples_global_variables_fixed_main_else_15:
    ; end_if_16:
examples_global_variables_fixed_main_end_if_16:
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; ZX Spectrum ROM print
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET


; Standard library routines

    END main
