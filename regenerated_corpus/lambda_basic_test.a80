; MinZ generated code
; Generated: 2025-08-16 22:40:48


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.add_five_traditional$u8
examples.lambda_basic_test.add_five_traditional$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.lambda_basic_test.add_five_traditional$u8_param_x.op:
examples.lambda_basic_test.add_five_traditional$u8_param_x equ examples.lambda_basic_test.add_five_traditional$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    ; Register 2 already in A
    ; r3 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_basic_test.add_five_traditional$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_basic_test.add_five_traditional$u8_store_addr.op:
examples.lambda_basic_test.add_five_traditional$u8_store_addr equ examples.lambda_basic_test.add_five_traditional$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_basic$add_five_0
examples.lambda_basic_test.test_lambda_basic$add_five_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.lambda_basic_test.test_lambda_basic$add_five_0_param_x.op:
examples.lambda_basic_test.test_lambda_basic$add_five_0_param_x equ examples.lambda_basic_test.test_lambda_basic$add_five_0_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD D, A         ; Store to physical register D
    ; r2 = 5
    LD A, 5
    LD E, A         ; Store to physical register E
    ; r3 = r1 + r2
    LD D, H
    LD E, L
    ADD HL, DE

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_basic_test.test_lambda_basic$add_five_0_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_basic_test.test_lambda_basic$add_five_0_store_addr.op:
examples.lambda_basic_test.test_lambda_basic$add_five_0_store_addr equ examples.lambda_basic_test.test_lambda_basic$add_five_0_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_basic
examples.lambda_basic_test.test_lambda_basic:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_basic_test.test_lambda_basic$add_five_0_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_basic_test.test_lambda_basic$add_five_0_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_basic_test.test_lambda_basic$add_five_0_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (examples.lambda_basic_test.test_lambda_basic$add_five_0_param_x+1), A   ; Patch parameter immediate
    ; r2 = call examples.lambda_basic_test.test_lambda_basic$add_five_0
    ; Call to examples.lambda_basic_test.test_lambda_basic$add_five_0 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_basic$add_five_0

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_basic_test.test_lambda_basic_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_basic_test.test_lambda_basic_store_addr.op:
examples.lambda_basic_test.test_lambda_basic_store_addr equ examples.lambda_basic_test.test_lambda_basic_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_direct$f_1
examples.lambda_basic_test.test_lambda_direct$f_1:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.lambda_basic_test.test_lambda_direct$f_1_param_x.op:
examples.lambda_basic_test.test_lambda_direct$f_1_param_x equ examples.lambda_basic_test.test_lambda_direct$f_1_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
    ; r2 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r3 = r1 + r2
    LD D, H
    LD E, L
    ADD HL, DE

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_basic_test.test_lambda_direct$f_1_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_basic_test.test_lambda_direct$f_1_store_addr.op:
examples.lambda_basic_test.test_lambda_direct$f_1_store_addr equ examples.lambda_basic_test.test_lambda_direct$f_1_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_direct
examples.lambda_basic_test.test_lambda_direct:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 10
    LD A, 10
    ; Register 1 already in A
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_basic_test.test_lambda_direct$f_1_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_basic_test.test_lambda_direct$f_1_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_basic_test.test_lambda_direct$f_1_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (examples.lambda_basic_test.test_lambda_direct$f_1_param_x+1), A   ; Patch parameter immediate
    ; r2 = call examples.lambda_basic_test.test_lambda_direct$f_1
    ; Call to examples.lambda_basic_test.test_lambda_direct$f_1 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_direct$f_1

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_basic_test.test_lambda_direct_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_basic_test.test_lambda_direct_store_addr.op:
examples.lambda_basic_test.test_lambda_direct_store_addr equ examples.lambda_basic_test.test_lambda_direct_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_multiple$add_2
examples.lambda_basic_test.test_lambda_multiple$add_2:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.lambda_basic_test.test_lambda_multiple$add_2_param_x.op:
examples.lambda_basic_test.test_lambda_multiple$add_2_param_x equ examples.lambda_basic_test.test_lambda_multiple$add_2_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD H, A         ; Store to physical register H
    ; r2 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r3 = r1 + r2
    LD D, H
    LD E, L
    ADD HL, DE

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_basic_test.test_lambda_multiple$add_2_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_basic_test.test_lambda_multiple$add_2_store_addr.op:
examples.lambda_basic_test.test_lambda_multiple$add_2_store_addr equ examples.lambda_basic_test.test_lambda_multiple$add_2_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_multiple
examples.lambda_basic_test.test_lambda_multiple:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_basic_test.test_lambda_multiple$add_2_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_basic_test.test_lambda_multiple$add_2_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_basic_test.test_lambda_multiple$add_2_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (examples.lambda_basic_test.test_lambda_multiple$add_2_param_x+1), A   ; Patch parameter immediate
    ; r3 = call examples.lambda_basic_test.test_lambda_multiple$add_2
    ; Call to examples.lambda_basic_test.test_lambda_multiple$add_2 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_multiple$add_2
    ; store a, r3
    ; Register 3 already in A
    LD ($F002), A
    ; r5 = 20
    LD A, 20
    ; Register 5 already in A
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_basic_test.test_lambda_multiple$add_2_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_basic_test.test_lambda_multiple$add_2_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_basic_test.test_lambda_multiple$add_2_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (examples.lambda_basic_test.test_lambda_multiple$add_2_param_x+1), A   ; Patch parameter immediate
    ; r6 = call examples.lambda_basic_test.test_lambda_multiple$add_2
    ; Call to examples.lambda_basic_test.test_lambda_multiple$add_2 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_multiple$add_2
    ; store b, r6
    ; Register 6 already in A
    LD ($F008), A
    ; r7 = load a
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r8 = load b
    LD A, ($F008)
    LD E, A         ; Store to physical register E
    ; r9 = r7 + r8
    LD D, H
    LD E, L
    ADD HL, DE

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_basic_test.test_lambda_multiple_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_basic_test.test_lambda_multiple_store_addr.op:
examples.lambda_basic_test.test_lambda_multiple_store_addr equ examples.lambda_basic_test.test_lambda_multiple_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.main
examples.lambda_basic_test.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    ; Register 2 already in A
    ; r3 = 10
    LD A, 10
    ; Register 3 already in A
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_basic_test.add_five_traditional$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_basic_test.add_five_traditional$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_basic_test.add_five_traditional$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (examples.lambda_basic_test.add_five_traditional$u8_param_x+1), A   ; Patch parameter immediate
    ; r4 = call examples.lambda_basic_test.add_five_traditional$u8
    ; Call to examples.lambda_basic_test.add_five_traditional$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.add_five_traditional$u8
    ; store t1, r4
    EXX               ; Switch to shadow registers
    LD A, C         ; From shadow C' (now active)
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_basic_test.test_lambda_basic_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_basic_test.test_lambda_basic_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_basic_test.test_lambda_basic_store_addr), HL
    ; r6 = call examples.lambda_basic_test.test_lambda_basic
    ; Call to examples.lambda_basic_test.test_lambda_basic (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_basic
    ; store t2, r6
    LD A, L
    LD ($F00A), A
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_basic_test.test_lambda_direct_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_basic_test.test_lambda_direct_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_basic_test.test_lambda_direct_store_addr), HL
    ; r8 = call examples.lambda_basic_test.test_lambda_direct
    ; Call to examples.lambda_basic_test.test_lambda_direct (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_direct
    ; store t3, r8
    LD A, L
    LD ($F00E), A
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_basic_test.test_lambda_multiple_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_basic_test.test_lambda_multiple_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_basic_test.test_lambda_multiple_store_addr), HL
    ; r10 = call examples.lambda_basic_test.test_lambda_multiple
    ; Call to examples.lambda_basic_test.test_lambda_multiple (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_multiple
    ; store t4, r10
    LD A, L
    LD ($F012), A
    ; return
    RET

; Standard library routines

    END main
