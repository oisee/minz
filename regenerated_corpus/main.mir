; MinZ Intermediate Representation (MIR)
; Module: main

Function examples.main.main() -> void
  @smc
  Locals:
    r5 = x: u8
    r7 = y: u8
    r9 = counter: u16
  Instructions:
      0: r1 = call examples.main.clear_screen
      1: r2 = 1
      2: r3 = 1
      3: r4 = call examples.main.set_border$u8
      4: r6 = 10
      5: store x, r6
      6: r8 = 10
      7: store y, r8
      8: r10 = 0
      9: store counter, r10
     10: loop_1:
     11: r11 = load counter
     12: r12 = 1000
     13: r13 = r11 < r12
     14: jump_if_not r13, end_loop_2
     15: r14 = load x
     16: r15 = 1
     17: r16 = r14 + r15
     18: store x, r16
     19: r17 = load x
     20: r18 = 20
     21: r19 = r17 > r18
     22: jump_if_not r19, else_3
     23: r20 = 10
     24: store x, r20
     25: r21 = load y
     26: r22 = 1
     27: r23 = r21 + r22
     28: store y, r23
     29: r24 = load y
     30: r25 = 20
     31: r26 = r24 > r25
     32: jump_if_not r26, else_5
     33: r27 = 10
     34: store y, r27
     35: jump end_if_6
     36: else_5:
     37: end_if_6:
     38: jump end_if_4
     39: else_3:
     40: end_if_4:
     41: r28 = load x
     42: r29 = load y
     43: r30 = load x
     44: r31 = load y
     45: r32 = call examples.main.draw_pixel$u8$u8
     46: r33 = 10
     47: r34 = 10
     48: r35 = call examples.main.delay$u16
     49: r36 = load counter
     50: r37 = 1
     51: r38 = r36 + r37
     52: store counter, r38
     53: jump loop_1
     54: end_loop_2:
     55: return

Function examples.main.clear_screen() -> void
  @smc
  Locals:
    r1 = addr: u16
  Instructions:
      0: r2 = 16384
      1: store addr, r2
      2: loop_7:
      3: r3 = load addr
      4: r4 = 16384
      5: r5 = 6144
      6: r6 = r4 + r5
      7: r7 = r3 < r6
      8: jump_if_not r7, end_loop_8
      9: r8 = load addr
     10: r9 = 1
     11: r10 = r8 + r9
     12: store addr, r10
     13: jump loop_7
     14: end_loop_8:
     15: return

Function examples.main.set_border$u8(color: u8) -> void
  @smc
  Instructions:
      0: return

Function examples.main.draw_pixel$u8$u8(x: u8, y: u8) -> void
  @smc
  Locals:
    r3 = addr: u16
  Instructions:
      0: r4 = 16384
      1: LOAD_PARAM
      2: r6 = 32
      3: r7 = r5 * r6
      4: r8 = r4 + r7
      5: LOAD_PARAM
      6: r10 = r8 + r9
      7: store addr, r10
      8: return

Function examples.main.delay$u16(count: u16) -> void
  @smc
  Locals:
    r2 = i: u16
  Instructions:
      0: r3 = 0
      1: store i, r3
      2: loop_9:
      3: r4 = load i
      4: LOAD_PARAM
      5: r6 = r4 < r5
      6: jump_if_not r6, end_loop_10
      7: r7 = load i
      8: r8 = 1
      9: r9 = r7 + r8
     10: store i, r9
     11: jump loop_9
     12: end_loop_10:
     13: return

