; MinZ generated code
; Generated: 2025-08-16 22:40:49


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.tsmc_strlen.strlen_tsmc$p_u8
examples.tsmc_strlen.strlen_tsmc$p_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    ; Register 3 already in A
    ; store len, r3
    LD ($F004), HL
    ; loop_1:
examples_tsmc_strlen_strlen_tsmc_p_u8_loop_1:
; TSMC reference parameter str
str$immOP:
    LD HL, 0000      ; TSMC ref address for str
str$imm0 EQU str$immOP+1
    LD D, H
    LD E, L
    ; r5 = *r4
    LD H, D
    LD L, E
    LD A, (HL)
    LD B, A         ; Store to physical register B
    ; r6 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; r7 = r5 != r6
    LD E, C        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP NZ, examples_tsmc_strlen_strlen_tsmc_p_u8_ne_true_0
    LD HL, 0       ; False
    JP examples_tsmc_strlen_strlen_tsmc_p_u8_ne_done_0
examples_tsmc_strlen_strlen_tsmc_p_u8_ne_true_0:
    LD HL, 1       ; True
examples_tsmc_strlen_strlen_tsmc_p_u8_ne_done_0:
    ; jump_if_not r7, end_loop_2
    EXX               ; Switch to shadow registers
    LD A, B         ; From shadow B' (now active)
    EXX               ; Switch back to main registers
    OR A
    JP Z, examples_tsmc_strlen_strlen_tsmc_p_u8_end_loop_2
    ; r8 = load len
    LD HL, ($F004)
    ; r9 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    LD B, H
    LD C, L
    ; store len, r10
    LD H, B
    LD L, C
    LD ($F004), HL
    LD HL, (str$imm0) ; Reload TSMC ref address
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r12 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E, A         ; Store to shadow E' (now active)
    EXX               ; Switch back to main registers
    ; r13 = r11 + r12
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 13 already in HL
    ; Update TSMC reference str
    ; Register 13 already in HL
    LD (str$imm0), HL    ; Update TSMC reference immediate
    ; jump loop_1
    JP examples_tsmc_strlen_strlen_tsmc_p_u8_loop_1
    ; end_loop_2:
examples_tsmc_strlen_strlen_tsmc_p_u8_end_loop_2:
    ; r14 = load len
    LD HL, ($F004)
    LD A, H

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.tsmc_strlen.strlen_tsmc$p_u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.tsmc_strlen.strlen_tsmc$p_u8_store_addr.op:
examples.tsmc_strlen.strlen_tsmc$p_u8_store_addr equ examples.tsmc_strlen.strlen_tsmc$p_u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.tsmc_strlen.test
examples.tsmc_strlen.test:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 72
    LD A, 72
    LD L, A         ; Store to physical register L
    ; store a, r2
    LD A, L
    LD ($F002), A
    ; r4 = 105
    LD A, 105
    LD H, A         ; Store to physical register H
    ; store b, r4
    LD A, H
    LD ($F006), A
    ; r6 = 0
    LD A, 0
    LD ($F00C), A     ; Virtual register 6 to memory
    ; store c, r6
    LD A, ($F00C)     ; Virtual register 6 from memory
    LD ($F00A), A
    ; r7 = load a
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r8 = &r7
    ; Address-of operation for register r7
    LD HL, $F00E  ; Variable address
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = load a
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r10 = &r9
    ; Address-of operation for register r9
    LD HL, $F012  ; Variable address
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.tsmc_strlen.strlen_tsmc$p_u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.tsmc_strlen.strlen_tsmc$p_u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.tsmc_strlen.strlen_tsmc$p_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter str = 0
    LD HL, 0              ; Parameter value
    LD (examples.tsmc_strlen.strlen_tsmc$p_u8_param_str+1), HL  ; Patch parameter immediate
    ; r11 = call examples.tsmc_strlen.strlen_tsmc$p_u8
    ; Call to examples.tsmc_strlen.strlen_tsmc$p_u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.tsmc_strlen.strlen_tsmc$p_u8
    ; Register 11 already in HL
    ; return r11
    ; Register 11 already in HL
    RET

; Standard library routines

    END main
