; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   examples.tsmc_loops.i: u16

Function examples.tsmc_loops.sum_array_tsmc$p_u8$u16(arr: *u8, count: u16) -> u16
  @smc
  Locals:
    r3 = sum: u16
    r5 = i: u16
  Instructions:
      0: r4 = 0
      1: store sum, r4
      2: r6 = 0
      3: store i, r6
      4: loop_1:
      5: r7 = load i
      6: LOAD_PARAM
      7: r9 = r7 < r8
      8: jump_if_not r9, end_loop_2
      9: r10 = load sum
     10: LOAD_PARAM
     11: LOAD
     12: r13 = r10 + r12
     13: store sum, r13
     14: LOAD_PARAM
     15: r15 = 1
     16: r16 = r14 + r15
     17: STORE_TSMC_REF ; Update TSMC reference arr
     18: r17 = load i
     19: r18 = 1
     20: r19 = r17 + r18
     21: store i, r19
     22: jump loop_1
     23: end_loop_2:
     24: r20 = load sum
     25: return r20

Function examples.tsmc_loops.find_max_tsmc$p_u8$u16(arr: *u8, count: u16) -> u8
  @smc
  Locals:
    r7 = max: u8
    r13 = i: u16
  Instructions:
      0: LOAD_PARAM
      1: r4 = 0
      2: r5 = r3 == r4
      3: jump_if_not r5, else_3
      4: r6 = 0
      5: return r6
      6: jump end_if_4
      7: else_3:
      8: end_if_4:
      9: LOAD_PARAM
     10: LOAD
     11: store max, r9
     12: LOAD_PARAM
     13: r11 = 1
     14: r12 = r10 + r11
     15: STORE_TSMC_REF ; Update TSMC reference arr
     16: r14 = 1
     17: store i, r14
     18: loop_5:
     19: r15 = load i
     20: LOAD_PARAM
     21: r17 = r15 < r16
     22: jump_if_not r17, end_loop_6
     23: LOAD_PARAM
     24: LOAD
     25: r20 = load max
     26: r21 = r19 > r20
     27: jump_if_not r21, else_7
     28: LOAD_PARAM
     29: LOAD
     30: store max, r23
     31: jump end_if_8
     32: else_7:
     33: end_if_8:
     34: LOAD_PARAM
     35: r25 = 1
     36: r26 = r24 + r25
     37: STORE_TSMC_REF ; Update TSMC reference arr
     38: r27 = load i
     39: r28 = 1
     40: r29 = r27 + r28
     41: store i, r29
     42: jump loop_5
     43: end_loop_6:
     44: r30 = load max
     45: return r30

Function examples.tsmc_loops.strcmp_tsmc$p_u8$p_u8(s1: *u8, s2: *u8) -> i8
  @smc
  Instructions:
      0: loop_9:
      1: LOAD_PARAM
      2: LOAD
      3: r5 = 0
      4: r6 = r4 != r5
      5: LOAD_PARAM
      6: LOAD
      7: LOAD_PARAM
      8: LOAD
      9: r11 = r8 == r10
     10: UNKNOWN_OP_60
     11: jump_if_not r12, end_loop_10
     12: LOAD_PARAM
     13: r14 = 1
     14: r15 = r13 + r14
     15: STORE_TSMC_REF ; Update TSMC reference s1
     16: LOAD_PARAM
     17: r17 = 1
     18: r18 = r16 + r17
     19: STORE_TSMC_REF ; Update TSMC reference s2
     20: jump loop_9
     21: end_loop_10:
     22: LOAD_PARAM
     23: LOAD
     24: LOAD_PARAM
     25: LOAD
     26: r23 = r20 < r22
     27: TEST
     28: JUMP_IF_ZERO
     29: r24 = r0
     30: jump if_expr_end_12
     31: if_expr_else_11:
     32: LOAD_PARAM
     33: LOAD
     34: LOAD_PARAM
     35: LOAD
     36: r29 = r26 > r28
     37: TEST
     38: JUMP_IF_ZERO
     39: r30 = r0
     40: jump if_expr_end_14
     41: if_expr_else_13:
     42: r30 = r0
     43: if_expr_end_14:
     44: r24 = r30
     45: if_expr_end_12:
     46: return

Function examples.tsmc_loops.count_char_tsmc$p_u8$u8(str: *u8, ch: u8) -> u16
  @smc
  Locals:
    r3 = count: u16
  Instructions:
      0: r4 = 0
      1: store count, r4
      2: loop_15:
      3: LOAD_PARAM
      4: LOAD
      5: r7 = 0
      6: r8 = r6 != r7
      7: jump_if_not r8, end_loop_16
      8: LOAD_PARAM
      9: LOAD
     10: LOAD_PARAM
     11: r12 = r10 == r11
     12: jump_if_not r12, else_17
     13: r13 = load count
     14: r14 = 1
     15: r15 = r13 + r14
     16: store count, r15
     17: jump end_if_18
     18: else_17:
     19: end_if_18:
     20: LOAD_PARAM
     21: r17 = 1
     22: r18 = r16 + r17
     23: STORE_TSMC_REF ; Update TSMC reference str
     24: jump loop_15
     25: end_loop_16:
     26: r19 = load count
     27: return r19

