; MinZ generated code
; Generated: 2025-08-16 22:40:49


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.stdlib_basic_test.test_basic_io
examples.stdlib_basic_test.test_basic_io:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 42
    LD A, 42
    ; Register 1 already in A
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r2 = 1234
    LD HL, 1234
    ; Register 2 already in HL
    ; Call runtime print_u16_decimal
    ; Call to print_u16_decimal (args: 1)
    ; Stack-based parameter passing
    ; Register 2 already in HL
    PUSH HL       ; Argument 0
    CALL print_u16_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r3 = 50
    LD A, 50
    LD B, A         ; Store to physical register B
    ; r4 = -r3
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; Call runtime print_i8_decimal
    ; Call to print_i8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_i8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r5 = 1000
    LD HL, 1000
    LD D, H
    LD E, L
    ; r6 = -r5
    LD H, D
    LD L, E
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; Call runtime print_i16_decimal
    ; Call to print_i16_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_i16_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r7 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
    ; Call runtime print_bool
    ; Call to print_bool (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_bool
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.stdlib_basic_test.test_structs
examples.stdlib_basic_test.test_structs:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Point
    LD HL, -4
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = 100
    LD A, 100
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; Store to Point.x
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r4 = 200
    LD A, 200
    EXX               ; Switch to shadow registers
    LD E, A         ; Store to shadow E' (now active)
    EXX               ; Switch back to main registers
    ; Store to Point.y
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD DE, 2
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store point, r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD ($F002), HL
    ; r5 = load point
    LD HL, ($F002)
    ; Register 5 already in HL
    ; Load field x (offset 0)
    ; Register 5 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; Call runtime print_u16_decimal
    ; Call to print_u16_decimal (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    CALL print_u16_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r7 = load point
    LD HL, ($F002)
    ; Register 7 already in HL
    ; Load field y (offset 2)
    ; Register 7 already in HL
    LD DE, 2
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Register 8 already in HL
    ; Call runtime print_u16_decimal
    ; Call to print_u16_decimal (args: 1)
    ; Stack-based parameter passing
    ; Register 8 already in HL
    PUSH HL       ; Argument 0
    CALL print_u16_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.stdlib_basic_test.test_arrays
examples.stdlib_basic_test.test_arrays:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r4 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r5 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; Array initializer with 3 elements
    ; Initialize array with 3 elements
    ; Array allocated at $F004
    LD HL, $F004
    LD ($F004), HL    ; Virtual register 2 to memory
    ; Initialize array[0]
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL        ; Save array base
    LD DE, 0
    ADD HL, DE     ; Calculate element address
    PUSH HL        ; Save element address
    LD A, L
    POP HL         ; Restore element address
    LD (HL), A
    POP HL         ; Restore array base
    PUSH HL        ; Save field address
    LD A, ($F000)     ; Virtual register 0 from memory
    POP HL         ; Restore field address
    LD (HL), A
    ; Initialize array[1]
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL        ; Save array base
    LD DE, 1
    ADD HL, DE     ; Calculate element address
    PUSH HL        ; Save element address
    LD A, H
    POP HL         ; Restore element address
    LD (HL), A
    POP HL         ; Restore array base
    PUSH HL        ; Save field address
    LD A, ($F000)     ; Virtual register 0 from memory
    POP HL         ; Restore field address
    LD (HL), A
    ; Initialize array[2]
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL        ; Save array base
    LD DE, 2
    ADD HL, DE     ; Calculate element address
    PUSH HL        ; Save element address
    LD A, L
    POP HL         ; Restore element address
    LD (HL), A
    POP HL         ; Restore array base
    PUSH HL        ; Save field address
    LD A, ($F000)     ; Virtual register 0 from memory
    POP HL         ; Restore field address
    LD (HL), A
    ; r6 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Load array numbers base address
    LD HL, ($F002)
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; Store element 0
    ; Register 6 already in HL
    PUSH HL
    LD A, ($F000)     ; Virtual register 0 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD (HL), 0    ; TODO: Need value source
    ; r8 = 2
    LD A, 2
    LD L, A         ; Store to HL (low byte)
    ; Load array numbers base address
    LD HL, ($F002)
    ; Register 9 already in HL
    ; r10 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r11 = r9 + r10
    ; Register 9 already in HL
    LD D, H
    LD E, L
    ; Register 10 already in HL
    ADD HL, DE
    ; Store element 1
    LD A, L
    LD ($0000), A
    ; r12 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; Load array numbers base address
    LD HL, ($F002)
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; r14 = 2
    LD A, 2
    LD L, A         ; Store to HL (low byte)
    ; r15 = r13 + r14
    LD HL, ($F01A)    ; Virtual register 13 from memory
    LD D, H
    LD E, L
    ; Register 14 already in HL
    ADD HL, DE
    ; Store element 2
    LD A, L
    LD ($0000), A
    ; r16 = load numbers
    LD HL, ($F002)
    ; r17 = 0
    LD A, 0
    LD ($F022), A     ; Virtual register 17 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F022)     ; Virtual register 17 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r19 = load numbers
    LD HL, ($F002)
    ; r20 = 1
    LD A, 1
    LD ($F028), A     ; Virtual register 20 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F028)     ; Virtual register 20 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r22 = load numbers
    LD HL, ($F002)
    ; r23 = 2
    LD A, 2
    LD L, A         ; Store to HL (low byte)
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.stdlib_basic_test.add$u16$u16
examples.stdlib_basic_test.add$u16$u16:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.stdlib_basic_test.add$u16$u16_param_a.op:
examples.stdlib_basic_test.add$u16$u16_param_a equ examples.stdlib_basic_test.add$u16$u16_param_a.op + 1
    LD HL, #0000   ; SMC parameter a
    ; Register 3 already in HL
examples.stdlib_basic_test.add$u16$u16_param_b.op:
examples.stdlib_basic_test.add$u16$u16_param_b equ examples.stdlib_basic_test.add$u16$u16_param_b.op + 1
    LD DE, #0000   ; SMC parameter b
    EX DE, HL      ; Move to HL for storage
    ; Register 4 already in HL
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    ; Register 4 already in HL
    ADD HL, DE
    ; Register 5 already in HL
    LD A, L

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.stdlib_basic_test.add$u16$u16_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.stdlib_basic_test.add$u16$u16_store_addr.op:
examples.stdlib_basic_test.add$u16$u16_store_addr equ examples.stdlib_basic_test.add$u16$u16_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.stdlib_basic_test.test_functions
examples.stdlib_basic_test.test_functions:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; r4 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; r5 = 20
    LD A, 20
    LD L, A         ; Store to HL (low byte)
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.stdlib_basic_test.add$u16$u16_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.stdlib_basic_test.add$u16$u16_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.stdlib_basic_test.add$u16$u16_store_addr), HL
    ; unknown op 41
    ; Patch parameter a = 0
    LD HL, 0              ; Parameter value
    LD (examples.stdlib_basic_test.add$u16$u16_param_a+1), HL  ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD HL, 0              ; Parameter value
    LD (examples.stdlib_basic_test.add$u16$u16_param_b+1), HL  ; Patch parameter immediate
    ; r6 = call examples.stdlib_basic_test.add$u16$u16
    ; Call to examples.stdlib_basic_test.add$u16$u16 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL examples.stdlib_basic_test.add$u16$u16
    ; store result, r6
    LD ($F002), HL
    ; r7 = load result
    LD HL, ($F002)
    ; Register 7 already in HL
    ; Call runtime print_u16_decimal
    ; Call to print_u16_decimal (args: 1)
    ; Stack-based parameter passing
    ; Register 7 already in HL
    PUSH HL       ; Argument 0
    CALL print_u16_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.stdlib_basic_test.main
examples.stdlib_basic_test.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call examples.stdlib_basic_test.test_basic_io
    ; Call to examples.stdlib_basic_test.test_basic_io (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.stdlib_basic_test.test_basic_io
    ; r2 = call examples.stdlib_basic_test.test_structs
    ; Call to examples.stdlib_basic_test.test_structs (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.stdlib_basic_test.test_structs
    ; r3 = call examples.stdlib_basic_test.test_arrays
    ; Call to examples.stdlib_basic_test.test_arrays (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.stdlib_basic_test.test_arrays
    ; Register 3 already in HL
    ; r4 = call examples.stdlib_basic_test.test_functions
    ; Call to examples.stdlib_basic_test.test_functions (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.stdlib_basic_test.test_functions
    ; return
    RET

; Runtime print helper functions
print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


; Standard library routines

    END main
