; MinZ generated code
; Generated: 2025-08-16 22:40:48


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_simple_fix.test_simple_lambda$f_0
examples.lambda_simple_fix.test_simple_lambda$f_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.lambda_simple_fix.test_simple_lambda$f_0_param_x.op:
examples.lambda_simple_fix.test_simple_lambda$f_0_param_x equ examples.lambda_simple_fix.test_simple_lambda$f_0_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    ; Register 1 already in A

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_simple_fix.test_simple_lambda$f_0_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_simple_fix.test_simple_lambda$f_0_store_addr.op:
examples.lambda_simple_fix.test_simple_lambda$f_0_store_addr equ examples.lambda_simple_fix.test_simple_lambda$f_0_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_simple_fix.test_simple_lambda
examples.lambda_simple_fix.test_simple_lambda:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 42
    LD A, 42
    LD B, A         ; Store to physical register B
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_simple_fix.test_simple_lambda$f_0_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_simple_fix.test_simple_lambda$f_0_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_simple_fix.test_simple_lambda$f_0_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (examples.lambda_simple_fix.test_simple_lambda$f_0_param_x+1), A   ; Patch parameter immediate
    ; r2 = call examples.lambda_simple_fix.test_simple_lambda$f_0
    ; Call to examples.lambda_simple_fix.test_simple_lambda$f_0 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_simple_fix.test_simple_lambda$f_0

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_simple_fix.test_simple_lambda_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_simple_fix.test_simple_lambda_store_addr.op:
examples.lambda_simple_fix.test_simple_lambda_store_addr equ examples.lambda_simple_fix.test_simple_lambda_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_simple_fix.main
examples.lambda_simple_fix.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_simple_fix.test_simple_lambda_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_simple_fix.test_simple_lambda_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_simple_fix.test_simple_lambda_store_addr), HL
    ; r1 = call examples.lambda_simple_fix.test_simple_lambda
    ; Call to examples.lambda_simple_fix.test_simple_lambda (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_simple_fix.test_simple_lambda
    ; return
    RET

; Standard library routines

    END main
