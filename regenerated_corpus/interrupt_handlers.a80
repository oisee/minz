; MinZ generated code
; Generated: 2025-08-16 22:40:48


; Data section
    ORG $F000

examples.interrupt_handlers.timer_ticks:
    DW 0

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.interrupt_handlers.fast_interrupt_handler
examples.interrupt_handlers.fast_interrupt_handler:
; Using absolute addressing for locals
    ; Load parameters from registers
    ; asm {         EXX             // Switch to shadow registers
        EX AF, AF'      // Switch AF with shadow AF'
        
        // Handler code here - can use all registers freely
        LD A, 0xFF
        OUT (0xFE), A   // Example: set border
        
        EX AF, AF'      // Restore main AF
        EXX             // Restore main registers
     }
    EXX             // Switch to shadow registers
    EX AF, AF'      // Switch AF with shadow AF'
    // Handler code here - can use all registers freely
    LD A, 0xFF
    OUT (0xFE), A   // Example: set border
    EX AF, AF'      // Restore main AF
    EXX             // Restore main registers
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.interrupt_handlers.timer_interrupt
examples.interrupt_handlers.timer_interrupt:
; Using absolute addressing for locals
    ; Load parameters from registers
    ; asm {         PUSH AF
        PUSH BC
        PUSH DE
        PUSH HL
        
        // Increment timer counter
        LD HL, (timer_ticks)
        INC HL
        LD (timer_ticks), HL
        
        POP HL
        POP DE
        POP BC
        POP AF
        EI
        RETI
     }
    PUSH AF
    PUSH BC
    PUSH DE
    PUSH HL
    // Increment timer counter
    LD HL, (timer_ticks)
    INC HL
    LD (timer_ticks), HL
    POP HL
    POP DE
    POP BC
    POP AF
    EI
    RETI
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.interrupt_handlers.setup_interrupts
examples.interrupt_handlers.setup_interrupts:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm {         DI              // Disable interrupts
        IM 2            // Set interrupt mode 2
        LD A, 0x39      // High byte of interrupt table
        LD I, A         // Load into I register
        EI              // Enable interrupts
     }
    DI              // Disable interrupts
    IM 2            // Set interrupt mode 2
    LD A, 0x39      // High byte of interrupt table
    LD I, A         // Load into I register
    EI              // Enable interrupts
    ; return
    RET

    END main
