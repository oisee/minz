; MinZ generated code
; Generated: 2025-08-16 22:40:49


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.string_operations.str_length$p_u8
examples.string_operations.str_length$p_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    ; Register 3 already in A
    ; store len, r3
    LD ($F004), HL
    ; loop_1:
examples_string_operations_str_length_p_u8_loop_1:
; TSMC reference parameter str
str$immOP:
    LD HL, 0000      ; TSMC ref address for str
str$imm0 EQU str$immOP+1
    LD D, H
    LD E, L
    ; r5 = *r4
    LD H, D
    LD L, E
    LD A, (HL)
    LD B, A         ; Store to physical register B
    ; r6 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; r7 = r5 != r6
    LD E, C        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP NZ, examples_string_operations_str_length_p_u8_ne_true_0
    LD HL, 0       ; False
    JP examples_string_operations_str_length_p_u8_ne_done_0
examples_string_operations_str_length_p_u8_ne_true_0:
    LD HL, 1       ; True
examples_string_operations_str_length_p_u8_ne_done_0:
    ; jump_if_not r7, end_loop_2
    EXX               ; Switch to shadow registers
    LD A, B         ; From shadow B' (now active)
    EXX               ; Switch back to main registers
    OR A
    JP Z, examples_string_operations_str_length_p_u8_end_loop_2
    ; r8 = load len
    LD HL, ($F004)
    ; r9 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    LD B, H
    LD C, L
    ; store len, r10
    LD H, B
    LD L, C
    LD ($F004), HL
    LD HL, (str$imm0) ; Reload TSMC ref address
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r12 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E, A         ; Store to shadow E' (now active)
    EXX               ; Switch back to main registers
    ; r13 = r11 + r12
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 13 already in HL
    ; store str, r13
    ; Register 13 already in HL
    LD ($F000), HL
    ; jump loop_1
    JP examples_string_operations_str_length_p_u8_loop_1
    ; end_loop_2:
examples_string_operations_str_length_p_u8_end_loop_2:
    ; r14 = load len
    LD HL, ($F004)
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.string_operations.str_copy$p_u8$p_u8
examples.string_operations.str_copy$p_u8$p_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; loop_3:
examples_string_operations_str_copy_p_u8_p_u8_loop_3:
; TSMC reference parameter src
src$immOP:
    LD HL, 0000      ; TSMC ref address for src
src$imm0 EQU src$immOP+1
    ; r4 = *r3
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r5 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; r6 = r4 != r5
    LD D, H
    LD E, L
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP NZ, examples_string_operations_str_copy_p_u8_p_u8_ne_true_1
    LD HL, 0       ; False
    JP examples_string_operations_str_copy_p_u8_p_u8_ne_done_1
examples_string_operations_str_copy_p_u8_p_u8_ne_true_1:
    LD HL, 1       ; True
examples_string_operations_str_copy_p_u8_p_u8_ne_done_1:
    ; jump_if_not r6, end_loop_4
    LD A, H
    OR A
    JP Z, examples_string_operations_str_copy_p_u8_p_u8_end_loop_4
    LD HL, (src$imm0) ; Reload TSMC ref address
    ; r8 = *r7
    LD A, (HL)
    LD H, A         ; Store to physical register H
; TSMC reference parameter dest
dest$immOP:
    LD HL, 0000      ; TSMC ref address for dest
dest$imm0 EQU dest$immOP+1
    LD ($F012), HL    ; Virtual register 9 to memory
    ; Store through pointer
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    LD HL, (dest$imm0) ; Reload TSMC ref address
    ; Register 10 already in HL
    ; r11 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r12 = r10 + r11
    ; Register 10 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F018), HL    ; Virtual register 12 to memory
    ; store dest, r12
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD ($F000), HL
    LD HL, (src$imm0) ; Reload TSMC ref address
    ; Register 13 already in HL
    ; r14 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r15 = r13 + r14
    ; Register 13 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; store src, r15
    LD ($F000), HL
    ; jump loop_3
    JP examples_string_operations_str_copy_p_u8_p_u8_loop_3
    ; end_loop_4:
examples_string_operations_str_copy_p_u8_p_u8_end_loop_4:
    ; r16 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    LD HL, (dest$imm0) ; Reload TSMC ref address
    ; Register 17 already in HL
    ; Store through pointer
    ; Register 17 already in HL
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; return
    RET

    END main
