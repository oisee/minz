; MinZ generated code
; Generated: 2025-08-16 22:40:48


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_curry_test.curry_demo$make_adder_0
examples.lambda_curry_test.curry_demo$make_adder_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.lambda_curry_test.curry_demo$make_adder_0_param_x.op:
examples.lambda_curry_test.curry_demo$make_adder_0_param_x equ examples.lambda_curry_test.curry_demo$make_adder_0_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    ; Register 1 already in A
    ; r2 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; r3 = r1 + r2
    LD D, H
    LD E, L
    ADD HL, DE

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_curry_test.curry_demo$make_adder_0_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_curry_test.curry_demo$make_adder_0_store_addr.op:
examples.lambda_curry_test.curry_demo$make_adder_0_store_addr equ examples.lambda_curry_test.curry_demo$make_adder_0_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_curry_test.curry_demo
examples.lambda_curry_test.curry_demo:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 10
    LD A, 10
    LD D, A         ; Store to physical register D
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_curry_test.curry_demo$make_adder_0_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_curry_test.curry_demo$make_adder_0_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_curry_test.curry_demo$make_adder_0_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (examples.lambda_curry_test.curry_demo$make_adder_0_param_x+1), A   ; Patch parameter immediate
    ; r2 = call examples.lambda_curry_test.curry_demo$make_adder_0
    ; Call to examples.lambda_curry_test.curry_demo$make_adder_0 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_curry_test.curry_demo$make_adder_0

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_curry_test.curry_demo_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_curry_test.curry_demo_store_addr.op:
examples.lambda_curry_test.curry_demo_store_addr equ examples.lambda_curry_test.curry_demo_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_curry_test.traditional_add$u8
examples.lambda_curry_test.traditional_add$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.lambda_curry_test.traditional_add$u8_param_x.op:
examples.lambda_curry_test.traditional_add$u8_param_x equ examples.lambda_curry_test.traditional_add$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD H, A         ; Store to physical register H
    ; r3 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
examples.lambda_curry_test.traditional_add$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
examples.lambda_curry_test.traditional_add$u8_store_addr.op:
examples.lambda_curry_test.traditional_add$u8_store_addr equ examples.lambda_curry_test.traditional_add$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_curry_test.main
examples.lambda_curry_test.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_curry_test.curry_demo_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_curry_test.curry_demo_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_curry_test.curry_demo_store_addr), HL
    ; r2 = call examples.lambda_curry_test.curry_demo
    ; Call to examples.lambda_curry_test.curry_demo (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_curry_test.curry_demo
    LD ($F004), HL    ; Virtual register 2 to memory
    ; store r1, r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD E, A         ; Store to shadow E' (now active)
    EXX               ; Switch back to main registers
    ; r5 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; unknown op 39
    ; Smart patch 'store_u8' for examples.lambda_curry_test.traditional_add$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (examples.lambda_curry_test.traditional_add$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (examples.lambda_curry_test.traditional_add$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (examples.lambda_curry_test.traditional_add$u8_param_x+1), A   ; Patch parameter immediate
    ; r6 = call examples.lambda_curry_test.traditional_add$u8
    ; Call to examples.lambda_curry_test.traditional_add$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_curry_test.traditional_add$u8
    ; store r2, r6
    LD A, H
    LD ($F006), A
    ; return
    RET

; Standard library routines

    END main
