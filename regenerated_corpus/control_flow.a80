; MinZ generated code
; Generated: 2025-08-16 22:40:48


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.control_flow.test_if$u8
examples.control_flow.test_if$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.control_flow.test_if$u8_param_x.op:
examples.control_flow.test_if$u8_param_x equ examples.control_flow.test_if$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 10
    LD A, 10
    LD B, A         ; Store to physical register B
    ; r4 = r2 > r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD E, B        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, examples_control_flow_test_if_u8_gt_check_zero_0
    LD HL, 0       ; False (negative)
    JP examples_control_flow_test_if_u8_gt_done_0
examples_control_flow_test_if_u8_gt_check_zero_0:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, examples_control_flow_test_if_u8_gt_false_0
    LD HL, 1       ; True (positive and non-zero)
    JP examples_control_flow_test_if_u8_gt_done_0
examples_control_flow_test_if_u8_gt_false_0:
    LD HL, 0       ; False (zero)
examples_control_flow_test_if_u8_gt_done_0:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, examples_control_flow_test_if_u8_else_1
    LD A, (examples.control_flow.test_if$u8_param_x)
    LD D, A         ; Store to physical register D
    ; r6 = 2
    LD A, 2
    LD E, A         ; Store to physical register E
    ; r7 = r5 * r6
    LD A, D
    ; Optimized multiplication by 2 (shift left 1)
    ADD A, A          ; A << 1
    LD L, A
    LD H, 0
    ; return r7
    RET
    ; jump end_if_2
    JP examples_control_flow_test_if_u8_end_if_2
    ; else_1:
examples_control_flow_test_if_u8_else_1:
    LD A, (examples.control_flow.test_if$u8_param_x)
    LD L, A         ; Store to physical register L
    ; r9 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD B, A         ; Store to shadow B' (now active)
    EXX               ; Switch back to main registers
    ; r10 = r8 > r9
    EXX               ; Switch to shadow registers
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, examples_control_flow_test_if_u8_gt_check_zero_1
    LD HL, 0       ; False (negative)
    JP examples_control_flow_test_if_u8_gt_done_1
examples_control_flow_test_if_u8_gt_check_zero_1:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, examples_control_flow_test_if_u8_gt_false_1
    LD HL, 1       ; True (positive and non-zero)
    JP examples_control_flow_test_if_u8_gt_done_1
examples_control_flow_test_if_u8_gt_false_1:
    LD HL, 0       ; False (zero)
examples_control_flow_test_if_u8_gt_done_1:
    ; jump_if_not r10, else_3
    EXX               ; Switch to shadow registers
    LD A, C         ; From shadow C' (now active)
    EXX               ; Switch back to main registers
    OR A
    JP Z, examples_control_flow_test_if_u8_else_3
    LD A, (examples.control_flow.test_if$u8_param_x)
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r12 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD E, A         ; Store to shadow E' (now active)
    EXX               ; Switch back to main registers
    ; r13 = r11 + r12
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r13
    RET
    ; jump end_if_4
    JP examples_control_flow_test_if_u8_end_if_4
    ; else_3:
examples_control_flow_test_if_u8_else_3:
    LD A, (examples.control_flow.test_if$u8_param_x)
    ; Register 14 already in A
    ; return r14
    RET
    ; end_if_4:
examples_control_flow_test_if_u8_end_if_4:
    ; end_if_2:
examples_control_flow_test_if_u8_end_if_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.control_flow.test_while$u8
examples.control_flow.test_while$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
    ; store sum, r3
    EXX               ; Switch to shadow registers
    LD A, C         ; From shadow C' (now active)
    EXX               ; Switch back to main registers
    LD ($F004), A
    ; r5 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store i, r5
    LD A, H
    LD ($F008), A
    ; loop_5:
examples_control_flow_test_while_u8_loop_5:
    ; r6 = load i
    LD A, ($F008)
    ; Register 6 already in A
examples.control_flow.test_while$u8_param_n.op:
examples.control_flow.test_while$u8_param_n equ examples.control_flow.test_while$u8_param_n.op + 1
    LD A, #00      ; Parameter n (gets patched)
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = r6 < r7
    LD HL, ($F00E)    ; Virtual register 7 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, examples_control_flow_test_while_u8_lt_true_2
    LD HL, 0       ; False
    JP examples_control_flow_test_while_u8_lt_done_2
examples_control_flow_test_while_u8_lt_true_2:
    LD HL, 1       ; True
examples_control_flow_test_while_u8_lt_done_2:
    LD ($F010), HL    ; Virtual register 8 to memory
    ; jump_if_not r8, end_loop_6
    LD A, ($F010)     ; Virtual register 8 from memory
    OR A
    JP Z, examples_control_flow_test_while_u8_end_loop_6
    ; r9 = load sum
    LD A, ($F004)
    EXX               ; Switch to shadow registers
    LD B, A         ; Store to shadow B' (now active)
    EXX               ; Switch back to main registers
    ; r10 = load i
    LD A, ($F008)
    LD L, A         ; Store to physical register L
    ; r11 = r9 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    ; store sum, r11
    EXX               ; Switch to shadow registers
    LD A, B         ; From shadow B' (now active)
    EXX               ; Switch back to main registers
    LD ($F004), A
    ; r12 = load i
    LD A, ($F008)
    ; Register 12 already in A
    ; r13 = 1
    LD A, 1
    LD ($F01A), A     ; Virtual register 13 to memory
    ; r14 = r12 + r13
    LD D, H
    LD E, L
    LD HL, ($F01A)    ; Virtual register 13 from memory
    ADD HL, DE
    ; store i, r14
    LD A, C
    LD ($F008), A
    ; jump loop_5
    JP examples_control_flow_test_while_u8_loop_5
    ; end_loop_6:
examples_control_flow_test_while_u8_end_loop_6:
    ; r15 = load sum
    LD A, ($F004)
    ; Register 15 already in A
    ; return r15
    RET

    END main
