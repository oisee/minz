; MinZ generated code
; Generated: 2025-08-16 22:40:49


; Data section
    ORG $F000

examples.loops_indexed.scores:
    DS 24

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.loops_indexed.main
examples.loops_indexed.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    ; Register 2 already in A
    ; store i, r2
    ; Register 2 already in A
    LD ($F002), A
    ; loop_1:
examples_loops_indexed_main_loop_1:
    ; r3 = load i
    LD A, ($F002)
    LD C, A         ; Store to physical register C
    ; r4 = 8
    LD A, 8
    LD D, A         ; Store to physical register D
    ; r5 = r3 < r4
    LD E, D        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, examples_loops_indexed_main_lt_true_0
    LD HL, 0       ; False
    JP examples_loops_indexed_main_lt_done_0
examples_loops_indexed_main_lt_true_0:
    LD HL, 1       ; True
examples_loops_indexed_main_lt_done_0:
    ; jump_if_not r5, end_loop_2
    LD A, E
    OR A
    JP Z, examples_loops_indexed_main_end_loop_2
    ; r6 = load i
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r7 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    ADD HL, DE
    ; r9 = addr(examples.loops_indexed.scores)
    LD HL, examples.loops_indexed.scores
    LD ($F012), HL    ; Virtual register 9 to memory
    ; r10 = load i
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
    ; Load array element (examples.loops_indexed.Score)
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL
    EXX               ; Switch to shadow registers
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD E, A         ; Store to DE (low byte)
    ; Store to field player_id (offset 0)
    LD H, D
    LD L, E
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r12 = load i
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r13 = 100
    LD A, 100
    EXX               ; Switch to shadow registers
    LD E, A         ; Store to shadow E' (now active)
    EXX               ; Switch back to main registers
    ; r14 = r12 * r13
    ; 16-bit multiplication
    LD (mul_src1_1), HL  ; Save multiplicand
    LD (mul_src2_1), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_1)  ; DE = multiplicand
    LD BC, (mul_src2_1)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_1
examples_loops_indexed_main_mul16_loop_1:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_1
examples_loops_indexed_main_mul16_done_1:
mul_src1_1: DW 0
mul_src2_1: DW 0
    LD B, H
    LD C, L
    ; r15 = addr(examples.loops_indexed.scores)
    LD HL, examples.loops_indexed.scores
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r16 = load i
    LD A, ($F002)
    LD L, A         ; Store to HL (low byte)
    ; Load array element (examples.loops_indexed.Score)
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    PUSH HL
    LD D, H
    LD E, L
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F022), A     ; Virtual register 17 to memory
    ; Store to field points (offset 1)
    LD HL, ($F022)    ; Virtual register 17 from memory
    LD DE, 1
    ADD HL, DE
    PUSH HL
    LD H, B
    LD L, C
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r18 = load i
    LD A, ($F002)
    LD ($F024), A     ; Virtual register 18 to memory
    ; r19 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r20 = r18 + r19
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r20
    LD A, L
    LD ($F002), A
    ; jump loop_1
    JP examples_loops_indexed_main_loop_1
    ; end_loop_2:
examples_loops_indexed_main_end_loop_2:
    ; r22 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; store max_score, r22
    ; Register 22 already in HL
    LD ($F02A), HL
    ; r24 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; store max_index, r24
    LD A, L
    LD ($F02E), A
    ; return
    RET

    END main
