; MinZ generated code
; Generated: 2025-08-05 00:40:01


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_new_types.test_new_types
examples.test_new_types.test_new_types:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -19
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    ; r2 = 1193046
    LD HL, 1193046
    LD ($F004), HL    ; Virtual register 2 to memory
    ; store , r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD (IX-3), L
    LD (IX-2), H
    ; r4 = 8388608
    LD HL, 8388608
    LD D, H
    LD E, L
    ; r5 = -r4
    LD H, D
    LD L, E
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; store , r5
    LD (IX-6), L
    LD (IX-5), H
    ; r7 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; store , r7
    LD (IX-8), L
    LD (IX-7), H
    ; r9 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r9
    LD (IX-9), L
    LD (IX-8), H
    ; r11 = 0
    LD A, 0
    LD ($F016), A     ; Virtual register 11 to memory
    ; store , r11
    LD HL, ($F016)    ; Virtual register 11 from memory
    LD (IX-12), L
    LD (IX-11), H
    ; r13 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r13
    LD (IX-15), L
    LD (IX-14), H
    ; r15 = load velocity
    LD L, (IX-8)
    LD H, (IX-7)
    ; r16 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r17 = r15 + r16
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r17
    LD (IX-17), L
    LD (IX-16), H
    ; r19 = load position
    LD L, (IX-12)
    LD H, (IX-11)
    ; r20 = load velocity
    LD L, (IX-8)
    LD H, (IX-7)
    ; Register 20 already in HL
    ; r21 = r19 + r20
    LD D, H
    LD E, L
    ; Register 20 already in HL
    ADD HL, DE
    ; store , r21
    LD (IX-19), L
    LD (IX-18), H
    ; r22 = 16777215
    LD HL, 16777215
    LD ($F02C), HL    ; Virtual register 22 to memory
    ; store addr24, r22
    LD HL, ($F02C)    ; Virtual register 22 from memory
    LD (IX-3), L
    LD (IX-2), H
    ; r23 = 8388607
    LD HL, 8388607
    LD B, H
    LD C, L
    ; store signed24, r23
    LD H, B
    LD L, C
    LD (IX-6), L
    LD (IX-5), H
    ; r24 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; store alpha, r24
    ; Register 24 already in HL
    LD (IX-9), L
    LD (IX-8), H
    ; r25 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store precise, r25
    LD (IX-15), L
    LD (IX-14), H
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
