name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.9.1)'
        required: true
        default: 'v0.9.1-dev'

jobs:
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get all tags
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        cd minzc && go mod download
        cd .. && npm install
        npm install -g tree-sitter-cli
    
    - name: Generate parser
      run: tree-sitter generate
    
    - name: Set version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi
    
    - name: Build release
      run: |
        chmod +x scripts/release.sh
        VERSION=${{ env.VERSION }} scripts/release.sh
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ env.VERSION }}
        path: release/*
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*.tar.gz
          release/*.zip
          release/*checksums.txt
          release/RELEASE_NOTES_*.md
        body_path: release/RELEASE_NOTES_${{ env.VERSION }}.md
        draft: true
        prerelease: ${{ contains(env.VERSION, 'dev') || contains(env.VERSION, 'rc') }}

  build-platform:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin  
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Build compiler
      run: |
        cd minzc
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o minzc-${{ matrix.goos }}-${{ matrix.goarch }} cmd/minzc/main.go
    
    - name: Upload platform binary
      uses: actions/upload-artifact@v3
      with:
        name: minzc-${{ matrix.goos }}-${{ matrix.goarch }}
        path: minzc/minzc-${{ matrix.goos }}-${{ matrix.goarch }}

  docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi
    
    - name: Build Docker image
      run: docker build -t minz:${{ env.VERSION }} -f scripts/Dockerfile .
    
    - name: Save Docker image
      run: docker save minz:${{ env.VERSION }} | gzip > minz-docker-${{ env.VERSION }}.tar.gz
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image-${{ env.VERSION }}
        path: minz-docker-*.tar.gz