; MinZ generated code
; Generated: 2025-08-11 21:25:42


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_coalescing.main
test_coalescing.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    ; Register 2 already in A
    ; store a, r2
    ; Register 2 already in A
    LD ($F002), A
    ; r4 = 20
    LD A, 20
    LD C, A         ; Store to physical register C
    ; store b, r4
    LD A, C
    LD ($F006), A
    ; r6 = load a
    LD A, ($F002)
    LD E, A         ; Store to physical register E
    LD HL, 0       ; Assume success
    JR NC, test_coalescing_main_no_err_0
    INC HL         ; Error detected
test_coalescing_main_no_err_0:
    LD ($F000), HL    ; Virtual register 0 to memory
    ; Jump to error handler if CY flag set
    LD A, ($F000)     ; Virtual register 0 from memory
    OR A
    JP NZ, test_coalescing_main_nil_coalescing_else_1
    ; unknown op 63
    LD A, H
    OR L           ; Test HL (set flags)
    ; unknown op 5
    LD A, ($F000)     ; Virtual register 0 from memory
    OR A
    JP Z, 
    ; unknown op 22
    ; jump nil_coalescing_end_2
    JP test_coalescing_main_nil_coalescing_end_2
    ; nil_coalescing_else_1:
test_coalescing_main_nil_coalescing_else_1:
    ; r8 = load b
    LD A, ($F006)
    LD L, A         ; Store to physical register L
    ; unknown op 22
    ; nil_coalescing_end_2:
test_coalescing_main_nil_coalescing_end_2:
    ; store result, r7
    LD A, H
    LD ($F00A), A
    ; r9 = load result
    LD A, ($F00A)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; ZX Spectrum ROM print
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
