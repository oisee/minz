// Test type casting and implicit widening

// Test implicit widening in function calls
fun process_u16(value: u16) -> u16 {
    return value * 2;
}

// Test implicit widening in assignments
fun test_widening() -> void {
    let small: u8 = 42;
    
    // Should work - implicit widening u8 -> u16
    let big: u16 = small;
    
    // Should work - implicit widening in function call
    let result = process_u16(small);
    
    @print("Small: {}", small);
    @print("Big: {}", big);
    @print("Result: {}", result);
}

// Test explicit narrowing
fun test_narrowing() -> void {
    let big: u16 = 300;
    
    // Requires explicit cast - narrowing
    let small: u8 = big as u8;
    
    @print("Big: {}", big);
    @print("Small (truncated): {}", small);
}

// Test mixed arithmetic with implicit widening
fun test_mixed_arithmetic() -> void {
    let byte: u8 = 100;
    let word: u16 = 1000;
    
    // Should work - byte implicitly widened to u16
    let sum: u16 = word + byte;
    
    @print("Sum: {}", sum);
}

fun main() -> void {
    test_widening();
    test_narrowing();
    test_mixed_arithmetic();
}