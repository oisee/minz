; MinZ Intermediate Representation (MIR)
; Module: main

Function test_type_casting.process_u16$u16(value: u16) -> u16
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 2
      2: r4 = r2 * r3
      3: return r4

Function test_type_casting.test_widening() -> void
  @smc
  Locals:
    r1 = small: u8
    r3 = big: u16
    r5 = result: u16
  Instructions:
      0: r2 = 42
      1: store small, r2
      2: r4 = load small
      3: store big, r4
      4: r6 = load small
      5: r7 = load small
      6: PATCH_TEMPLATE
      7: PATCH_TARGET
      8: PATCH_PARAM
      9: r8 = call test_type_casting.process_u16$u16
     10: store result, r8
     11: PRINT_STRING_DIRECT ; Direct print "Small: " (7 chars)
     12: PRINT_STRING_DIRECT ; Direct print "Big: " (5 chars)
     13: PRINT_STRING_DIRECT ; Direct print "Result: " (8 chars)
     14: return

Function test_type_casting.test_narrowing() -> void
  @smc
  Locals:
    r1 = big: u16
    r3 = small: u8
  Instructions:
      0: r2 = 300
      1: store big, r2
      2: r4 = load big
      3: store small, r4
      4: PRINT_STRING_DIRECT ; Direct print "Big: " (5 chars)
      5: LOAD_STRING
      6: PRINT_STRING ; Print "Small (truncated): " (19 chars via loop)
      7: return

Function test_type_casting.test_mixed_arithmetic() -> void
  @smc
  Locals:
    r1 = byte: u8
    r3 = word: u16
    r5 = sum: u16
  Instructions:
      0: r2 = 100
      1: store byte, r2
      2: r4 = 1000
      3: store word, r4
      4: r6 = load word
      5: r7 = load byte
      6: r8 = r6 + r7
      7: store sum, r8
      8: PRINT_STRING_DIRECT ; Direct print "Sum: " (5 chars)
      9: return

Function test_type_casting.main() -> void
  @smc
  Instructions:
      0: r1 = call test_type_casting.test_widening
      1: r2 = call test_type_casting.test_narrowing
      2: r3 = call test_type_casting.test_mixed_arithmetic
      3: return

