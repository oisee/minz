; MinZ generated code
; Generated: 2025-08-11 21:11:32


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_pattern_match.get_value$Color
test_pattern_match.get_value$Color:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_pattern_match.get_value$Color_param_c.op:
test_pattern_match.get_value$Color_param_c equ test_pattern_match.get_value$Color_param_c.op + 1
    LD A, #00      ; Parameter c (gets patched)
    ; Register 2 already in A
    ; r3 = r2 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, test_pattern_match_get_value_Color_eq_true_0
    LD HL, 0       ; False
    JP test_pattern_match_get_value_Color_eq_done_0
test_pattern_match_get_value_Color_eq_true_0:
    LD HL, 1       ; True
test_pattern_match_get_value_Color_eq_done_0:
    ; jump_if r3, case_arm_0_2
    LD A, B
    OR A
    JP NZ, test_pattern_match_get_value_Color_case_arm_0_2
    ; jump case_arm_1_3
    JP test_pattern_match_get_value_Color_case_arm_1_3
    ; r4 = r2 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, test_pattern_match_get_value_Color_eq_true_1
    LD HL, 0       ; False
    JP test_pattern_match_get_value_Color_eq_done_1
test_pattern_match_get_value_Color_eq_true_1:
    LD HL, 1       ; True
test_pattern_match_get_value_Color_eq_done_1:
    ; jump_if r4, case_arm_1_3
    LD A, C
    OR A
    JP NZ, test_pattern_match_get_value_Color_case_arm_1_3
    ; jump case_arm_2_4
    JP test_pattern_match_get_value_Color_case_arm_2_4
    ; r5 = r2 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, test_pattern_match_get_value_Color_eq_true_2
    LD HL, 0       ; False
    JP test_pattern_match_get_value_Color_eq_done_2
test_pattern_match_get_value_Color_eq_true_2:
    LD HL, 1       ; True
test_pattern_match_get_value_Color_eq_done_2:
    ; jump_if r5, case_arm_2_4
    LD A, D
    OR A
    JP NZ, test_pattern_match_get_value_Color_case_arm_2_4
    ; jump case_end_1
    JP test_pattern_match_get_value_Color_case_end_1
    ; case_arm_0_2:
test_pattern_match_get_value_Color_case_arm_0_2:
    ; r6 = 1
    LD A, 1
    LD E, A         ; Store to physical register E
    ; jump case_end_1
    JP test_pattern_match_get_value_Color_case_end_1
    ; case_arm_1_3:
test_pattern_match_get_value_Color_case_arm_1_3:
    ; r7 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; jump case_end_1
    JP test_pattern_match_get_value_Color_case_end_1
    ; case_arm_2_4:
test_pattern_match_get_value_Color_case_arm_2_4:
    ; r8 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; case_end_1:
test_pattern_match_get_value_Color_case_end_1:

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
test_pattern_match.get_value$Color_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
test_pattern_match.get_value$Color_store_addr.op:
test_pattern_match.get_value$Color_store_addr equ test_pattern_match.get_value$Color_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_pattern_match.main
test_pattern_match.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD ($F004), A     ; Virtual register 2 to memory
    ; store color, r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD ($F002), HL
    ; r4 = load color
    LD HL, ($F002)
    ; r5 = load color
    LD HL, ($F002)
    ; unknown op 39
    ; Smart patch 'store_u8' for test_pattern_match.get_value$Color_return_patch
    LD A, #00               ; NOP opcode
    LD (test_pattern_match.get_value$Color_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (test_pattern_match.get_value$Color_store_addr), HL
    ; unknown op 41
    ; Patch parameter c = 0
    LD A, 0               ; Parameter value
    LD (test_pattern_match.get_value$Color_param_c+1), A   ; Patch parameter immediate
    ; r6 = call test_pattern_match.get_value$Color
    ; Call to test_pattern_match.get_value$Color (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_pattern_match.get_value$Color
    ; store val, r6
    ; Register 6 already in A
    LD ($F006), A
    ; r7 = load val
    LD A, ($F006)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; ZX Spectrum ROM print
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
