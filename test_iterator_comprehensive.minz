// Comprehensive test of all iterator operations and combinations
// Testing each operation individually and in various combinations

fun main() -> void {
    let numbers: [u8; 5] = [1, 2, 3, 4, 5];
    
    @print("=== Test 1: Just forEach ===\n");
    numbers.forEach(print_u8);
    
    @print("\n=== Test 2: Just map ===\n");
    numbers.map(double).forEach(print_u8);  // Need forEach to see results
    
    @print("\n=== Test 3: Just filter ===\n");
    numbers.filter(is_even).forEach(print_u8);
    
    @print("\n=== Test 4: map then filter ===\n");
    numbers.map(double).filter(gt_5).forEach(print_u8);
    
    @print("\n=== Test 5: filter then map ===\n");
    numbers.filter(is_odd).map(triple).forEach(print_u8);
    
    @print("\n=== Test 6: Multiple filters ===\n");
    numbers.filter(gt_1).filter(lt_5).forEach(print_u8);
    
    @print("\n=== Test 7: Multiple maps ===\n");
    numbers.map(double).map(add_one).forEach(print_u8);
    
    @print("\n=== Test 8: Complex chain ===\n");
    numbers
        .map(double)           // 2,4,6,8,10
        .filter(gt_5)          // 6,8,10
        .map(add_one)          // 7,9,11
        .filter(is_odd)        // 7,9,11
        .forEach(print_u8);
        
    @print("\n=== Test 9: With iter() ===\n");
    numbers.iter().map(double).forEach(print_u8);
}

fun double(x: u8) -> u8 { return x * 2; }
fun triple(x: u8) -> u8 { return x * 3; }
fun add_one(x: u8) -> u8 { return x + 1; }

fun is_even(x: u8) -> bool { return (x & 1) == 0; }
fun is_odd(x: u8) -> bool { return (x & 1) == 1; }
fun gt_1(x: u8) -> bool { return x > 1; }
fun lt_5(x: u8) -> bool { return x < 5; }
fun gt_5(x: u8) -> bool { return x > 5; }

fun print_u8(x: u8) -> void {
    // Placeholder
}