; MinZ generated code
; Generated: 2025-08-24 16:00:50


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_pgo_simple.hot_function
simple_hot_function:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; [PGO: Place in uncontended memory 0x8000+]
    LD A, 42
    ; Register 1 already in A
    ; Register 1 already in A

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
...test_pgo_simple.hot_function_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
...test_pgo_simple.hot_function_store_addr.op:
...test_pgo_simple.hot_function_store_addr equ ...test_pgo_simple.hot_function_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_pgo_simple.cold_function
simple_cold_function:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; [PGO: Place in uncontended memory 0x8000+]
    LD A, 1
    LD B, A         ; Store to physical register B
    ; return r1
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_pgo_simple.main
pgo_simple_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; [PGO: Place in uncontended memory 0x8000+]
    ; Smart patch 'store_u8' for ...test_pgo_simple.hot_function_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_pgo_simple.hot_function_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_pgo_simple.hot_function_store_addr), HL
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    POP DE
    POP BC
    RET

; Runtime print helper functions
print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET


; Standard library routines
temp_result:
    DW 0           ; Temporary storage for function results


    END main


; Assembly peephole optimization: no patterns matched