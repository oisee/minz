; MinZ generated code
; Generated: 2025-08-16 22:35:33


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_add.add$u16$u16
...examples.simple_add.add$u16$u16:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.simple_add.add$u16$u16_param_a.op:
...examples.simple_add.add$u16$u16_param_a equ ...examples.simple_add.add$u16$u16_param_a.op + 1
    LD HL, #0000   ; SMC parameter a
    ; Register 3 already in HL
...examples.simple_add.add$u16$u16_param_b.op:
...examples.simple_add.add$u16$u16_param_b equ ...examples.simple_add.add$u16$u16_param_b.op + 1
    LD DE, #0000   ; SMC parameter b
    EX DE, HL      ; Move to HL for storage
    LD D, H
    LD E, L
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    EXX               ; Switch to shadow registers
    LD A, L         ; From shadow HL' (now active)
    EXX               ; Switch back to main registers

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
...examples.simple_add.add$u16$u16_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
...examples.simple_add.add$u16$u16_store_addr.op:
...examples.simple_add.add$u16$u16_store_addr equ ...examples.simple_add.add$u16$u16_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_add.main
...examples.simple_add.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    ; Register 2 already in A
    ; r3 = 20
    LD A, 20
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
    ; r5 = 20
    LD A, 20
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; unknown op 39
    ; Smart patch 'store_u8' for ...examples.simple_add.add$u16$u16_return_patch
    LD A, #00               ; NOP opcode
    LD (...examples.simple_add.add$u16$u16_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...examples.simple_add.add$u16$u16_store_addr), HL
    ; unknown op 41
    ; Patch parameter a = 0
    LD HL, 0              ; Parameter value
    LD (...examples.simple_add.add$u16$u16_param_a+1), HL  ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD HL, 0              ; Parameter value
    LD (...examples.simple_add.add$u16$u16_param_b+1), HL  ; Patch parameter immediate
    ; r6 = call ...examples.simple_add.add$u16$u16
    ; Call to ...examples.simple_add.add$u16$u16 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL ...examples.simple_add.add$u16$u16
    ; store x, r6
    LD ($F002), HL
    ; return
    RET

; Standard library routines

    END main
