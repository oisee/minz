; MinZ generated code
; Generated: 2025-08-01 21:44:36


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_add
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_add:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    ; Register 3 already in A
y$immOP:
    LD A, 0        ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    LD B, A         ; Store to physical register B
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_multiply
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_multiply:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    LD D, A         ; Store to physical register D
factor$immOP:
    LD A, 0        ; factor anchor (will be patched)
factor$imm0 EQU factor$immOP+1
    LD E, A         ; Store to physical register E
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex:
; TRUE SMC function with immediate anchors
a$immOP:
    LD A, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
    LD L, A         ; Store to physical register L
b$immOP:
    LD A, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r7 = call traditional_add
    ; Call to traditional_add (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_add
    LD A, L
    LD (x$imm0), A        ; Patch x
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD (y$imm0), A        ; Patch y
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_add
    ; store , r7
    LD ($F008), HL
c$immOP:
    LD A, 0        ; c anchor (will be patched)
c$imm0 EQU c$immOP+1
    LD B, A         ; Store to physical register B
    ; r11 = call traditional_multiply
    ; Call to traditional_multiply (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_multiply
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (x$imm0), A        ; Patch x
    LD A, B
    LD (factor$imm0), A        ; Patch factor
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_multiply
    ; store , r11
    LD ($F010), HL
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach$add_0
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach$add_0:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    LD C, A         ; Store to physical register C
y$immOP:
    LD A, 0        ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    LD C, A         ; Store to physical register C
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach$multiply_1
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach$multiply_1:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
factor$immOP:
    LD A, 0        ; factor anchor (will be patched)
factor$imm0 EQU factor$immOP+1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach:
; TRUE SMC function with immediate anchors
a$immOP:
    LD A, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
    LD B, A         ; Store to physical register B
b$immOP:
    LD A, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = call add
    ; Call to add (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL add
    ; store , r7
    LD ($F008), HL
c$immOP:
    LD A, 0        ; c anchor (will be patched)
c$imm0 EQU c$immOP+1
    ; Register 10 already in A
    ; r11 = call multiply
    ; Call to multiply (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    CALL multiply
    ; store , r11
    LD ($F010), HL
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.test_traditional_performance
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.test_traditional_performance:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r5 = call traditional_complex
    ; Call to traditional_complex (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F008)    ; Virtual register 4 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F006)     ; Virtual register 3 from memory
    LD (b$imm0), A        ; Patch b
    LD A, ($F008)     ; Virtual register 4 from memory
    LD (c$imm0), A        ; Patch c
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; store , r5
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD ($F002), HL
    ; r10 = call traditional_complex
    ; Call to traditional_complex (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex
    LD A, ($F00E)     ; Virtual register 7 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F010)     ; Virtual register 8 from memory
    LD (b$imm0), A        ; Patch b
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (c$imm0), A        ; Patch c
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex
    ; store , r10
    LD ($F00C), HL
    ; r15 = call traditional_complex
    ; Call to traditional_complex (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F01C)    ; Virtual register 14 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F01A)    ; Virtual register 13 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex
    LD A, ($F018)     ; Virtual register 12 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F01A)     ; Virtual register 13 from memory
    LD (b$imm0), A        ; Patch b
    LD A, ($F01C)     ; Virtual register 14 from memory
    LD (c$imm0), A        ; Patch c
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex
    ; store , r15
    LD ($F016), HL
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.test_lambda_performance
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.test_lambda_performance:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r5 = call lambda_approach
    ; Call to lambda_approach (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F008)    ; Virtual register 4 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F006)     ; Virtual register 3 from memory
    LD (b$imm0), A        ; Patch b
    LD A, ($F008)     ; Virtual register 4 from memory
    LD (c$imm0), A        ; Patch c
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach
    ; store , r5
    LD ($F002), HL
    ; r10 = call lambda_approach
    ; Call to lambda_approach (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach
    LD A, ($F00E)     ; Virtual register 7 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F010)     ; Virtual register 8 from memory
    LD (b$imm0), A        ; Patch b
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (c$imm0), A        ; Patch c
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach
    ; store , r10
    LD ($F00C), HL
    ; r15 = call lambda_approach
    ; Call to lambda_approach (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F01C)    ; Virtual register 14 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F01A)    ; Virtual register 13 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach
    LD A, ($F018)     ; Virtual register 12 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F01A)     ; Virtual register 13 from memory
    LD (b$imm0), A        ; Patch b
    LD A, ($F01C)     ; Virtual register 14 from memory
    LD (c$imm0), A        ; Patch c
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach
    ; store , r15
    LD ($F016), HL
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.main
.Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r2 = call test_traditional_performance
    ; Call to test_traditional_performance (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.test_traditional_performance
    ; store , r2
    LD ($F002), HL
    ; r4 = call test_lambda_performance
    ; Call to test_lambda_performance (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.test_lambda_performance
    ; store , r4
    LD ($F006), HL
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_add.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_add.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_multiply.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW factor$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_multiply.factor
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW c$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.traditional_complex.c
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach$add_0.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach$add_0.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach$multiply_1.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW factor$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach$multiply_1.factor
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW c$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_vs_traditional_performance.lambda_approach.c
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
