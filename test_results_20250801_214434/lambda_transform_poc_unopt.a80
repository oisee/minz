; MinZ generated code
; Generated: 2025-08-01 21:44:36


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_local_lambda$add5_0
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_local_lambda$add5_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_local_lambda$add5_0_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r2 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; r3 = r1 + r2
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_local_lambda
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_local_lambda:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD D, A         ; Store to physical register D
    ; r3 = call add5
    ; Call to add5 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL add5
    ; store , r3
    LD ($F002), HL
    ; r5 = 20
    LD A, 20
    LD L, A         ; Store to physical register L
    ; r6 = call add5
    ; Call to add5 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL add5
    ; store , r6
    LD ($F008), HL
    ; r7 = load a
    LD HL, ($F002)
    ; r8 = load b
    LD HL, ($F008)
    ; r9 = r7 + r8
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 9 already in HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse$double_1
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse$double_1:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse$double_1_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; Register 1 already in HL
    ; r2 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r3 = r1 * r2
    ; 8-bit multiplication
    LD A, L
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse$triple_2
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse$triple_2:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse$triple_2_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; Register 1 already in HL
    ; r2 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r3 = r1 * r2
    ; 8-bit multiplication
    LD A, L
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_1
.mul_loop_1:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_1
.mul_done_1:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = call double
    ; Call to double (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    CALL double
    ; store , r3
    LD ($F002), HL
    ; r5 = 5
    LD A, 5
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = call triple
    ; Call to triple (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00A)    ; Virtual register 5 from memory
    PUSH HL       ; Argument 0
    CALL triple
    ; store , r6
    LD ($F008), HL
    ; r8 = 10
    LD A, 10
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = call double
    ; Call to double (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Argument 0
    CALL double
    ; store , r9
    LD ($F00E), HL
    ; r10 = load a
    LD HL, ($F002)
    ; Register 10 already in HL
    ; r11 = load b
    LD HL, ($F008)
    ; r12 = r10 + r11
    ; Register 10 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD D, H
    LD E, L
    ; r13 = load c
    LD HL, ($F00E)
    ; Register 13 already in HL
    ; r14 = r12 + r13
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ; Register 13 already in HL
    ADD HL, DE
    ; Register 14 already in HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_no_capture$good_3
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_no_capture$good_3:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_no_capture$good_3_param_y:
    LD HL, #0000   ; SMC parameter y (u8->u16)
    ; Register 1 already in HL
    ; r2 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r3 = r1 + r2
    ; Register 1 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_no_capture
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_no_capture:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r3 = load x
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r4 = call good
    ; Call to good (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL good
    ; Register 4 already in HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_poc.main
.Users.alice.dev.minz-ts.examples.lambda_transform_poc.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = call test_local_lambda
    ; Call to test_local_lambda (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_local_lambda
    ; store , r2
    LD ($F002), HL
    ; r4 = call test_reuse
    ; Call to test_reuse (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_reuse
    LD ($F008), HL    ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD ($F006), HL
    ; r6 = call test_no_capture
    ; Call to test_no_capture (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_transform_poc.test_no_capture
    ; store , r6
    LD ($F00A), HL
    ; r7 = load r1
    LD HL, ($F002)
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
