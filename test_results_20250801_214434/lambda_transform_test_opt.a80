; MinZ generated code
; Generated: 2025-08-01 21:44:36


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda$add_0
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda$add_0:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    ; Register 2 already in A
y$immOP:
    LD A, 0        ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    LD B, A         ; Store to physical register B
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r3 = call add
    ; Call to add (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F002)    ; Virtual register 1 from memory
    PUSH HL       ; Argument 0
    CALL add
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_reference$double_1
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_reference$double_1:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    LD E, A         ; Store to physical register E
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_reference
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_reference:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r2 = call f
    ; Call to f (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F002)    ; Virtual register 1 from memory
    PUSH HL       ; Argument 0
    CALL f
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations$add5_2
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations$add5_2:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    LD L, A         ; Store to physical register L
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations$mul2_3
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations$mul2_3:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r3 = call add5
    ; Call to add5 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    CALL add5
    ; store , r3
    LD ($F002), HL
    ; r6 = call mul2
    ; Call to mul2 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00A)    ; Virtual register 5 from memory
    PUSH HL       ; Argument 0
    CALL mul2
    ; store , r6
    LD ($F008), HL
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_in_expression$increment_4
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_in_expression$increment_4:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_in_expression
.Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_in_expression:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r2 = call increment
    ; Call to increment (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F002)    ; Virtual register 1 from memory
    PUSH HL       ; Argument 0
    CALL increment
    ; r4 = call increment
    ; Call to increment (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 0
    CALL increment
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.main
.Users.alice.dev.minz-ts.examples.lambda_transform_test.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r2 = call test_basic_lambda
    ; Call to test_basic_lambda (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda
    ; store , r2
    LD ($F002), HL
    ; r4 = call test_lambda_reference
    ; Call to test_lambda_reference (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_reference
    ; store , r4
    LD ($F006), HL
    ; r6 = call test_lambda_with_operations
    ; Call to test_lambda_with_operations (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations
    ; store , r6
    LD ($F00A), HL
    ; r8 = call test_lambda_in_expression
    ; Call to test_lambda_in_expression (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_in_expression
    ; store , r8
    LD ($F00E), HL
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda$add_0.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda$add_0.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_reference$double_1.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations$add5_2.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations$mul2_3.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_in_expression$increment_4.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
