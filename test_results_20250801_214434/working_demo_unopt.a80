; MinZ generated code
; Generated: 2025-08-01 21:44:41


; Data section
    ORG $F000

.Users.alice.dev.minz-ts.examples.working_demo.counter:
    DB 0
.Users.alice.dev.minz-ts.examples.working_demo.buffer:
    DS 16

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.init
.Users.alice.dev.minz-ts.examples.working_demo.init:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 0
    LD A, 0
    ; Register 1 already in A
    ; store .Users.alice.dev.minz-ts.examples.working_demo.counter, r1
    LD ($F000), HL
    ; r3 = 0
    LD A, 0
    LD B, A         ; Store to physical register B
    ; store , r3
    LD A, B
    LD ($F004), A
    ; loop_1:
loop_1:
    ; r4 = load i
    LD A, ($F004)
    LD D, A         ; Store to physical register D
    ; r5 = 16
    LD A, 16
    LD E, A         ; Store to physical register E
    ; r6 = r4 < r5
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r6, end_loop_2
    LD A, H
    OR A
    JP Z, end_loop_2
    ; r7 = load i
    LD A, ($F004)
    LD L, A         ; Store to physical register L
    ; r8 = addr(.Users.alice.dev.minz-ts.examples.working_demo.buffer)
    LD HL, .Users.alice.dev.minz-ts.examples.working_demo.buffer
    ; Register 8 already in HL
    ; r9 = load i
    LD A, ($F004)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Calculate array element address
    ; Register 8 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD D, H
    LD E, L
    ; Store to array[index] (u8)
    LD H, D
    LD L, E
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r11 = load i
    LD A, ($F004)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r12 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r13 = r11 + r12
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r13
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD ($F004), A
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.process
.Users.alice.dev.minz-ts.examples.working_demo.process:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; loop_3:
loop_3:
    ; r3 = load i
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r4 = 16
    LD A, 16
    LD L, A         ; Store to HL (low byte)
    ; r5 = r3 < r4
    LD D, H
    LD E, L
    ; Register 4 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r5, end_loop_4
    LD A, H
    OR A
    JP Z, end_loop_4
    ; r7 = addr(.Users.alice.dev.minz-ts.examples.working_demo.buffer)
    LD HL, .Users.alice.dev.minz-ts.examples.working_demo.buffer
    ; r8 = load i
    LD A, ($F002)
    LD ($F010), A     ; Virtual register 8 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F010)     ; Virtual register 8 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; store , r9
    LD A, H
    LD ($F00C), A
    ; r10 = load val
    LD A, ($F00C)
    LD H, A         ; Store to physical register H
    ; r11 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r12 = r10 + r11
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 12 already in HL
    ; r13 = addr(.Users.alice.dev.minz-ts.examples.working_demo.buffer)
    LD HL, .Users.alice.dev.minz-ts.examples.working_demo.buffer
    LD B, H
    LD C, L
    ; r14 = load i
    LD A, ($F002)
    LD L, A         ; Store to HL (low byte)
    ; Calculate array element address
    LD H, B
    LD L, C
    LD D, H
    LD E, L
    ; Register 14 already in HL
    ADD HL, DE
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; Store to array[index] (u8)
    LD HL, ($F01E)    ; Virtual register 15 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r16 = load i
    LD A, ($F002)
    LD ($F020), A     ; Virtual register 16 to memory
    ; r17 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r18 = r16 + r17
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r18
    LD A, L
    LD ($F002), A
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r19 = load .Users.alice.dev.minz-ts.examples.working_demo.counter
    LD HL, ($F000)
    ; Register 19 already in HL
    ; r20 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r21 = r19 + r20
    ; Register 19 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; store .Users.alice.dev.minz-ts.examples.working_demo.counter, r21
    LD ($F000), HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.is_done
.Users.alice.dev.minz-ts.examples.working_demo.is_done:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = load .Users.alice.dev.minz-ts.examples.working_demo.counter
    LD HL, ($F000)
    ; Register 1 already in HL
    ; r2 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; r3 = r1 >= r2
    ; Register 1 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP P, .L5
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; return r3
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.main
.Users.alice.dev.minz-ts.examples.working_demo.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call init
    ; Call to init (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.init
    LD ($F002), HL    ; Virtual register 1 to memory
    ; loop_5:
loop_5:
    ; r2 = call is_done
    ; Call to is_done (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.is_done
    ; r3 = ~r2
    LD A, H
    CPL           ; Complement A
    LD L, A         ; Store to physical register L
    ; jump_if_not r3, end_loop_6
    LD A, L
    OR A
    JP Z, end_loop_6
    ; r4 = call process
    ; Call to process (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.process
    ; Register 4 already in HL
    ; jump loop_5
    JP loop_5
    ; end_loop_6:
end_loop_6:
    ; r5 = addr(.Users.alice.dev.minz-ts.examples.working_demo.buffer)
    LD HL, .Users.alice.dev.minz-ts.examples.working_demo.buffer
    ; r6 = 0
    LD A, 0
    LD ($F00C), A     ; Virtual register 6 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F00C)     ; Virtual register 6 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r8 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; r9 = r7 == r8
    LD D, H
    LD E, L
    ; Register 8 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; jump_if_not r9, else_7
    LD A, H
    OR A
    JP Z, else_7
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; end_if_8:
end_if_8:
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
