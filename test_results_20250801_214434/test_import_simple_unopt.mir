; MinZ Intermediate Representation (MIR)
; Module: main

Function zx.screen.pixel_addr(x: u8, y: u8) -> u16
  @smc
  Locals:
    r3 = y_high: u8
    r7 = y_mid: u8
    r13 = y_low: u8
    r17 = addr: u16
  Instructions:
      0: LOAD_PARAM
      1: r5 = 192
      2: r6 = r4 & r5
      3: store , r6
      4: LOAD_PARAM
      5: r9 = 56
      6: r10 = r8 & r9
      7: r11 = 3
      8: SHR
      9: store , r12
     10: LOAD_PARAM
     11: r15 = 7
     12: r16 = r14 & r15
     13: store , r16
     14: r18 = 16384
     15: r19 = load y_low
     16: r20 = 8
     17: SHL
     18: r22 = r18 | r21
     19: r23 = load y_mid
     20: r24 = 5
     21: SHL
     22: r26 = r22 | r25
     23: r27 = load y_high
     24: r28 = 5
     25: SHL
     26: r30 = r26 | r29
     27: LOAD_PARAM
     28: r32 = 3
     29: SHR
     30: r34 = r30 | r33
     31: store , r34
     32: r35 = load addr
     33: return r35

Function zx.screen.attr_addr(x: u8, y: u8) -> u16
  @smc
  Instructions:
      0: r3 = 22528
      1: LOAD_PARAM
      2: r5 = 32
      3: r6 = r4 * r5
      4: r7 = r3 + r6
      5: LOAD_PARAM
      6: r9 = r7 + r8
      7: return r9

Function zx.screen.draw_hline(x: u8, y: u8, len: u8) -> void
  @smc
  Locals:
    r4 = i: u8
  Instructions:
      0: r5 = 0
      1: store , r5
      2: loop_3:
      3: r6 = load i
      4: LOAD_PARAM
      5: r8 = r6 < r7
      6: jump_if_not r8, end_loop_4
      7: LOAD_PARAM
      8: r10 = load i
      9: r11 = r9 + r10
     10: LOAD_PARAM
     11: r13 = call zx.screen.set_pixel
     12: r14 = load i
     13: r15 = 1
     14: r16 = r14 + r15
     15: store i, r16
     16: jump loop_3
     17: end_loop_4:
     18: return

Function zx.screen.draw_vline(x: u8, y: u8, len: u8) -> void
  @smc
  Locals:
    r4 = i: u8
  Instructions:
      0: r5 = 0
      1: store , r5
      2: loop_5:
      3: r6 = load i
      4: LOAD_PARAM
      5: r8 = r6 < r7
      6: jump_if_not r8, end_loop_6
      7: LOAD_PARAM
      8: LOAD_PARAM
      9: r11 = load i
     10: r12 = r10 + r11
     11: r13 = call zx.screen.set_pixel
     12: r14 = load i
     13: r15 = 1
     14: r16 = r14 + r15
     15: store i, r16
     16: jump loop_5
     17: end_loop_6:
     18: return

Function zx.screen.draw_rect(x: u8, y: u8, width: u8, height: u8) -> void
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: LOAD_PARAM
      3: r8 = call zx.screen.draw_hline
      4: LOAD_PARAM
      5: LOAD_PARAM
      6: LOAD_PARAM
      7: r12 = r10 + r11
      8: r13 = 1
      9: r14 = r12 - r13
     10: LOAD_PARAM
     11: r16 = call zx.screen.draw_hline
     12: LOAD_PARAM
     13: LOAD_PARAM
     14: LOAD_PARAM
     15: r20 = call zx.screen.draw_vline
     16: LOAD_PARAM
     17: LOAD_PARAM
     18: r23 = r21 + r22
     19: r24 = 1
     20: r25 = r23 - r24
     21: LOAD_PARAM
     22: LOAD_PARAM
     23: r28 = call zx.screen.draw_vline
     24: return

Function zx.screen.get_cursor() -> u8
  @smc
  Instructions:
      0: return

Function zx.screen.print_string(s: *u8) -> void
  @smc
  Locals:
    r2 = ptr: u16
    r4 = ch: u16
  Instructions:
      0: LOAD_PARAM
      1: store , r3
      2: r5 = load ptr
      3: UNKNOWN_OP_66
      4: store , r6
      5: loop_11:
      6: r7 = load ch
      7: r8 = 0
      8: r9 = r7 != r8
      9: jump_if_not r9, end_loop_12
     10: r10 = load ch
     11: r11 = call zx.screen.print_char
     12: r12 = load ptr
     13: r13 = 1
     14: r14 = r12 + r13
     15: store ptr, r14
     16: r15 = load ptr
     17: UNKNOWN_OP_66
     18: store ch, r16
     19: jump loop_11
     20: end_loop_12:
     21: return

Function zx.screen.print_at(x: u8, y: u8, s: *u8) -> void
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r6 = call zx.screen.set_cursor
      3: LOAD_PARAM
      4: r8 = call zx.screen.print_string
      5: return

Function zx.screen.print_hex16(n: u16) -> void
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 8
      2: SHR
      3: r5 = call zx.screen.print_hex8
      4: LOAD_PARAM
      5: r7 = call zx.screen.print_hex8
      6: return

Function .Users.alice.dev.minz-ts.examples.test_import_simple.main() -> void
  @smc
  Instructions:
      0: r1 = 10
      1: r2 = 10
      2: r3 = 50
      3: r4 = 30
      4: r5 = call zx.screen.draw_rect
      5: return

