; MinZ generated code
; Generated: 2025-08-01 21:44:38


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.tail_sum.sum_tail
.Users.alice.dev.minz-ts.examples.tail_sum.sum_tail:
; TRUE SMC function with immediate anchors
n$immOP:
    LD HL, 0       ; n anchor (will be patched)
n$imm0 EQU n$immOP+1
    ; Register 3 already in HL
    ; Tail recursion loop start
.Users.alice.dev.minz-ts.examples.tail_sum.sum_tail_tail_loop:
    ; r4 = 0
    LD A, 0
    ; Register 4 already in A
    ; r5 = r3 == r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD D, H
    LD E, L
    ; jump_if_not r5, else_1
    LD A, E
    OR A
    JP Z, else_1
acc$immOP:
    LD HL, 0       ; acc anchor (will be patched)
acc$imm0 EQU acc$immOP+1
    LD B, H
    LD C, L
    ; return r6
    LD H, B
    LD L, C
    RET
    ; else_1:
else_1:
    LD HL, (n$imm0)   ; Reuse from anchor
    LD HL, (acc$imm0)   ; Reuse from anchor
    LD HL, (n$imm0)   ; Reuse from anchor
    ; Tail recursion optimized to loop
    JP .Users.alice.dev.minz-ts.examples.tail_sum.sum_tail_tail_loop
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.tail_sum.main
.Users.alice.dev.minz-ts.examples.tail_sum.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
    ; r4 = call sum_tail
    ; Call to sum_tail (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.tail_sum.sum_tail
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD (n$imm0), HL       ; Patch n (atomic)
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD (acc$imm0), HL       ; Patch acc (atomic)
    CALL .Users.alice.dev.minz-ts.examples.tail_sum.sum_tail
    ; store , r4
    LD ($F002), HL
    ; return
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW n$imm0           ; .Users.alice.dev.minz-ts.examples.tail_sum.sum_tail.n
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW acc$imm0           ; .Users.alice.dev.minz-ts.examples.tail_sum.sum_tail.acc
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
