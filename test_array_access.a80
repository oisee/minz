; MinZ generated code
; Generated: 2025-07-30 11:01:43


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_array_access.test_array
examples.test_array_access.test_array:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load arr
    LD HL, ($F002)
    ; r4 = 0
    LD A, 0
    LD ($F008), A     ; Virtual register 4 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F008)     ; Virtual register 4 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD C, A         ; Store to physical register C
    ; store , r5
    LD ($F004), HL
    ; r7 = load arr
    LD HL, ($F002)
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; Load array element (u8)
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; store , r9
    LD ($F00C), HL
    ; r11 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store , r11
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD ($F014), A
    ; r13 = load arr
    LD HL, ($F002)
    ; r14 = load i
    LD A, ($F014)
    LD E, A         ; Store to physical register E
    ; Load array element (u8)
    PUSH HL
    LD A, E
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD E, A         ; Store to physical register E
    ; store , r15
    LD ($F018), HL
    ; r16 = load z
    LD HL, ($F018)
    ; return r16
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_array_access.main
examples.test_array_access.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = call test_array
    ; Call to test_array (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_array
    ; store , r2
    LD ($F002), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
