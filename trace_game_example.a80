; MinZ generated code
; Generated: 2025-08-16 20:53:50


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: trace_game_example.move_player$p_Player$u8$u8
trace_game_example.move_player$p_Player$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; TSMC reference parameter player
player$immOP:
    LD HL, 0000      ; TSMC ref address for player
player$imm0 EQU player$immOP+1
    ; Register 4 already in HL
    ; Load field x (offset 0)
    ; Register 4 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
trace_game_example.move_player$p_Player$u8$u8_param_dx.op:
trace_game_example.move_player$p_Player$u8$u8_param_dx equ trace_game_example.move_player$p_Player$u8$u8_param_dx.op + 1
    LD B, #00      ; Parameter dx (gets patched)
    LD A, B
    LD B, A         ; Store to physical register B
    ; r7 = r5 + r6
    LD D, H
    LD E, L
    ADD HL, DE
    LD HL, (player$imm0) ; Reload TSMC ref address
    LD D, H
    LD E, L
    ; Store to field x (offset 0)
    LD H, D
    LD L, E
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    LD HL, (player$imm0) ; Reload TSMC ref address
    LD B, H
    LD C, L
    ; Load field y (offset 1)
    LD H, B
    LD L, C
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
trace_game_example.move_player$p_Player$u8$u8_param_dy.op:
trace_game_example.move_player$p_Player$u8$u8_param_dy equ trace_game_example.move_player$p_Player$u8$u8_param_dy.op + 1
    LD C, #00      ; Parameter dy (gets patched)
    LD A, C
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r12 = r10 + r11
    LD D, H
    LD E, L
    ADD HL, DE
    LD HL, (player$imm0) ; Reload TSMC ref address
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; Store to field y (offset 1)
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: trace_game_example.check_collision$u8$u8
trace_game_example.check_collision$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
trace_game_example.check_collision$u8$u8_param_x.op:
trace_game_example.check_collision$u8$u8_param_x equ trace_game_example.check_collision$u8$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = 31
    LD A, 31
    LD H, A         ; Store to physical register H
    ; r5 = r3 > r4
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, trace_game_example_check_collision_u8_u8_gt_check_zero_0
    LD HL, 0       ; False (negative)
    JP trace_game_example_check_collision_u8_u8_gt_done_0
trace_game_example_check_collision_u8_u8_gt_check_zero_0:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, trace_game_example_check_collision_u8_u8_gt_false_0
    LD HL, 1       ; True (positive and non-zero)
    JP trace_game_example_check_collision_u8_u8_gt_done_0
trace_game_example_check_collision_u8_u8_gt_false_0:
    LD HL, 0       ; False (zero)
trace_game_example_check_collision_u8_u8_gt_done_0:
trace_game_example.check_collision$u8$u8_param_y.op:
trace_game_example.check_collision$u8$u8_param_y equ trace_game_example.check_collision$u8$u8_param_y.op + 1
    LD B, #00      ; Parameter y (gets patched)
    LD A, B
    LD H, A         ; Store to physical register H
    ; r7 = 23
    LD A, 23
    LD L, A         ; Store to physical register L
    ; r8 = r6 > r7
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, trace_game_example_check_collision_u8_u8_gt_check_zero_1
    LD HL, 0       ; False (negative)
    JP trace_game_example_check_collision_u8_u8_gt_done_1
trace_game_example_check_collision_u8_u8_gt_check_zero_1:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, trace_game_example_check_collision_u8_u8_gt_false_1
    LD HL, 1       ; True (positive and non-zero)
    JP trace_game_example_check_collision_u8_u8_gt_done_1
trace_game_example_check_collision_u8_u8_gt_false_1:
    LD HL, 0       ; False (zero)
trace_game_example_check_collision_u8_u8_gt_done_1:
    LD ($F010), HL    ; Virtual register 8 to memory
    ; unknown op 61
    LD A, L
    OR A           ; Test if zero
    JR NZ, lor_true_2      ; Skip if first operand is true
    LD A, ($F010)     ; Virtual register 8 from memory
    OR A           ; Test if zero
    JR NZ, lor_true_2      ; Skip if second operand is true
    XOR A          ; Result is false
    JR lor_end_3
lor_true_2:
    LD A, 1        ; Result is true (1)
lor_end_3:
    LD L, A         ; Store to physical register L
    ; jump_if_not r9, else_1
    LD A, L
    OR A
    JP Z, trace_game_example_check_collision_u8_u8_else_1
    ; r10 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; return r10
    ; Register 10 already in HL
    RET
    ; jump end_if_2
    JP trace_game_example_check_collision_u8_u8_end_if_2
    ; else_1:
trace_game_example_check_collision_u8_u8_else_1:
    ; end_if_2:
trace_game_example_check_collision_u8_u8_end_if_2:
    ; r11 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; return r11
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: trace_game_example.main
trace_game_example.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Player
    LD HL, -3
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r3 = 10
    LD A, 10
    LD ($F006), A     ; Virtual register 3 to memory
    ; Store to Player.x
    PUSH HL
    LD HL, ($F006)    ; Virtual register 3 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r4 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; Store to Player.y
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r5 = 100
    LD A, 100
    LD L, A         ; Store to HL (low byte)
    ; Store to Player.health
    LD DE, 2
    ADD HL, DE
    PUSH HL
    ; Register 5 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store player, r2
    LD ($F002), HL
    ; r6 = load player
    LD HL, ($F002)
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; r7 = &r6
    ; Address-of operation for register r6
    LD HL, $F00C  ; Variable address
    ; r8 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r9 = 0
    LD A, 0
    LD ($F012), A     ; Virtual register 9 to memory
    ; r10 = load player
    LD HL, ($F002)
    ; r11 = &r10
    ; Address-of operation for register r10
    LD HL, $F014  ; Variable address
    ; r12 = 1
    LD A, 1
    LD ($F018), A     ; Virtual register 12 to memory
    ; r13 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r14 = call trace_game_example.move_player$p_Player$u8$u8
    ; Call to trace_game_example.move_player$p_Player$u8$u8 (args: 3)
    ; Found function, UsesTrueSMC=false
    CALL trace_game_example.move_player$p_Player$u8$u8
    ; r16 = load player
    LD HL, ($F002)
    LD ($F020), HL    ; Virtual register 16 to memory
    ; Load field x (offset 0)
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r18 = load player
    LD HL, ($F002)
    ; Load field y (offset 1)
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r20 = load player
    LD HL, ($F002)
    ; Load field x (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r22 = load player
    LD HL, ($F002)
    ; Register 22 already in HL
    ; Load field y (offset 1)
    ; Register 22 already in HL
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r24 = call trace_game_example.check_collision$u8$u8
    ; Call to trace_game_example.check_collision$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL trace_game_example.check_collision$u8$u8
    ; store collision, r24
    LD ($F01E), HL
    ; return
    RET

; Standard library routines
cls:
    LD HL, $4000       ; Screen start
    LD DE, $4001
    LD BC, $17FF       ; Screen size - 1
    LD (HL), 0
    LDIR               ; Clear screen
    LD HL, $5800       ; Attribute start
    LD DE, $5801
    LD BC, $02FF       ; Attribute size - 1
    LD (HL), $38       ; White ink on black paper
    LDIR               ; Clear attributes
    RET

print_newline:
    LD A, 13           ; CR
    RST 16
    RET

print_hex_u8:
    PUSH AF            ; Save value
    RRA
    RRA
    RRA
    RRA                ; High nibble to low
    CALL print_hex_nibble
    POP AF             ; Restore value
    ; Fall through to print low nibble
print_hex_nibble:
    AND $0F            ; Isolate low nibble
    ADD A, '0'         ; Convert to ASCII
    CP '9' + 1
    JR C, print_hex_digit
    ADD A, 'A' - '0' - 10  ; Adjust for A-F
print_hex_digit:
    RST 16             ; ZX Spectrum print
    RET

zx_set_border:
    POP HL             ; Return address
    POP BC             ; Get color argument
    PUSH HL            ; Restore return address
    LD A, C            ; Color to A
    AND 7              ; Mask to 0-7
    OUT (254), A       ; Set border
    RET

zx_clear_screen:
    JP cls             ; Use standard cls

zx_set_pixel:
    ; TODO: Implement pixel setting
    ; For now, just return
    RET

zx_set_ink:
    ; TODO: Implement ink color setting
    RET

zx_set_paper:
    ; TODO: Implement paper color setting
    RET

abs:
    POP HL             ; Return address
    POP BC             ; Get argument
    PUSH HL            ; Restore return address
    LD A, C            ; Value to A
    OR A               ; Test sign
    JP P, abs_done     ; If positive, done
    NEG                ; Negate if negative
abs_done:
    RET

min:
    POP HL             ; Return address
    POP BC             ; First argument
    POP DE             ; Second argument
    PUSH HL            ; Restore return address
    LD A, C            ; First value
    CP E               ; Compare with second
    JR C, min_done     ; If first < second, keep first
    LD A, E            ; Otherwise use second
min_done:
    RET

max:
    POP HL             ; Return address
    POP BC             ; First argument
    POP DE             ; Second argument
    PUSH HL            ; Restore return address
    LD A, C            ; First value
    CP E               ; Compare with second
    JR NC, max_done    ; If first >= second, keep first
    LD A, E            ; Otherwise use second
max_done:
    RET


    END main
