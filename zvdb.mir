; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   .Users.alice.dev.zvdb-minz.zvdb.vectors: [16].Users.alice.dev.zvdb-minz.zvdb.Vector256
;   .Users.alice.dev.zvdb-minz.zvdb.count: u8
;   .Users.alice.dev.zvdb-minz.zvdb.lut: [256]u8

Function .Users.alice.dev.zvdb-minz.zvdb.init_lut() -> void
  @smc
  Locals:
    r5 = val: u8
    r7 = bits: u8
  Instructions:
      0: r2 = 256
      1: r3 = r1 ; Initialize loop variable i
      2: for_loop_1:
      3: r4 = r3 < r2 ; Check i < end
      4: jump_if_not r4, for_end_2
      5: r10 = 8
      6: r11 = r9 ; Initialize loop variable b
      7: for_loop_3:
      8: r12 = r11 < r10 ; Check b < end
      9: jump_if_not r12, for_end_4
     10: TEST
     11: jump_if_not r19, else_5
     12: jump end_if_6
     13: else_5:
     14: end_if_6:
     15: INC
     16: jump for_loop_3
     17: for_end_4:
     18: r25 = addr(.Users.alice.dev.zvdb-minz.zvdb.lut)
     19: STORE_PTR ; Store to array[index] (u8)
     20: INC
     21: jump for_loop_1
     22: for_end_2:
     23: return

Function .Users.alice.dev.zvdb-minz.zvdb.popcount$u8(val: u8) -> u8
  @smc
  Instructions:
      0: r2 = addr(.Users.alice.dev.zvdb-minz.zvdb.lut)
      1: TRUE_SMC_LOAD ; Load from anchor val$imm0
      2: LOAD_INDEX ; Load array element (u8)
      3: return r4

Function .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8(idx1: u8, idx2: u8) -> u16
  @smc
  Locals:
    r3 = dist: u16
    r9 = xor_val: u8
    r23 = pc: u8
  Instructions:
      0: r6 = 32
      1: r7 = r5 ; Initialize loop variable i
      2: for_loop_7:
      3: r8 = r7 < r6 ; Check i < end
      4: jump_if_not r8, for_end_8
      5: r10 = addr(.Users.alice.dev.zvdb-minz.zvdb.vectors)
      6: TRUE_SMC_LOAD ; Load from anchor idx1$imm0
      7: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb.Vector256)
      8: LOAD_INDEX ; Load array element (u8)
      9: r16 = addr(.Users.alice.dev.zvdb-minz.zvdb.vectors)
     10: TRUE_SMC_LOAD ; Load from anchor idx2$imm0
     11: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb.Vector256)
     12: LOAD_INDEX ; Load array element (u8)
     13: r1 = addr(.Users.alice.dev.zvdb-minz.zvdb.lut) ; Inlined from .Users.alice.dev.zvdb-minz.zvdb.popcount$u8
     14: TRUE_SMC_LOAD ; Load from anchor idx1$imm0
     15: LOAD_INDEX ; Inlined: Load array element (u8)
     16: r26 = r3 ; Inlined return value
     17: r7 = r7 + r30 ; Increment i
     18: r30 = 1
     19: jump for_loop_7
     20: for_end_8:
     21: r31 = load dist
     22: return r31

Function .Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8(query: .Users.alice.dev.zvdb-minz.zvdb.Vector256, idx: u8) -> u16
  @smc
  Locals:
    r3 = dist: u16
    r9 = xor_val: u8
    r21 = pc: u8
  Instructions:
      0: r6 = 32
      1: r7 = r5 ; Initialize loop variable i
      2: for_loop_9:
      3: r8 = r7 < r6 ; Check i < end
      4: jump_if_not r8, for_end_10
      5: TRUE_SMC_LOAD ; Load from anchor query$imm0
      6: LOAD_INDEX ; Load array element (u8)
      7: r14 = addr(.Users.alice.dev.zvdb-minz.zvdb.vectors)
      8: TRUE_SMC_LOAD ; Load from anchor idx$imm0
      9: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb.Vector256)
     10: LOAD_INDEX ; Load array element (u8)
     11: r1 = addr(.Users.alice.dev.zvdb-minz.zvdb.lut) ; Inlined from .Users.alice.dev.zvdb-minz.zvdb.popcount$u8
     12: TRUE_SMC_LOAD ; Load from anchor query$imm0
     13: LOAD_INDEX ; Inlined: Load array element (u8)
     14: r24 = r3 ; Inlined return value
     15: r7 = r7 + r28 ; Increment i
     16: r28 = 1
     17: jump for_loop_9
     18: for_end_10:
     19: r29 = load dist
     20: return r29

Function .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256(vec: .Users.alice.dev.zvdb-minz.zvdb.Vector256) -> u8
  @smc
  Locals:
    r6 = idx: u8
  Instructions:
      0: r2 = load .Users.alice.dev.zvdb-minz.zvdb.count
      1: r3 = 16
      2: r4 = r2 >= r3
      3: jump_if_not r4, else_11
      4: r5 = 255
      5: return r5
      6: else_11:
      7: r9 = 32
      8: r10 = r8 ; Initialize loop variable i
      9: for_loop_13:
     10: r11 = r10 < r9 ; Check i < end
     11: jump_if_not r11, for_end_14
     12: TRUE_SMC_LOAD ; Load from anchor vec$imm0
     13: LOAD_INDEX ; Load array element (u8)
     14: r16 = addr(.Users.alice.dev.zvdb-minz.zvdb.vectors)
     15: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb.Vector256)
     16: STORE_PTR ; Store to array[index] (u8)
     17: INC
     18: jump for_loop_13
     19: for_end_14:
     20: r26 = load idx
     21: return r26

Function .Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256(query: .Users.alice.dev.zvdb-minz.zvdb.Vector256) -> .Users.alice.dev.zvdb-minz.zvdb.SearchResult
  @smc
  Locals:
    r2 = result: .Users.alice.dev.zvdb-minz.zvdb.SearchResult
    r14 = dist: u16
    r28 = doubled: u16
  Instructions:
      0: r11 = load .Users.alice.dev.zvdb-minz.zvdb.count
      1: r12 = r10 ; Initialize loop variable i
      2: for_loop_15:
      3: r13 = r12 < r11 ; Check i < end
      4: jump_if_not r13, for_end_16
      5: TRUE_SMC_LOAD ; Load from anchor query$imm0
      6: TRUE_SMC_LOAD ; Load from anchor query$imm0
      7: r19 = call .Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8
      8: r20 = load dist
      9: r21 = load result
     10: LOAD_FIELD ; Load field hamming (offset 1)
     11: r23 = r20 < r22
     12: jump_if_not r23, else_17
     13: jump end_if_18
     14: else_17:
     15: end_if_18:
     16: INC
     17: jump for_loop_15
     18: for_end_16:
     19: r37 = load result
     20: return r37

Function .Users.alice.dev.zvdb-minz.zvdb.create_tests() -> void
  @smc
  Locals:
    r1 = vec: .Users.alice.dev.zvdb-minz.zvdb.Vector256
  Instructions:
      0: r3 = 32
      1: r4 = r2 ; Initialize loop variable i
      2: for_loop_19:
      3: r5 = r4 < r3 ; Check i < end
      4: jump_if_not r5, for_end_20
      5: TEST
      6: jump_if_not r10, else_21
      7: STORE_PTR ; Store to array[index] (u8)
      8: jump end_if_22
      9: else_21:
     10: STORE_PTR ; Store to array[index] (u8)
     11: end_if_22:
     12: INC
     13: jump for_loop_19
     14: for_end_20:
     15: r24 = call .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
     16: r26 = 32
     17: r27 = r25 ; Initialize loop variable i
     18: for_loop_23:
     19: r28 = r27 < r26 ; Check i < end
     20: jump_if_not r28, for_end_24
     21: STORE_PTR ; Store to array[index] (u8)
     22: INC
     23: jump for_loop_23
     24: for_end_24:
     25: r37 = call .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
     26: r39 = 32
     27: r40 = r38 ; Initialize loop variable i
     28: for_loop_25:
     29: r41 = r40 < r39 ; Check i < end
     30: jump_if_not r41, for_end_26
     31: STORE_PTR ; Store to array[index] (u8)
     32: INC
     33: jump for_loop_25
     34: for_end_26:
     35: r50 = call .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
     36: return

Function .Users.alice.dev.zvdb-minz.zvdb.main() -> void
  @smc
  Locals:
    r9 = h01: u16
    r15 = h02: u16
    r25 = query: .Users.alice.dev.zvdb-minz.zvdb.Vector256
    r46 = result: .Users.alice.dev.zvdb-minz.zvdb.SearchResult
  Instructions:
      0: LOAD_STRING
      1: PRINT_STRING ; Print "ZVDB-MinZ Production Ready
" (27 chars via loop)
      2: LOAD_STRING
      3: PRINT_STRING ; Print "==========================

" (28 chars via loop)
      4: LOAD_STRING
      5: PRINT_STRING ; Print "Initializing LUT...
" (20 chars via loop)
      6: r4 = call .Users.alice.dev.zvdb-minz.zvdb.init_lut
      7: LOAD_STRING
      8: PRINT_STRING ; Print "Creating test vectors...
" (25 chars via loop)
      9: r6 = call .Users.alice.dev.zvdb-minz.zvdb.create_tests
     10: LOAD_STRING
     11: PRINT_STRING ; Print "Database has " (13 chars via loop)
     12: LOAD_STRING
     13: PRINT_STRING ; Print " vectors

" (10 chars via loop)
     14: r14 = call .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8
     15: r20 = call .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8
     16: LOAD_STRING
     17: PRINT_STRING ; Print "Hamming distances:
" (19 chars via loop)
     18: LOAD_STRING
     19: PRINT_STRING ; Print "  V0 vs V1: " (12 chars via loop)
     20: PRINT_STRING_DIRECT ; Direct print " bits
" (6 chars)
     21: LOAD_STRING
     22: PRINT_STRING ; Print "  V0 vs V2: " (12 chars via loop)
     23: PRINT_STRING_DIRECT ; Direct print " bits
" (6 chars)
     24: LOAD_STRING
     25: PRINT_STRING ; Print "
Searching...
" (14 chars via loop)
     26: r27 = 32
     27: r28 = r26 ; Initialize loop variable i
     28: for_loop_27:
     29: r29 = r28 < r27 ; Check i < end
     30: jump_if_not r29, for_end_28
     31: TEST
     32: jump_if_not r34, else_29
     33: STORE_PTR ; Store to array[index] (u8)
     34: jump end_if_30
     35: else_29:
     36: STORE_PTR ; Store to array[index] (u8)
     37: end_if_30:
     38: INC
     39: jump for_loop_27
     40: for_end_28:
     41: r49 = call .Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256
     42: LOAD_STRING
     43: PRINT_STRING ; Print "Best match: Vector " (19 chars via loop)
     44: PRINT_STRING_DIRECT ; Direct print "
" (1 chars)
     45: LOAD_STRING
     46: PRINT_STRING ; Print "Hamming: " (9 chars via loop)
     47: PRINT_STRING_DIRECT ; Direct print " bits
" (6 chars)
     48: PRINT_STRING_DIRECT ; Direct print "Score: " (7 chars)
     49: PRINT_STRING_DIRECT ; Direct print "
" (1 chars)
     50: LOAD_STRING
     51: PRINT_STRING ; Print "
â ZVDB-MinZ Complete!
" (28 chars via loop)
     52: return

