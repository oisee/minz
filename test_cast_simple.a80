; MinZ generated code
; Generated: 2025-08-09 21:44:12


; Data section
    ORG $F000

str_0:
    DB 31    ; Length
    DB "Implicit widening u8 to u16: OK"
str_1:
    DB 32    ; Length
    DB "Explicit narrowing u16 to u8: OK"
str_2:
    DB 34    ; Length
    DB "Mixed arithmetic with widening: OK"

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_casting_simple.main
test_casting_simple.main:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -11
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    ; r2 = 42
    LD A, 42
    ; Register 2 already in A
    ; store small, r2
    ; Register 2 already in A
    LD (IX-1), A
    ; r4 = load small
    LD A, (IX-1)
    LD C, A         ; Store to physical register C
    ; store big, r4
    LD (IX-3), L
    LD (IX-2), H
    ; r5 = string(str_0)
    LD HL, str_0
    ; Print "Implicit widening u8 to u16: OK" (31 chars via loop)
    CALL print_string
    ; r7 = 300
    LD HL, 300
    LD D, H
    LD E, L
    ; store large, r7
    LD H, D
    LD L, E
    LD (IX-5), L
    LD (IX-4), H
    ; r9 = load large
    LD L, (IX-5)
    LD H, (IX-4)
    ; store truncated, r9
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD (IX-6), A
    ; r10 = string(str_1)
    LD HL, str_1
    ; Print "Explicit narrowing u16 to u8: OK" (32 chars via loop)
    CALL print_string
    ; r12 = 100
    LD A, 100
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; store a, r12
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD (IX-7), A
    ; r14 = 1000
    LD HL, 1000
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; store b, r14
    LD HL, ($F01C)    ; Virtual register 14 from memory
    LD (IX-9), L
    LD (IX-8), H
    ; r16 = load b
    LD L, (IX-9)
    LD H, (IX-8)
    ; Register 16 already in HL
    ; r17 = load a
    LD A, (IX-7)
    LD H, A         ; Store to physical register H
    ; r18 = r16 + r17
    ; Register 16 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F024), HL    ; Virtual register 18 to memory
    ; store sum, r18
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD (IX-11), L
    LD (IX-10), H
    ; r19 = string(str_2)
    LD HL, str_2
    ; Register 19 already in HL
    ; Print "Mixed arithmetic with widening: OK" (34 chars via loop)
    ; Register 19 already in HL
    CALL print_string
    ; r20 = load sum
    LD L, (IX-11)
    LD H, (IX-10)
    ; Call runtime print_u16_decimal
    ; Call to print_u16_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u16_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; ZX Spectrum ROM print
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
