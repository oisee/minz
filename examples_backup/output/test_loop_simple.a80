; MinZ generated code
; Generated: 2025-07-28 08:45:59


; Data section
    ORG $F000

points:
    DS 8

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_loop_simple.main
...examples.test_loop_simple.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = addr(points)
    LD HL, points
    ; Register 1 already in HL
    ; Load table base address
    ; Register 1 already in HL
    ; Load table base for end calculation
    ; Register 1 already in HL
    ; Calculate table end (+ 4 elements * 2 bytes)
    LD DE, 8
    ADD HL, DE
    ; Load loop counter
    LD A, 4
    LD C, A         ; Store to physical register C
    ; loop_start_1:
loop_start_1:
    ; Check if reached end of table
    LD D, H
    LD E, L
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, D
    OR A
    JP NZ, loop_end_2
    ; Copy element to buffer at $F000
    LD DE, $F000    ; Buffer address
    LD BC, 2       ; Size
    LDIR            ; Copy to buffer
    ; Copy buffer back to element at $F000
    EX DE, HL       ; DE = destination
    LD HL, $F000    ; Buffer address
    LD BC, 2       ; Size
    LDIR            ; Copy from buffer
    ; Advance to next element (+2 bytes)
    LD DE, 2
    ADD HL, DE
    ; Decrement counter and loop if not zero
    LD A, C
    LD B, A
    DJNZ loop_start_1
    LD A, B
    LD C, A         ; Store to physical register C
    ; loop_end_2:
loop_end_2:
    ; r6 = addr(points)
    LD HL, points
    LD D, H
    LD E, L
    ; Load table base address
    LD H, D
    LD L, E
    ; Load table base for end calculation
    LD H, D
    LD L, E
    ; Calculate table end (+ 4 elements * 2 bytes)
    LD DE, 8
    ADD HL, DE
    ; Load loop counter
    LD A, 4
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; loop_start_3:
loop_start_3:
    ; Check if reached end of table
    LD D, H
    LD E, L
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP NZ, loop_end_4
    ; Advance to next element (+2 bytes)
    LD DE, 2
    ADD HL, DE
    ; Decrement counter and loop if not zero
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD B, A
    DJNZ loop_start_3
    LD A, B
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; loop_end_4:
loop_end_4:
    ; return
    RET

    END main
