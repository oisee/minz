// Test TRUE SMC (истинный SMC) implementation
// This tests immediate operand patching as described in ADR-001

import zx.io

// Simple function with SMC anchors
fun add(x: u8, y: u8) -> u8 {
    return x + y
}

// Function that uses 16-bit parameters
fun multiply(a: u16, b: u16) -> u16 {
    // Simple multiplication by repeated addition
    let result: u16 = 0
    let count: u16 = b
    
    while count > 0 {
        result = result + a
        count = count - 1
    }
    
    return result
}

// Test reuse of anchor values
fun process(value: u8) -> u8 {
    // First use creates anchor
    let temp = value + 10
    
    // Subsequent uses should load from anchor address
    if value > 50 {
        return value * 2
    } else {
        return value + temp
    }
}

fun main() -> void {
    // Test 8-bit SMC
    let sum = add(5, 3)
    io.print_str("5 + 3 = ")
    io.print_u8(sum)
    io.print_char(10) // newline
    
    // Test 16-bit SMC  
    let product = multiply(6, 7)
    io.print_str("6 * 7 = ")
    io.print_u16(product)
    io.print_char(10) // newline
    
    // Test anchor reuse
    let result1 = process(30)
    io.print_str("process(30) = ")
    io.print_u8(result1)
    io.print_char(10) // newline
    
    let result2 = process(60)
    io.print_str("process(60) = ")
    io.print_u8(result2)
    io.print_char(10) // newline
}