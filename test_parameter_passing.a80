; MinZ generated code
; Generated: 2025-08-05 07:59:29


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_parameter_passing.process_address
examples.test_parameter_passing.process_address:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.test_parameter_passing.process_address_param_addr:
    LD HL, #0000   ; SMC parameter addr
    ; Register 3 already in HL
examples.test_parameter_passing.process_address_param_offset:
    LD DE, #0000   ; SMC parameter offset
    EX DE, HL      ; Move to HL for storage
    LD D, H
    LD E, L
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_parameter_passing.calculate_physics
examples.test_parameter_passing.calculate_physics:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.test_parameter_passing.calculate_physics_param_velocity:
    LD HL, #0000   ; SMC parameter velocity
examples.test_parameter_passing.calculate_physics_param_acceleration:
    LD DE, #0000   ; SMC parameter acceleration
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_parameter_passing.blend_alpha
examples.test_parameter_passing.blend_alpha:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.test_parameter_passing.blend_alpha_param_color1:
    LD HL, #0000   ; SMC parameter color1 (u8->u16)
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_parameter_passing.test_parameter_calls
examples.test_parameter_passing.test_parameter_calls:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -19
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    ; r2 = 1048576
    LD HL, 1048576
    ; Register 2 already in HL
    ; store , r2
    ; Register 2 already in HL
    LD (IX-3), L
    LD (IX-2), H
    ; r4 = 8192
    LD HL, 8192
    ; store , r4
    LD (IX-6), L
    LD (IX-5), H
    ; r6 = load base_addr
    LD L, (IX-3)
    LD H, (IX-2)
    ; r7 = load mem_offset
    LD L, (IX-6)
    LD H, (IX-5)
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = call process_address
    ; Call to process_address (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL examples.test_parameter_passing.process_address
    ; store , r8
    LD (IX-8), L
    LD (IX-7), H
    ; r10 = 0
    LD A, 0
    LD ($F014), A     ; Virtual register 10 to memory
    ; store , r10
    LD HL, ($F014)    ; Virtual register 10 from memory
    LD (IX-10), L
    LD (IX-9), H
    ; r12 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r12
    LD (IX-12), L
    LD (IX-11), H
    ; r14 = load speed
    LD L, (IX-10)
    LD H, (IX-9)
    ; r15 = load accel
    LD L, (IX-12)
    LD H, (IX-11)
    ; r16 = call calculate_physics
    ; Call to calculate_physics (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL examples.test_parameter_passing.calculate_physics
    LD ($F020), HL    ; Virtual register 16 to memory
    ; store , r16
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD (IX-14), L
    LD (IX-13), H
    ; r18 = 255
    LD A, 255
    LD L, A         ; Store to physical register L
    ; store , r18
    LD A, L
    LD (IX-15), A
    ; r20 = 128
    LD A, 128
    LD H, A         ; Store to physical register H
    ; store , r20
    LD A, H
    LD (IX-16), A
    ; r22 = 0
    LD A, 0
    LD ($F02C), A     ; Virtual register 22 to memory
    ; store , r22
    LD HL, ($F02C)    ; Virtual register 22 from memory
    LD (IX-17), L
    LD (IX-16), H
    ; r24 = load red
    LD A, (IX-15)
    LD L, A         ; Store to physical register L
    ; r25 = load blue
    LD A, (IX-16)
    LD ($F032), A     ; Virtual register 25 to memory
    ; r26 = load opacity
    LD L, (IX-17)
    LD H, (IX-16)
    ; r27 = call blend_alpha
    ; Call to blend_alpha (args: 3)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 2
    LD HL, ($F032)    ; Virtual register 25 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL examples.test_parameter_passing.blend_alpha
    ; store , r27
    LD (IX-19), L
    LD (IX-18), H
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
