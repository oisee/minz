; MinZ generated code
; Generated: 2025-08-05 19:56:15


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_overloading.print
examples.test_overloading.print:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_overloading.print
examples.test_overloading.print:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
examples.test_overloading.print_param_x:
    LD HL, #0000   ; SMC parameter x
    ; Register 2 already in HL
    ; r3 = 8
    LD A, 8
    ; Register 3 already in A
    ; r4 = r2 >> r3
    ; 16-bit shift right
    ; Register 2 already in HL
    ; Register 3 already in A
    LD B, A       ; B = shift count
    OR A
    JR Z, .shr16_done_0
.shr16_loop_0:
    SRL H         ; Shift high byte right
    RR L          ; Rotate right through carry
    DJNZ .shr16_loop_0
.shr16_done_0:
    LD D, H
    LD E, L
    ; r5 = call print
    ; Call to print (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.print
    LD HL, (examples.test_overloading.print_param_x)
    LD B, H
    LD C, L
    ; r7 = 255
    LD A, 255
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r8 = r6 & r7
    LD H, B
    LD L, C
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r9 = call print
    ; Call to print (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.print
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_overloading.print
examples.test_overloading.print:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
examples.test_overloading.print_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    LD ($F004), HL    ; Virtual register 2 to memory
    ; jump_if_not r2, else_1
    LD A, ($F004)     ; Virtual register 2 from memory
    OR A
    JP Z, else_1
    ; r3 = 49
    LD A, 49
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r4 = call print
    ; Call to print (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.print
    ; Register 4 already in HL
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; r5 = 48
    LD A, 48
    LD H, A         ; Store to physical register H
    ; r6 = call print
    ; Call to print (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.print
    ; end_if_2:
end_if_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_overloading.max
examples.test_overloading.max:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.test_overloading.max_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
examples.test_overloading.max_param_b:
    LD DE, #0000   ; SMC parameter b (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 > r4
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    JP P, .L2
    LD HL, 0
    JP .L3
.L2:
    LD HL, 1
.L3:
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; jump_if_not r5, else_3
    LD A, ($F00A)     ; Virtual register 5 from memory
    OR A
    JP Z, else_3
    LD A, (examples.test_overloading.max_param_a)
    LD L, A         ; Store to physical register L
    ; return r6
    RET
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    LD A, (examples.test_overloading.max_param_b)
    LD L, A         ; Store to HL (low byte)
    ; return r7
    ; Register 7 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_overloading.max
examples.test_overloading.max:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.test_overloading.max_param_a:
    LD HL, #0000   ; SMC parameter a
    LD ($F006), HL    ; Virtual register 3 to memory
examples.test_overloading.max_param_b:
    LD DE, #0000   ; SMC parameter b
    EX DE, HL      ; Move to HL for storage
    ; Register 4 already in HL
    ; r5 = r3 > r4
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD D, H
    LD E, L
    ; Register 4 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    JP P, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    ; Register 5 already in HL
    ; jump_if_not r5, else_5
    LD A, L
    OR A
    JP Z, else_5
    LD HL, (examples.test_overloading.max_param_a)
    ; Register 6 already in HL
    ; return r6
    ; Register 6 already in HL
    RET
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    LD HL, (examples.test_overloading.max_param_b)
    ; return r7
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_overloading.max
examples.test_overloading.max:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.test_overloading.max_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
examples.test_overloading.max_param_b:
    LD DE, #0000   ; SMC parameter b (u8->u16)
    EX DE, HL      ; Move to HL for storage
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = r3 > r4
    LD D, H
    LD E, L
    LD HL, ($F008)    ; Virtual register 4 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    JP P, .L6
    LD HL, 0
    JP .L7
.L6:
    LD HL, 1
.L7:
    ; jump_if_not r5, else_7
    LD A, L
    OR A
    JP Z, else_7
    LD A, (examples.test_overloading.max_param_a)
    LD L, A         ; Store to HL (low byte)
    ; return r6
    ; Register 6 already in HL
    RET
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; end_if_8:
end_if_8:
    LD A, (examples.test_overloading.max_param_b)
    LD H, A         ; Store to physical register H
    ; return r7
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.test_overloading.main
examples.test_overloading.main:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -18
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    ; r2 = 65
    LD A, 65
    LD L, A         ; Store to physical register L
    ; store , r2
    LD A, L
    LD (IX-1), A
    ; r3 = load x
    LD A, (IX-1)
    LD H, A         ; Store to physical register H
    ; r4 = call print
    ; Call to print (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.print
    ; r6 = 16706
    LD HL, 16706
    ; store , r6
    LD (IX-3), L
    LD (IX-2), H
    ; r7 = load y
    LD L, (IX-3)
    LD H, (IX-2)
    ; r8 = call print
    ; Call to print (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.print
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r10 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; store , r10
    LD (IX-4), L
    LD (IX-3), H
    ; r11 = load flag
    LD L, (IX-4)
    LD H, (IX-3)
    LD ($F016), HL    ; Virtual register 11 to memory
    ; r12 = call print
    ; Call to print (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.print
    ; r14 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; store , r14
    LD A, L
    LD (IX-5), A
    ; r16 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; store , r16
    LD A, H
    LD (IX-6), A
    ; r18 = load a
    LD A, (IX-5)
    LD ($F024), A     ; Virtual register 18 to memory
    ; r19 = load b
    LD A, (IX-6)
    LD H, A         ; Store to physical register H
    ; r20 = call max
    ; Call to max (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.max
    ; store , r20
    LD (IX-8), L
    LD (IX-7), H
    ; r21 = load max_u8
    LD L, (IX-8)
    LD H, (IX-7)
    ; r22 = call print
    ; Call to print (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.print
    ; r24 = 1000
    LD HL, 1000
    ; store , r24
    LD (IX-10), L
    LD (IX-9), H
    ; r26 = 2000
    LD HL, 2000
    ; store , r26
    LD (IX-12), L
    LD (IX-11), H
    ; r28 = load c
    LD L, (IX-10)
    LD H, (IX-9)
    ; r29 = load d
    LD L, (IX-12)
    LD H, (IX-11)
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; r30 = call max
    ; Call to max (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.max
    ; store , r30
    LD (IX-14), L
    LD (IX-13), H
    ; r32 = 10
    LD A, 10
    LD ($F040), A     ; Virtual register 32 to memory
    ; r33 = -r32
    LD HL, ($F040)    ; Virtual register 32 from memory
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; store , r33
    LD A, H
    LD (IX-15), A
    ; r35 = 5
    LD A, 5
    LD ($F046), A     ; Virtual register 35 to memory
    ; r36 = -r35
    LD HL, ($F046)    ; Virtual register 35 from memory
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; store , r36
    LD A, H
    LD (IX-16), A
    ; r38 = load e
    LD A, (IX-15)
    LD ($F04C), A     ; Virtual register 38 to memory
    ; r39 = load f
    LD A, (IX-16)
    LD H, A         ; Store to physical register H
    ; r40 = call max
    ; Call to max (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL examples.test_overloading.max
    ; store , r40
    LD (IX-18), L
    LD (IX-17), H
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
