; MinZ generated code
; Generated: 2025-08-06 23:47:24


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: expected.test_16bit_params.add_u16$u16$u16
expected.test_16bit_params.add_u16$u16$u16:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
expected.test_16bit_params.add_u16$u16$u16_param_a:
    LD HL, #0000   ; SMC parameter a
    ; Register 3 already in HL
expected.test_16bit_params.add_u16$u16$u16_param_b:
    LD DE, #0000   ; SMC parameter b
    EX DE, HL      ; Move to HL for storage
    LD D, H
    LD E, L
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: expected.test_16bit_params.main
expected.test_16bit_params.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 1000
    LD HL, 1000
    ; store x, r2
    LD ($F002), HL
    ; r4 = 2000
    LD HL, 2000
    ; store y, r4
    LD ($F006), HL
    ; r6 = load x
    LD HL, ($F002)
    ; r7 = load y
    LD HL, ($F006)
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = load x
    LD HL, ($F002)
    ; r9 = load y
    LD HL, ($F006)
    ; unknown op 39
    ; Patch template 'store_u8' for expected.test_16bit_params.add_u16$u16$u16_return_patch
    LD A, $32              ; LD (nn), A opcode
    LD (expected.test_16bit_params.add_u16$u16$u16_return_patch), A             ; Patch first opcode
    ; unknown op 40
    ; Set patch target address: temp_result
    LD HL, temp_result              ; Target address
    LD (expected.test_16bit_params.add_u16$u16$u16_return_patch+1), HL          ; Patch address operand
    ; unknown op 41
    ; Patch parameter a = 0
    LD HL, 0              ; Parameter value
    LD (expected.test_16bit_params.add_u16$u16$u16_param_a+1), HL  ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD HL, 0              ; Parameter value
    LD (expected.test_16bit_params.add_u16$u16$u16_param_b+1), HL  ; Patch parameter immediate
    ; r10 = call expected.test_16bit_params.add_u16$u16$u16
    ; Call to expected.test_16bit_params.add_u16$u16$u16 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL expected.test_16bit_params.add_u16$u16$u16
    ; Register 10 already in HL
    ; store result, r10
    ; Register 10 already in HL
    LD ($F00A), HL
    ; r11 = load result
    LD HL, ($F00A)
    ; Register 11 already in HL
    ; return r11
    ; Register 11 already in HL
    RET

    END main
