; MinZ generated code
; Generated: 2025-08-24 17:43:14


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: math_module.add$u8$u8
math_module.add$u8$u8:
; TRUE SMC function with immediate anchors
a$immOP:
    LD A, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
b$immOP:
    LD B, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: math_module.multiply$u8$u8
math_module.multiply$u8$u8:
; TRUE SMC function with immediate anchors
a$immOP:
    LD E, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
b$immOP:
    LD A, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    LD H, A         ; Store to physical register H
    ; r5 = r3 * r4
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, math_module_multiply_u8_u8_mul_done_0
math_module_multiply_u8_u8_mul_loop_0:
    XOR D, D    ; Optimized: was LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, math_module_multiply_u8_u8_mul_loop_0
math_module_multiply_u8_u8_mul_done_0:
    ; return r5
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: math_module.add$u8$u8
math_module.add$u8$u8:
; TRUE SMC function with immediate anchors
a$immOP:
    LD A, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
    EXX               ; Switch to shadow registers
    LD C, A         ; Store to shadow C' (now active)
    EXX               ; Switch back to main registers
b$immOP:
    LD A, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    EXX               ; Switch to shadow registers
    LD D, A         ; Store to shadow D' (now active)
    EXX               ; Switch back to main registers
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: math_module.multiply$u8$u8
math_module.multiply$u8$u8:
; TRUE SMC function with immediate anchors
a$immOP:
    LD C, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
b$immOP:
    LD B, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    ; r5 = r3 * r4
    ; 8-bit multiplication
    LD A, C
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, math_module_multiply_u8_u8_mul_done_1
math_module_multiply_u8_u8_mul_loop_1:
    XOR D, D    ; Optimized: was LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, math_module_multiply_u8_u8_mul_loop_1
math_module_multiply_u8_u8_mul_done_1:
    ; return r5
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_modules.main
test_modules_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; unknown op 39
    ; Smart patch 'store_u8' for math_module.add_return_patch
    LD A, #00               ; NOP opcode
    LD (math_module.add_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (math_module.add_store_addr), HL
    ; unknown op 41
    ; Patch parameter a = 0
    LD A, 0               ; Parameter value
    LD (math_module.add_param_a+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD A, 0               ; Parameter value
    LD (math_module.add_param_b+1), A   ; Patch parameter immediate
    ; r4 = call math_module.add
    ; Call to math_module.add (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL math_module.add
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00A)    ; Virtual register 5 from memory
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW a$imm0           ; math_module.add$u8$u8.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; math_module.add$u8$u8.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a$imm0           ; math_module.multiply$u8$u8.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; math_module.multiply$u8$u8.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a$imm0           ; math_module.add$u8$u8.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; math_module.add$u8$u8.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a$imm0           ; math_module.multiply$u8$u8.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; math_module.multiply$u8$u8.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET


; Standard library routines
temp_result:
    DW 0           ; Temporary storage for function results


    END main


; Assembly peephole optimization: 1 patterns applied