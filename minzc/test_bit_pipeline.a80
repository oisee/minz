; MinZ generated code
; Generated: 2025-07-30 09:36:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_bit_pipeline.main
...test_bit_pipeline.main:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -16
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    ; r2 = 171
    LD A, 171
    ; Register 2 already in A
    ; store , r2
    ; Register 2 already in A
    LD (IX-1), A
    ; r4 = load val8
    LD A, (IX-1)
    LD C, A         ; Store to physical register C
    ; store , r4
    LD (IX-2), L
    LD (IX-1), H
    ; r6 = load bits8old
    LD L, (IX-2)
    LD H, (IX-1)
    ; Load bit field field1 (offset 0, width 4)
    LD A, E
    AND 15
    LD H, A         ; Store to physical register H
    ; store , r7
    LD A, H
    LD (IX-3), A
    ; r9 = load bits8old
    LD L, (IX-2)
    LD H, (IX-1)
    ; Load bit field field2 (offset 4, width 4)
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    SRL A
    SRL A
    SRL A
    SRL A
    AND 15
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store , r10
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD (IX-4), A
    ; r12 = load val8
    LD A, (IX-1)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; store , r12
    LD (IX-5), L
    LD (IX-4), H
    ; r14 = load bits8new
    LD L, (IX-5)
    LD H, (IX-4)
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; Load bit field field1 (offset 0, width 4)
    LD A, ($F01C)     ; Virtual register 14 from memory
    AND 15
    LD B, A         ; Store to physical register B
    ; store , r15
    LD A, B
    LD (IX-6), A
    ; r17 = load bits8new
    LD L, (IX-5)
    LD H, (IX-4)
    ; Load bit field field2 (offset 4, width 4)
    LD A, B
    SRL A
    SRL A
    SRL A
    SRL A
    AND 15
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r18
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD (IX-7), A
    ; r20 = 4660
    LD HL, 4660
    ; store , r20
    LD (IX-9), L
    LD (IX-8), H
    ; r22 = load val16
    LD L, (IX-9)
    LD H, (IX-8)
    ; store , r22
    LD (IX-11), L
    LD (IX-10), H
    ; r24 = load bits16
    LD L, (IX-11)
    LD H, (IX-10)
    ; Load bit field field1 (offset 0, width 8)
    LD A, H
    AND 255
    LD H, A         ; Store to physical register H
    ; store , r25
    LD A, H
    LD (IX-12), A
    ; r27 = load bits16
    LD L, (IX-11)
    LD H, (IX-10)
    ; Load bit field field2 (offset 8, width 8)
    LD A, L
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 255
    LD H, A         ; Store to physical register H
    ; store , r28
    LD A, H
    LD (IX-13), A
    ; r30 = load bits8old
    LD L, (IX-2)
    LD H, (IX-1)
    ; store , r30
    LD A, L
    LD (IX-14), A
    ; r32 = load bits16
    LD L, (IX-11)
    LD H, (IX-10)
    ; store , r32
    LD (IX-16), L
    LD (IX-15), H
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
