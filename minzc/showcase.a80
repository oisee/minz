; MinZ generated code
; Generated: 2025-08-03 18:35:42


; Data section
    ORG $F000

str_0:
    DB 45    ; Length
    DB "=== MinZ v0.9.4 Metaprogramming Showcase ==="
    DB 10
str_1:
    DB 40    ; Length
    DB "Example 1: Generated greeting functions"
    DB 10
str_2:
    DB 31    ; Length
    DB "Example 2: Generated constants"
    DB 10
str_3:
    DB 39    ; Length
    DB "Example 3: Generated accessor patterns"
    DB 10
str_4:
    DB 37    ; Length
    DB "Example 4: Generated optimized loops"
    DB 10
str_5:
    DB 49    ; Length
    DB "Example 5: Metaprogramming + Zero-cost iterators"
    DB 10
str_6:
    DB 26    ; Length
    DB "=== Showcase Complete ==="
    DB 10
str_7:
    DB 47    ; Length
    DB "MinZ: Modern programming for vintage hardware!"
    DB 10

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.metaprogramming_showcase.main
...examples.metaprogramming_showcase.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = string(str_0)
    LD HL, str_0
    ; Print "=== MinZ v0.9.4 Metaprogramming Showcase ===
" (45 chars via loop)
    CALL print_string
    ; r2 = string(str_1)
    LD HL, str_1
    ; Print "Example 1: Generated greeting functions
" (40 chars via loop)
    CALL print_string
    ; @minz generated: 
        fun greet_world() -> void {
            @print("Hello from world!
");
        }
    
    NOP
    ; Metaprogramming output (placeholder)
    ; Generated by @minz metafunction
    fun greet_world() -> void {
    @print("Hello from world!
    ");
    }
    ; @minz generated: 
        fun greet_universe() -> void {
            @print("Greetings, universe!
");
        }
    
    NOP
    ; Metaprogramming output (placeholder)
    ; Generated by @minz metafunction
    fun greet_universe() -> void {
    @print("Greetings, universe!
    ");
    }
    ; r3 = string(str_2)
    LD HL, str_2
    ; Print "Example 2: Generated constants
" (31 chars via loop)
    CALL print_string
    ; @minz generated: 
        const BASE_VALUE: u8 = 10;
        const DOUBLED: u8 = 20;
        const SQUARED: u16 = 100;
    
    NOP
    ; Metaprogramming output (placeholder)
    ; Generated by @minz metafunction
const BASE_VALUE: u8 = 10;
const DOUBLED: u8 = 20;
const SQUARED: u16 = 100;
    ; r4 = string(str_3)
    LD HL, str_3
    ; Print "Example 3: Generated accessor patterns
" (39 chars via loop)
    CALL print_string
    ; @minz generated: 
        // Accessor for health field of type u8
        fun get_health(obj: *Player) -> u8 {
            return obj.health;
        }
        
        fun set_health(obj: *Player, value: u8) -> void {
            obj.health = value;
        }
    
    NOP
    ; Metaprogramming output (placeholder)
    ; Generated by @minz metafunction
    // Accessor for health field of type u8
    fun get_health(obj: *Player) -> u8 {
    return obj.health;
    }
    fun set_health(obj: *Player, value: u8) -> void {
    obj.health = value;
    }
    ; r5 = string(str_4)
    LD HL, str_4
    ; Print "Example 4: Generated optimized loops
" (37 chars via loop)
    CALL print_string
    ; @minz generated: 
        // Unrolled loop for 3 iterations
        fun process_3_times() -> void {
            @print("Processing iteration 1
");
            @print("Processing iteration 2
");
            @print("Processing iteration 3
");
        }
    
    NOP
    ; Metaprogramming output (placeholder)
    ; Generated by @minz metafunction
    // Unrolled loop for 3 iterations
    fun process_3_times() -> void {
    @print("Processing iteration 1
    ");
    @print("Processing iteration 2
    ");
    @print("Processing iteration 3
    ");
    }
    ; r6 = string(str_5)
    LD HL, str_5
    ; Print "Example 5: Metaprogramming + Zero-cost iterators
" (49 chars via loop)
    CALL print_string
    ; r8 = load numbers
    LD HL, ($F00E)
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Pointer to array start
    LD ($F014), HL    ; Virtual register 10 to memory
    ; djnz_loop_1:
djnz_loop_1:
    ; Load element via pointer
    LD HL, ($F014)    ; Virtual register 10 from memory
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; Call double_it
    ; Call to double_it (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.metaprogramming_showcase.double_it
    ; Call gt_5_check
    ; Call to gt_5_check (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.metaprogramming_showcase.gt_5_check
    ; Skip if filter predicate is false
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, filter_continue_2
    ; Call print_result
    ; Call to print_result (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.metaprogramming_showcase.print_result
    ; Register 14 already in HL
    ; filter_continue_2:
filter_continue_2:
    ; Advance to next element
    LD HL, ($F014)    ; Virtual register 10 from memory
    INC HL
    LD ($F014), HL    ; Virtual register 10 to memory
    ; DJNZ - decrement and loop
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD B, A
    DJNZ djnz_loop_1
    LD A, B
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r15 = string(str_6)
    LD HL, str_6
    ; Register 15 already in HL
    ; Print "=== Showcase Complete ===
" (26 chars via loop)
    ; Register 15 already in HL
    CALL print_string
    ; r16 = string(str_7)
    LD HL, str_7
    ; Print "MinZ: Modern programming for vintage hardware!
" (47 chars via loop)
    CALL print_string
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.metaprogramming_showcase.double_it
...examples.metaprogramming_showcase.double_it:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.metaprogramming_showcase.double_it_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 2
    LD A, 2
    LD L, A         ; Store to HL (low byte)
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, L
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.metaprogramming_showcase.gt_5_check
...examples.metaprogramming_showcase.gt_5_check:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.metaprogramming_showcase.gt_5_check_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; r4 = r2 > r3
    LD D, H
    LD E, L
    ; Register 3 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    JP P, .L2
    LD HL, 0
    JP .L3
.L2:
    LD HL, 1
.L3:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.metaprogramming_showcase.print_result
...examples.metaprogramming_showcase.print_result:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Direct print "Result: " (8 chars)
    ; Direct print "Result: " (8 chars)
    LD A, 82
    RST 16             ; Print character
    LD A, 101
    RST 16             ; Print character
    LD A, 115
    RST 16             ; Print character
    LD A, 117
    RST 16             ; Print character
    LD A, 108
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 58
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
