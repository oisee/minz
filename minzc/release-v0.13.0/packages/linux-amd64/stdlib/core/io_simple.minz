// MinZ Core I/O - Simple Implementation
// Basic I/O functions that work with current compiler

// Print a single character to screen (ZX Spectrum ROM routine)
@abi("rst $10")
pub fun print_char(ch: u8) -> void;

// Print unsigned 8-bit number
pub fun print_u8(value: u8) -> void {
    if value == 0 {
        print_char(48); // '0'
        return;
    }
    
    // Handle up to 3 digits (max 255)
    let hundreds: u8 = value / 100;
    let tens: u8 = (value % 100) / 10;
    let ones: u8 = value % 10;
    
    if hundreds > 0 {
        print_char(48 + hundreds);
        print_char(48 + tens);
        print_char(48 + ones);
    } else if tens > 0 {
        print_char(48 + tens);
        print_char(48 + ones);
    } else {
        print_char(48 + ones);
    }
}

// Print unsigned 16-bit number
pub fun print_u16(value: u16) -> void {
    if value == 0 {
        print_char(48); // '0'
        return;
    }
    
    // Max value is 65535 (5 digits)
    let ten_thousands: u16 = value / 10000;
    let thousands: u16 = (value % 10000) / 1000;
    let hundreds: u16 = (value % 1000) / 100;
    let tens: u16 = (value % 100) / 10;
    let ones: u16 = value % 10;
    
    let mut started: bool = false;
    
    if ten_thousands > 0 {
        print_char(48 + (ten_thousands as u8));
        started = true;
    }
    if thousands > 0 || started {
        print_char(48 + (thousands as u8));
        started = true;
    }
    if hundreds > 0 || started {
        print_char(48 + (hundreds as u8));
        started = true;
    }
    if tens > 0 || started {
        print_char(48 + (tens as u8));
    }
    print_char(48 + (ones as u8));
}

// Print a string (null-terminated)
pub fun print_string(str: *u8) -> void {
    let mut ptr: *u8 = str;
    while *ptr != 0 {
        print_char(*ptr);
        ptr = ptr + 1;
    }
}

// Print a string with newline
pub fun println(str: *u8) -> void {
    print_string(str);
    print_char(13); // CR on ZX Spectrum
}