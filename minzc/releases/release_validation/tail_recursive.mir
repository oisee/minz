; MinZ Intermediate Representation (MIR)
; Module: main

Function ......examples.tail_recursive.factorial_tail(n: u8, acc: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor n$imm0
      1: ......examples.tail_recursive.factorial_tail_tail_loop: ; Tail recursion loop start
      2: UNKNOWN_OP_57
      3: jump_if_not r5, else_1
      4: UNKNOWN_OP_33 ; Load from anchor acc$imm0
      5: return r6
      6: else_1:
      7: UNKNOWN_OP_33 ; Load from anchor n$imm0
      8: UNKNOWN_OP_33 ; Load from anchor n$imm0
      9: UNKNOWN_OP_33 ; Load from anchor acc$imm0
     10: jump ......examples.tail_recursive.factorial_tail_tail_loop ; Tail recursion optimized to loop

Function ......examples.tail_recursive.factorial(n: u8) -> u16
  @smc
  @recursive
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor n$imm0
      1: r4 = call factorial_tail
      2: return r4

Function ......examples.tail_recursive.sum_tail(n: u16, acc: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor n$imm0
      1: ......examples.tail_recursive.sum_tail_tail_loop: ; Tail recursion loop start
      2: UNKNOWN_OP_57
      3: jump_if_not r5, else_3
      4: UNKNOWN_OP_33 ; Load from anchor acc$imm0
      5: return r6
      6: else_3:
      7: UNKNOWN_OP_33 ; Load from anchor n$imm0
      8: UNKNOWN_OP_33 ; Load from anchor acc$imm0
      9: UNKNOWN_OP_33 ; Load from anchor n$imm0
     10: jump ......examples.tail_recursive.sum_tail_tail_loop ; Tail recursion optimized to loop

Function ......examples.tail_recursive.main() -> void
  @smc
  @recursive
  Locals:
    r1 = result: u16
    r4 = sum: u16
  Instructions:
      0: r3 = call factorial
      1: r7 = call sum_tail
      2: return

