; MinZ generated code
; Generated: 2025-08-10 23:16:49


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_by_2$u8
...test_multiplication_opt.test_mul_by_2$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_by_2$u8_param_x.op:
...test_multiplication_opt.test_mul_by_2$u8_param_x equ ...test_multiplication_opt.test_mul_by_2$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    ; Register 2 already in A
    ; r3 = 2
    LD A, 2
    LD B, A         ; Store to physical register B
    ; r4 = r2 * r3
    ; 8-bit multiplication
    ; Register 2 already in A
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, ___test_multiplication_opt_test_mul_by_2_u8_mul_done_0
___test_multiplication_opt_test_mul_by_2_u8_mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, ___test_multiplication_opt_test_mul_by_2_u8_mul_loop_0
___test_multiplication_opt_test_mul_by_2_u8_mul_done_0:
    LD A, C

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
...test_multiplication_opt.test_mul_by_2$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
...test_multiplication_opt.test_mul_by_2$u8_store_addr.op:
...test_multiplication_opt.test_mul_by_2$u8_store_addr equ ...test_multiplication_opt.test_mul_by_2$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_by_4$u8
...test_multiplication_opt.test_mul_by_4$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_by_4$u8_param_x.op:
...test_multiplication_opt.test_mul_by_4$u8_param_x equ ...test_multiplication_opt.test_mul_by_4$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD D, A         ; Store to physical register D
    ; r3 = 4
    LD A, 4
    LD E, A         ; Store to physical register E
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, D
    LD B, A       ; B = multiplicand
    LD A, E
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, ___test_multiplication_opt_test_mul_by_4_u8_mul_done_1
___test_multiplication_opt_test_mul_by_4_u8_mul_loop_1:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, ___test_multiplication_opt_test_mul_by_4_u8_mul_loop_1
___test_multiplication_opt_test_mul_by_4_u8_mul_done_1:
    LD A, H

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
...test_multiplication_opt.test_mul_by_4$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
...test_multiplication_opt.test_mul_by_4$u8_store_addr.op:
...test_multiplication_opt.test_mul_by_4$u8_store_addr equ ...test_multiplication_opt.test_mul_by_4$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_by_8$u8
...test_multiplication_opt.test_mul_by_8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_by_8$u8_param_x.op:
...test_multiplication_opt.test_mul_by_8$u8_param_x equ ...test_multiplication_opt.test_mul_by_8$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD L, A         ; Store to physical register L
    ; r3 = 8
    LD A, 8
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, L
    LD B, A       ; B = multiplicand
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, ___test_multiplication_opt_test_mul_by_8_u8_mul_done_2
___test_multiplication_opt_test_mul_by_8_u8_mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, ___test_multiplication_opt_test_mul_by_8_u8_mul_loop_2
___test_multiplication_opt_test_mul_by_8_u8_mul_done_2:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_by_3$u8
...test_multiplication_opt.test_mul_by_3$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_by_3$u8_param_x.op:
...test_multiplication_opt.test_mul_by_3$u8_param_x equ ...test_multiplication_opt.test_mul_by_3$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    ; Register 2 already in A
    ; r3 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r4 = r2 * r3
    ; 8-bit multiplication
    ; Register 2 already in A
    LD B, A       ; B = multiplicand
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, ___test_multiplication_opt_test_mul_by_3_u8_mul_done_3
___test_multiplication_opt_test_mul_by_3_u8_mul_loop_3:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, ___test_multiplication_opt_test_mul_by_3_u8_mul_loop_3
___test_multiplication_opt_test_mul_by_3_u8_mul_done_3:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_by_5$u8
...test_multiplication_opt.test_mul_by_5$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_by_5$u8_param_x.op:
...test_multiplication_opt.test_mul_by_5$u8_param_x equ ...test_multiplication_opt.test_mul_by_5$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD B, A         ; Store to physical register B
    ; r3 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, B
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, ___test_multiplication_opt_test_mul_by_5_u8_mul_done_4
___test_multiplication_opt_test_mul_by_5_u8_mul_loop_4:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, ___test_multiplication_opt_test_mul_by_5_u8_mul_loop_4
___test_multiplication_opt_test_mul_by_5_u8_mul_done_4:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_by_10$u8
...test_multiplication_opt.test_mul_by_10$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_by_10$u8_param_x.op:
...test_multiplication_opt.test_mul_by_10$u8_param_x equ ...test_multiplication_opt.test_mul_by_10$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r3 = 10
    LD A, 10
    ; Register 3 already in A
    ; r4 = r2 * r3
    ; 8-bit multiplication
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD B, A       ; B = multiplicand
    ; Register 3 already in A
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, ___test_multiplication_opt_test_mul_by_10_u8_mul_done_5
___test_multiplication_opt_test_mul_by_10_u8_mul_loop_5:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, ___test_multiplication_opt_test_mul_by_10_u8_mul_loop_5
___test_multiplication_opt_test_mul_by_10_u8_mul_done_5:
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
...test_multiplication_opt.test_mul_by_10$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
...test_multiplication_opt.test_mul_by_10$u8_store_addr.op:
...test_multiplication_opt.test_mul_by_10$u8_store_addr equ ...test_multiplication_opt.test_mul_by_10$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_by_15$u8
...test_multiplication_opt.test_mul_by_15$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_by_15$u8_param_x.op:
...test_multiplication_opt.test_mul_by_15$u8_param_x equ ...test_multiplication_opt.test_mul_by_15$u8_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    LD C, A         ; Store to physical register C
    ; r3 = 15
    LD A, 15
    LD B, A         ; Store to physical register B
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, C
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, ___test_multiplication_opt_test_mul_by_15_u8_mul_done_6
___test_multiplication_opt_test_mul_by_15_u8_mul_loop_6:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, ___test_multiplication_opt_test_mul_by_15_u8_mul_loop_6
___test_multiplication_opt_test_mul_by_15_u8_mul_done_6:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_16bit_by_2$u16
...test_multiplication_opt.test_mul_16bit_by_2$u16:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_16bit_by_2$u16_param_x.op:
...test_multiplication_opt.test_mul_16bit_by_2$u16_param_x equ ...test_multiplication_opt.test_mul_16bit_by_2$u16_param_x.op + 1
    LD HL, #0000   ; SMC parameter x
    LD D, H
    LD E, L
    ; r3 = 2
    LD A, 2
    LD L, A         ; Store to HL (low byte)
    ; r4 = r2 * r3
    ; 16-bit multiplication
    LD H, D
    LD L, E
    LD (mul_src1_7), HL  ; Save multiplicand
    ; Register 3 already in HL
    LD (mul_src2_7), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_7)  ; DE = multiplicand
    LD BC, (mul_src2_7)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_7
___test_multiplication_opt_test_mul_16bit_by_2_u16_mul16_loop_7:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_7
___test_multiplication_opt_test_mul_16bit_by_2_u16_mul16_done_7:
mul_src1_7: DW 0
mul_src2_7: DW 0
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.test_mul_16bit_by_10$u16
...test_multiplication_opt.test_mul_16bit_by_10$u16:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_multiplication_opt.test_mul_16bit_by_10$u16_param_x.op:
...test_multiplication_opt.test_mul_16bit_by_10$u16_param_x equ ...test_multiplication_opt.test_mul_16bit_by_10$u16_param_x.op + 1
    LD HL, #0000   ; SMC parameter x
    LD B, H
    LD C, L
    ; r3 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; r4 = r2 * r3
    ; 16-bit multiplication
    LD H, B
    LD L, C
    LD (mul_src1_8), HL  ; Save multiplicand
    ; Register 3 already in HL
    LD (mul_src2_8), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_8)  ; DE = multiplicand
    LD BC, (mul_src2_8)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_8
___test_multiplication_opt_test_mul_16bit_by_10_u16_mul16_loop_8:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_8
___test_multiplication_opt_test_mul_16bit_by_10_u16_mul16_done_8:
mul_src1_8: DW 0
mul_src2_8: DW 0
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_multiplication_opt.main
...test_multiplication_opt.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD ($F004), A     ; Virtual register 2 to memory
    ; store a, r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = load a
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r5 = load a
    LD A, ($F002)
    LD L, A         ; Store to HL (low byte)
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_multiplication_opt.test_mul_by_2$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_multiplication_opt.test_mul_by_2$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_multiplication_opt.test_mul_by_2$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (...test_multiplication_opt.test_mul_by_2$u8_param_x+1), A   ; Patch parameter immediate
    ; r6 = call ...test_multiplication_opt.test_mul_by_2$u8
    ; Call to ...test_multiplication_opt.test_mul_by_2$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...test_multiplication_opt.test_mul_by_2$u8
    ; store b, r6
    LD ($F006), HL
    ; r8 = load a
    LD A, ($F002)
    LD L, A         ; Store to HL (low byte)
    ; r9 = load a
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_multiplication_opt.test_mul_by_4$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_multiplication_opt.test_mul_by_4$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_multiplication_opt.test_mul_by_4$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (...test_multiplication_opt.test_mul_by_4$u8_param_x+1), A   ; Patch parameter immediate
    ; r10 = call ...test_multiplication_opt.test_mul_by_4$u8
    ; Call to ...test_multiplication_opt.test_mul_by_4$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...test_multiplication_opt.test_mul_by_4$u8
    ; store c, r10
    LD ($F00E), HL
    ; r12 = load a
    LD A, ($F002)
    LD L, A         ; Store to HL (low byte)
    ; r13 = load a
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_multiplication_opt.test_mul_by_10$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_multiplication_opt.test_mul_by_10$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_multiplication_opt.test_mul_by_10$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (...test_multiplication_opt.test_mul_by_10$u8_param_x+1), A   ; Patch parameter immediate
    ; r14 = call ...test_multiplication_opt.test_mul_by_10$u8
    ; Call to ...test_multiplication_opt.test_mul_by_10$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...test_multiplication_opt.test_mul_by_10$u8
    ; store d, r14
    LD ($F016), HL
    ; r15 = load b
    LD HL, ($F006)
    ; Register 15 already in HL
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    ; Register 15 already in HL
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r16 = load c
    LD HL, ($F00E)
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r17 = load d
    LD HL, ($F016)
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; ZX Spectrum ROM print
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
