; MinZ Intermediate Representation (MIR)
; Module: main

Function true_smc_test_simple.add(x: u8, y: u8) -> u8
  Instructions:
      0: 12
      1: 12
      2: r5 = r3 + r4
      3: return r5

Function true_smc_test_simple.multiply(a: u16, b: u16) -> u16
  Locals:
    r3 = result: u16
    r5 = count: u16
  Instructions:
      0: r4 = r4 ^ r4 ; XOR A,A (optimized from LD A,0)
      1: store , r4
      2: 12
      3: loop_1:
      4: r7 = load count
      5: r8 = r8 ^ r8 ; XOR A,A (optimized from LD A,0)
      6: r9 = r7 > r8
      7: jump_if_not r9, end_loop_2
      8: jump loop_1
      9: end_loop_2:
     10: r10 = load result
     11: return r10

Function true_smc_test_simple.main() -> void
  @smc
  Locals:
    r1 = sum: u16
    r5 = product: u16
  Instructions:
      0: r4 = call add
      1: store , r4
      2: r8 = call multiply
      3: store , r8
      4: return

