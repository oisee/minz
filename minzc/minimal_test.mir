; MinZ Intermediate Representation (MIR)
; Module: main

Function ...examples.minimal_test.add(a: u16, b: u16) -> u16
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r5 = r3 + r4
      3: return r5

Function ...examples.minimal_test.test_arithmetic() -> void
  @smc
  Locals:
    r1 = x: u16
    r3 = y: u16
    r5 = result: u16
  Instructions:
      0: r2 = 10
      1: store , r2
      2: r4 = 20
      3: store , r4
      4: r6 = load x
      5: r7 = load y
      6: r8 = call add
      7: store , r8
      8: return

Function ...examples.minimal_test.test_struct() -> void
  @smc
  Locals:
    r1 = p: u16
    r5 = sum: u16
  Instructions:
      0: UNKNOWN_OP_64 ; Allocate struct Point
      1: r3 = 100
      2: STORE_FIELD ; Store to Point.x
      3: r4 = 200
      4: STORE_FIELD ; Store to Point.y
      5: store , r2
      6: r6 = load p
      7: LOAD_FIELD ; Load field x (offset 0)
      8: r8 = load p
      9: LOAD_FIELD ; Load field y (offset 2)
     10: r10 = r7 + r9
     11: store , r10
     12: return

Function ...examples.minimal_test.test_array() -> void
  @smc
  Locals:
    r1 = arr: [3]u8
    r2 = first: u16
  Instructions:
      0: r3 = load arr
      1: r4 = 0
      2: LOAD_INDEX ; Load array element (u8)
      3: store , r5
      4: return

Function ...examples.minimal_test.main() -> void
  @smc
  Instructions:
      0: r1 = call test_arithmetic
      1: r2 = call test_struct
      2: r3 = call test_array
      3: return

