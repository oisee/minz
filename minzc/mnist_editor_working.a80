; MinZ generated code
; Generated: 2025-07-26 14:37:38


; Code section
    ORG $8000


; Function: ...examples.mnist.editor_working.set_border
...examples.mnist.editor_working.set_border:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm { LD A, color
OUT (0xFE), A }
    LD A, color
    OUT (0xFE), A
    ; return
    RET

; Function: ...examples.mnist.editor_working.clear_screen
...examples.mnist.editor_working.clear_screen:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm { LD HL, 0x4000
LD BC, 0x1800
LD A, 0
clear_loop:
LD (HL), A
INC HL
DEC BC
LD A, B
OR C
JR NZ, clear_loop }
    LD HL, 0x4000
    LD BC, 0x1800
    LD A, 0
clear_loop:
    LD (HL), A
    INC HL
    DEC BC
    LD A, B
    OR C
    JR NZ, clear_loop
    ; return
    RET

; Function: ...examples.mnist.editor_working.set_attr
...examples.mnist.editor_working.set_attr:
; TRUE SMC function with immediate anchors
    ; r4 = 22528
    LD HL, 22528
    LD ($F008), HL
y$immOP:
    LD A, 0        ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    LD ($F00A), A
    ; r6 = r4 + r5
    LD HL, ($F008)
    LD D, H
    LD E, L
    LD HL, ($F00A)
    ADD HL, DE
    LD ($F00C), HL
    ; store , r6
    LD HL, ($F00C)
    LD ($F006), HL
    ; return
    RET

; Function: ...examples.mnist.editor_working.set_pixel
...examples.mnist.editor_working.set_pixel:
; TRUE SMC function with immediate anchors
    ; r4 = 16384
    LD HL, 16384
    LD ($F008), HL
y$immOP:
    LD A, 0        ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    LD ($F00A), A
    ; r6 = r4 + r5
    LD HL, ($F008)
    LD D, H
    LD E, L
    LD HL, ($F00A)
    ADD HL, DE
    LD ($F00C), HL
    ; store , r6
    LD HL, ($F00C)
    LD ($F006), HL
    ; return
    RET

; Function: ...examples.mnist.editor_working.delay
...examples.mnist.editor_working.delay:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm { LD BC, loops
delay_loop:
DEC BC
LD A, B
OR C
JR NZ, delay_loop }
    LD BC, loops
delay_loop:
    DEC BC
    LD A, B
    OR C
    JR NZ, delay_loop
    ; return
    RET

; Function: ...examples.mnist.editor_working.draw_test_pattern
...examples.mnist.editor_working.draw_test_pattern:
; TRUE SMC function with immediate anchors
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F008), A
    ; store , r4
    LD HL, ($F008)
    LD ($F006), HL
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F012), A
    ; store , r9
    LD HL, ($F012)
    LD ($F010), HL
    ; r13 = load i
    LD HL, ($F000)
    LD ($F01A), HL
    ; r14 = load j
    LD HL, ($F000)
    LD ($F01C), HL
    ; r15 = r13 + r14
    LD HL, ($F01A)
    LD D, H
    LD E, L
    LD HL, ($F01C)
    ADD HL, DE
    LD ($F01E), HL
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F024), A
    ; unknown op 37
    LD HL, ($F01E)
    LD D, H
    LD E, L
    LD HL, ($F024)
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    LD ($F026), HL
    ; jump_if_not r19, else_1
    LD A, ($F026)
    OR A
    JP Z, else_1
start_x$immOP:
    LD A, 0        ; start_x anchor (will be patched)
start_x$imm0 EQU start_x$immOP+1
    LD ($F028), A
start_y$immOP:
    LD A, 0        ; start_y anchor (will be patched)
start_y$imm0 EQU start_y$immOP+1
    LD ($F02E), A
    ; r26 = call set_pixel
    ; Call to set_pixel (args: 2)
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ...examples.mnist.editor_working.set_pixel
    LD A, ($F02C)
    LD (x$imm0), A        ; Patch x
    LD A, ($F032)
    LD (y$imm0), A        ; Patch y
    CALL ...examples.mnist.editor_working.set_pixel
    LD ($F034), HL
    ; INC (optimized from ADD 1)
    LD HL, ($F036)
    INC HL
    LD ($F03A), HL
    ; store j, r29
    LD HL, ($F03A)
    LD ($F010), HL
    ; INC (optimized from ADD 1)
    LD HL, ($F03C)
    INC HL
    LD ($F040), HL
    ; store i, r32
    LD HL, ($F040)
    LD ($F006), HL
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; return
    POP DE
    POP BC
    RET

; Function: ...examples.mnist.editor_working.setup_screen
...examples.mnist.editor_working.setup_screen:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r1 = call clear_screen
    ; Call to clear_screen (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL clear_screen
    LD ($F002), HL
    ; return
    POP DE
    POP BC
    RET

; Function: ...examples.mnist.editor_working.mnist_main
...examples.mnist.editor_working.mnist_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r2 = call set_border
    ; Call to set_border (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL set_border
    LD ($F004), HL
    ; return
    POP DE
    POP BC
    RET

; Function: ...examples.mnist.editor_working.main
...examples.mnist.editor_working.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; Optimized: return value directly stored to 
    ; Call to mnist_main (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL mnist_main
    LD ($F004), HL
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x$imm0           ; ...examples.mnist.editor_working.set_attr.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; ...examples.mnist.editor_working.set_attr.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; ...examples.mnist.editor_working.set_pixel.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; ...examples.mnist.editor_working.set_pixel.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW start_x$imm0           ; ...examples.mnist.editor_working.draw_test_pattern.start_x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW start_y$imm0           ; ...examples.mnist.editor_working.draw_test_pattern.start_y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

    END main
