; MinZ generated code
; Generated: 2025-07-29 17:18:12


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_array_access.test_array
...examples.test_array_access.test_array:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load arr
    LD HL, ($F002)
    ; r4 = 0
    LD A, 0
    LD ($F008), A     ; Virtual register 4 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F008)     ; Virtual register 4 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD C, A         ; Store to physical register C
    ; store , r5
    LD ($F004), HL
    ; r7 = load arr
    LD HL, ($F002)
    ; r8 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; Load array element (u8)
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; store , r9
    LD ($F00C), HL
    ; r11 = 3
    LD A, 3
    LD ($F016), A     ; Virtual register 11 to memory
    ; store , r11
    LD A, ($F016)     ; Virtual register 11 from memory
    LD ($F014), A
    ; r13 = load arr
    LD HL, ($F002)
    ; r14 = load i
    LD A, ($F014)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; Load array element (u8)
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store , r15
    LD ($F018), HL
    ; r16 = load z
    LD HL, ($F018)
    ; return r16
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_array_access.main
...examples.test_array_access.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = call test_array
    ; Call to test_array (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_array
    ; store , r2
    LD ($F002), HL
    ; return
    RET

    END main
