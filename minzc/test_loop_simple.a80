; MinZ generated code
; Generated: 2025-07-23 23:34:24


; Code section
    ORG $8000


; Function: ...examples.test_loop_simple.main
...examples.test_loop_simple.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = load points
    LD HL, ($F000)
    LD ($F002), HL
    ; r2 = 0
    LD A, 0
    LD ($F004), A
    ; Load array element
    LD HL, ($F002)
    PUSH HL
    LD HL, ($F004)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F006), A
    ; Load field x
    LD HL, ($F006)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F008), HL
    ; r5 = load points
    LD HL, ($F000)
    LD ($F00A), HL
    ; r6 = 0
    LD A, 0
    LD ($F00C), A
    ; Load array element
    LD HL, ($F00A)
    PUSH HL
    LD HL, ($F00C)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F00E), A
    ; Load field y
    LD HL, ($F00E)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F010), HL
    ; r9 = load points
    LD HL, ($F000)
    LD ($F012), HL
    ; r10 = 1
    LD A, 1
    LD ($F014), A
    ; Load array element
    LD HL, ($F012)
    PUSH HL
    LD HL, ($F014)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F016), A
    ; Load field x
    LD HL, ($F016)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F018), HL
    ; r13 = load points
    LD HL, ($F000)
    LD ($F01A), HL
    ; r14 = 1
    LD A, 1
    LD ($F01C), A
    ; Load array element
    LD HL, ($F01A)
    PUSH HL
    LD HL, ($F01C)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F01E), A
    ; Load field y
    LD HL, ($F01E)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F020), HL
    ; r17 = load points
    LD HL, ($F000)
    LD ($F022), HL
    ; r18 = 2
    LD A, 2
    LD ($F024), A
    ; Load array element
    LD HL, ($F022)
    PUSH HL
    LD HL, ($F024)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F026), A
    ; Load field x
    LD HL, ($F026)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F028), HL
    ; r21 = load points
    LD HL, ($F000)
    LD ($F02A), HL
    ; r22 = 2
    LD A, 2
    LD ($F02C), A
    ; Load array element
    LD HL, ($F02A)
    PUSH HL
    LD HL, ($F02C)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F02E), A
    ; Load field y
    LD HL, ($F02E)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F030), HL
    ; r25 = load points
    LD HL, ($F000)
    LD ($F032), HL
    ; r26 = 3
    LD A, 3
    LD ($F034), A
    ; Load array element
    LD HL, ($F032)
    PUSH HL
    LD HL, ($F034)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F036), A
    ; Load field x
    LD HL, ($F036)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F038), HL
    ; r29 = load points
    LD HL, ($F000)
    LD ($F03A), HL
    ; r30 = 3
    LD A, 3
    LD ($F03C), A
    ; Load array element
    LD HL, ($F03A)
    PUSH HL
    LD HL, ($F03C)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F03E), A
    ; Load field y
    LD HL, ($F03E)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F040), HL
    ; r33 = load points
    LD HL, ($F000)
    LD ($F042), HL
    ; Load table base address
    LD HL, ($F042)
    LD ($F044), HL
    ; Load table base for end calculation
    LD HL, ($F042)
    LD ($F046), HL
    ; Calculate table end (+ 4 elements * 2 bytes)
    LD HL, ($F046)
    LD DE, 8
    ADD HL, DE
    LD ($F046), HL
    ; Load loop counter
    LD A, 4
    LD ($F048), A
    ; loop_start_1:
loop_start_1:
    ; Check if reached end of table
    LD HL, ($F044)
    LD D, H
    LD E, L
    LD HL, ($F046)
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, ($F04A)
    OR A
    JP NZ, loop_end_2
    ; Copy element to buffer at $F000
    LD HL, ($F044)
    LD DE, $F000    ; Buffer address
    LD BC, 2       ; Size
    LDIR            ; Copy to buffer
    ; Load p.x from buffer at $F000
    LD HL, ($F000)
    LD ($F04C), HL
    ; Load p.y from buffer at $F001
    LD HL, ($F001)
    LD ($F04E), HL
    ; Copy buffer back to element at $F000
    LD HL, ($F044)
    EX DE, HL       ; DE = destination
    LD HL, $F000    ; Buffer address
    LD BC, 2       ; Size
    LDIR            ; Copy from buffer
    ; Advance to next element (+2 bytes)
    LD HL, ($F044)
    LD DE, 2
    ADD HL, DE
    LD ($F044), HL
    ; Decrement counter and loop if not zero
    LD A, ($F048)
    LD B, A
    DJNZ loop_start_1
    LD A, B
    LD ($F048), A
    ; loop_end_2:
loop_end_2:
    ; r40 = load points
    LD HL, ($F000)
    LD ($F050), HL
    ; Load table base address
    LD HL, ($F050)
    LD ($F052), HL
    ; Load table base for end calculation
    LD HL, ($F050)
    LD ($F054), HL
    ; Calculate table end (+ 4 elements * 2 bytes)
    LD HL, ($F054)
    LD DE, 8
    ADD HL, DE
    LD ($F054), HL
    ; Load loop counter
    LD A, 4
    LD ($F056), A
    ; loop_start_3:
loop_start_3:
    ; Check if reached end of table
    LD HL, ($F052)
    LD D, H
    LD E, L
    LD HL, ($F054)
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, ($F058)
    OR A
    JP NZ, loop_end_4
    ; r45 = load p
    LD HL, ($F000)
    LD ($F05A), HL
    ; Load field x
    LD HL, ($F05A)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F05C), HL
    ; Advance to next element (+2 bytes)
    LD HL, ($F052)
    LD DE, 2
    ADD HL, DE
    LD ($F052), HL
    ; Decrement counter and loop if not zero
    LD A, ($F056)
    LD B, A
    DJNZ loop_start_3
    LD A, B
    LD ($F056), A
    ; loop_end_4:
loop_end_4:
    ; return
    RET

    END main
