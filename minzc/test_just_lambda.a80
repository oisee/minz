; MinZ generated code
; Generated: 2025-08-06 19:14:22


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: lambda_test_just_lambda.main_0
lambda_test_just_lambda.main_0:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F000), A     ; Virtual register 0 to memory
    ; r0 = load x
    LD HL, ($F000)
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_just_lambda.main
test_just_lambda.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = addr()
    LD HL, ($F000)    ; Virtual register 0 from memory
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 4 already in HL
    ; store f, r4
    ; Register 4 already in HL
    LD ($F002), HL
    ; r6 = 42
    LD A, 42
    LD C, A         ; Store to physical register C
    ; r7 = load 
    LD HL, ($F002)
    ; r8 = call_indirect r7
    ; Indirect call through r7
    ; Register-based parameter passing for lambda
    ; Parameter 0 in HL
    PUSH HL       ; Save parameter for lambda
    EX (SP), HL   ; Swap function address with parameter
    EX DE, HL     ; Parameter in DE, function in HL
    EX (SP), HL   ; Function address on stack, parameter in HL
    POP DE        ; Function address in DE
    EX DE, HL     ; Swap: function in HL, parameter in DE
    PUSH DE       ; Push parameter
    CALL test_just_lambda_main_call_indirect_0
    JR test_just_lambda_main_call_indirect_end_0
test_just_lambda_main_call_indirect_0:
    JP (HL)       ; Jump to function address
test_just_lambda_main_call_indirect_end_0:
    POP DE        ; Clean up parameter
    ; store result, r8
    LD ($F00A), HL
    ; r9 = load result
    LD HL, ($F00A)
    ; return r9
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
