; MinZ generated code
; Generated: 2025-07-26 13:15:42


; Code section
    ORG $8000


; Function: ...examples.test_loop_ref.main
...examples.test_loop_ref.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH DE
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F004), A
    ; store , r2
    LD HL, ($F004)
    LD ($F002), HL
    ; loop_1:
loop_1:
    ; r3 = load i
    LD HL, ($F000)
    LD ($F006), HL
    ; r4 = 10
    LD A, 10
    LD ($F008), A
    ; r5 = r3 < r4
    LD HL, ($F006)
    LD D, H
    LD E, L
    LD HL, ($F008)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F00A), HL
    ; jump_if_not r5, end_loop_2
    LD A, ($F00A)
    OR A
    JP Z, end_loop_2
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F00C), A
    ; Load array element (...examples.test_loop_ref.Counter)
    LD HL, ($F00E)
    PUSH HL
    LD HL, ($F010)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F012), A
    ; Store to field value (offset 0)
    LD HL, ($F012)
    PUSH HL
    LD HL, ($F00C)
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r10 = load i
    LD HL, ($F000)
    LD ($F014), HL
    ; r11 = 5
    LD A, 5
    LD ($F016), A
    ; r12 = r10 + r11
    LD HL, ($F014)
    LD D, H
    LD E, L
    LD HL, ($F016)
    ADD HL, DE
    LD ($F018), HL
    ; Load array element (...examples.test_loop_ref.Counter)
    LD HL, ($F01A)
    PUSH HL
    LD HL, ($F01C)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F01E), A
    ; Store to field max (offset 1)
    LD HL, ($F01E)
    LD DE, 1
    ADD HL, DE
    PUSH HL
    LD HL, ($F018)
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; INC (optimized from ADD 1)
    LD HL, ($F020)
    INC HL
    LD ($F024), HL
    ; store i, r18
    LD HL, ($F024)
    LD ($F002), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; Load table base address
    LD HL, ($F026)
    LD ($F028), HL
    ; Load table base for end calculation
    LD HL, ($F026)
    LD ($F02A), HL
    ; Calculate table end (+ 10 elements * 2 bytes)
    LD HL, ($F02A)
    LD DE, 20
    ADD HL, DE
    LD ($F02A), HL
    ; Load loop counter
    LD A, 10
    LD ($F02C), A
    ; Check if reached end of table
    LD HL, ($F028)
    LD D, H
    LD E, L
    LD HL, ($F02A)
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, ($F02E)
    OR A
    JP NZ, loop_end_4
    ; r24 = load counter
    LD HL, ($F000)
    LD ($F030), HL
    ; Load field value (offset 0)
    LD HL, ($F030)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F032), HL
    ; r26 = load counter
    LD HL, ($F000)
    LD ($F034), HL
    ; Load field max (offset 1)
    LD HL, ($F034)
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F036), HL
    ; r28 = r25 < r27
    LD HL, ($F032)
    LD D, H
    LD E, L
    LD HL, ($F036)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD ($F038), HL
    ; jump_if_not r28, else_5
    LD A, ($F038)
    OR A
    JP Z, else_5
    ; INC (optimized from ADD 1)
    LD HL, ($F03C)
    INC HL
    LD ($F040), HL
    ; r33 = load counter
    LD HL, ($F000)
    LD ($F042), HL
    ; Store to field value (offset 0)
    LD HL, ($F042)
    PUSH HL
    LD HL, ($F040)
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; Advance to next element (+2 bytes)
    LD HL, ($F028)
    LD DE, 2
    ADD HL, DE
    LD ($F028), HL
    ; Decrement counter and loop if not zero
    LD A, ($F02C)
    LD B, A
    DJNZ loop_start_3
    LD A, B
    LD ($F02C), A
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F046), A
    ; store , r35
    LD HL, ($F046)
    LD ($F044), HL
    ; Load table base address
    LD HL, ($F048)
    LD ($F04A), HL
    ; Load table base for end calculation
    LD HL, ($F048)
    LD ($F04C), HL
    ; Calculate table end (+ 10 elements * 2 bytes)
    LD HL, ($F04C)
    LD DE, 20
    ADD HL, DE
    LD ($F04C), HL
    ; Load loop counter
    LD A, 10
    LD ($F04E), A
    ; Check if reached end of table
    LD HL, ($F04A)
    LD D, H
    LD E, L
    LD HL, ($F04C)
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, ($F050)
    OR A
    JP NZ, loop_end_8
    ; r41 = load counter
    LD HL, ($F000)
    LD ($F052), HL
    ; Load field value (offset 0)
    LD HL, ($F052)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F054), HL
    ; r43 = load counter
    LD HL, ($F000)
    LD ($F056), HL
    ; Load field max (offset 1)
    LD HL, ($F056)
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F058), HL
    ; r45 = r42 == r44
    LD HL, ($F054)
    LD D, H
    LD E, L
    LD HL, ($F058)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    LD ($F05A), HL
    ; jump_if_not r45, else_9
    LD A, ($F05A)
    OR A
    JP Z, else_9
    ; INC (optimized from ADD 1)
    LD HL, ($F05C)
    INC HL
    LD ($F060), HL
    ; store at_max, r48
    LD HL, ($F060)
    LD ($F044), HL
    ; jump end_if_10
    JP end_if_10
    ; else_9:
else_9:
    ; end_if_10:
end_if_10:
    ; Advance to next element (+2 bytes)
    LD HL, ($F04A)
    LD DE, 2
    ADD HL, DE
    LD ($F04A), HL
    ; Decrement counter and loop if not zero
    LD A, ($F04E)
    LD B, A
    DJNZ loop_start_7
    LD A, B
    LD ($F04E), A
    ; return
    POP DE
    RET

    END main
