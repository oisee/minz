; MinZ generated code
; Generated: 2025-08-07 14:17:50


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci.fibonacci$u8
...examples.fibonacci.fibonacci$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.fibonacci.fibonacci$u8_param_n.op:
...examples.fibonacci.fibonacci$u8_param_n equ ...examples.fibonacci.fibonacci$u8_param_n.op + 1
    LD A, #00      ; Parameter n (gets patched)
    ; Register 2 already in A
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD E, B        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, ___examples_fibonacci_fibonacci_u8_le_true_0
    JP Z, ___examples_fibonacci_fibonacci_u8_le_true_0
    LD HL, 0       ; False
    JP ___examples_fibonacci_fibonacci_u8_le_done_0
___examples_fibonacci_fibonacci_u8_le_true_0:
    LD HL, 1       ; True
___examples_fibonacci_fibonacci_u8_le_done_0:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, ___examples_fibonacci_fibonacci_u8_else_1
    LD A, (...examples.fibonacci.fibonacci$u8_param_n)
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; jump end_if_2
    JP ___examples_fibonacci_fibonacci_u8_end_if_2
    ; else_1:
___examples_fibonacci_fibonacci_u8_else_1:
    ; end_if_2:
___examples_fibonacci_fibonacci_u8_end_if_2:
    ; r7 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; store a, r7
    LD ($F00C), HL
    ; r9 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; store b, r9
    LD ($F010), HL
    ; r11 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store i, r11
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD ($F014), A
    ; loop_3:
___examples_fibonacci_fibonacci_u8_loop_3:
    ; r12 = load i
    LD A, ($F014)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    LD A, (...examples.fibonacci.fibonacci$u8_param_n)
    LD ($F01A), A     ; Virtual register 13 to memory
    ; r14 = r12 <= r13
    LD HL, ($F01A)    ; Virtual register 13 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, ___examples_fibonacci_fibonacci_u8_le_true_1
    JP Z, ___examples_fibonacci_fibonacci_u8_le_true_1
    LD HL, 0       ; False
    JP ___examples_fibonacci_fibonacci_u8_le_done_1
___examples_fibonacci_fibonacci_u8_le_true_1:
    LD HL, 1       ; True
___examples_fibonacci_fibonacci_u8_le_done_1:
    ; jump_if_not r14, end_loop_4
    LD A, H
    OR A
    JP Z, ___examples_fibonacci_fibonacci_u8_end_loop_4
    ; r16 = load a
    LD HL, ($F00C)
    ; r17 = load b
    LD HL, ($F010)
    ; Register 17 already in HL
    ; r18 = r16 + r17
    LD D, H
    LD E, L
    ; Register 17 already in HL
    ADD HL, DE
    LD ($F024), HL    ; Virtual register 18 to memory
    ; store temp, r18
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD ($F01E), HL
    ; r19 = load b
    LD HL, ($F010)
    LD ($F026), HL    ; Virtual register 19 to memory
    ; store a, r19
    LD HL, ($F026)    ; Virtual register 19 from memory
    LD ($F00C), HL
    ; r20 = load temp
    LD HL, ($F01E)
    ; store b, r20
    LD ($F010), HL
    ; r21 = load i
    LD A, ($F014)
    LD ($F02A), A     ; Virtual register 21 to memory
    ; r22 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r23 = r21 + r22
    LD HL, ($F02A)    ; Virtual register 21 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r23
    LD A, L
    LD ($F014), A
    ; jump loop_3
    JP ___examples_fibonacci_fibonacci_u8_loop_3
    ; end_loop_4:
___examples_fibonacci_fibonacci_u8_end_loop_4:
    ; r24 = load b
    LD HL, ($F010)
    ; Register 24 already in HL
    LD A, L

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
...examples.fibonacci.fibonacci$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
...examples.fibonacci.fibonacci$u8_store_addr.op:
...examples.fibonacci.fibonacci$u8_store_addr equ ...examples.fibonacci.fibonacci$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci.main
...examples.fibonacci.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; r3 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; unknown op 39
    ; Smart patch 'store_u8' for ...examples.fibonacci.fibonacci$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...examples.fibonacci.fibonacci$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...examples.fibonacci.fibonacci$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (...examples.fibonacci.fibonacci$u8_param_n+1), A   ; Patch parameter immediate
    ; r4 = call ...examples.fibonacci.fibonacci$u8
    ; Call to ...examples.fibonacci.fibonacci$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...examples.fibonacci.fibonacci$u8
    ; Register 4 already in HL
    ; store result, r4
    ; Register 4 already in HL
    LD ($F002), HL
    ; return
    RET

    END main
