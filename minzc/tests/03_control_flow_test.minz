// Test 3: Control Flow Structures
// Tests if/else, while, loop statements

fn test_if_else(x: u8) -> u8 {
    if x > 10 {
        return x * 2;
    } else if x > 5 {
        return x + 10;
    } else {
        return x;
    }
}

fn test_nested_if(a: u8, b: u8) -> u8 {
    if a > b {
        if a > 100 {
            return 100;
        } else {
            return a;
        }
    } else {
        if b > 100 {
            return 100;
        } else {
            return b;
        }
    }
}

fn test_while_loop() -> u8 {
    let mut count: u8 = 0;
    let mut sum: u8 = 0;
    
    while count < 10 {
        sum = sum + count;
        count = count + 1;
    }
    
    return sum;
}

fn test_nested_while() -> u16 {
    let mut i: u8 = 0;
    let mut total: u16 = 0;
    
    while i < 5 {
        let mut j: u8 = 0;
        while j < 3 {
            total = total + (i as u16) * (j as u16);
            j = j + 1;
        }
        i = i + 1;
    }
    
    return total;
}

fn test_loop_statement() -> u8 {
    let mut counter: u8 = 0;
    
    // Use while instead of loop for now
    while counter < 10 {
        counter = counter + 1;
    }
    
    return counter;
}

fn test_complex_control() -> u8 {
    let mut result: u8 = 0;
    let mut i: u8 = 0;
    
    while i < 10 {
        if i & 1 == 0 {  // Even number
            result = result + i;
        } else {
            result = result + 1;
        }
        i = i + 1;
    }
    
    return result;
}

fn main() -> void {
    let r1: u8 = test_if_else(7);
    let r2: u8 = test_nested_if(50, 75);
    let r3: u8 = test_while_loop();
    let r4: u16 = test_nested_while();
    let r5: u8 = test_loop_statement();
    let r6: u8 = test_complex_control();
}