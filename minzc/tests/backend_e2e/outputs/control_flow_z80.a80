; MinZ generated code
; Generated: 2025-08-06 16:51:43


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.backend_e2e.sources.control_flow.main
tests.backend_e2e.sources.control_flow.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD ($F004), A     ; Virtual register 2 to memory
    ; store i, r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; loop_1:
loop_1:
    ; r3 = load i
    LD A, ($F002)
    LD C, A         ; Store to physical register C
    ; r4 = 10
    LD A, 10
    LD D, A         ; Store to physical register D
    ; r5 = r3 < r4
    LD E, D        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, .lt_true_0
    LD HL, 0       ; False
    JP .lt_done_0
.lt_true_0:
    LD HL, 1       ; True
.lt_done_0:
    ; jump_if_not r5, end_loop_2
    LD A, E
    OR A
    JP Z, end_loop_2
    ; r6 = load i
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r7 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r8
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r9 = load i
    LD A, ($F002)
    LD ($F012), A     ; Virtual register 9 to memory
    ; r10 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r11 = r9 == r10
    LD HL, ($F012)    ; Virtual register 9 from memory
    EXX               ; Switch to shadow registers
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, .eq_true_1
    LD HL, 0       ; False
    JP .eq_done_1
.eq_true_1:
    LD HL, 1       ; True
.eq_done_1:
    ; jump_if_not r11, else_3
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_3
    ; r13 = 1
    LD A, 1
    ; Register 13 already in A
    ; store result, r13
    ; Register 13 already in A
    LD ($F018), A
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; r15 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store result, r15
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD ($F018), A
    ; end_if_4:
end_if_4:
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
