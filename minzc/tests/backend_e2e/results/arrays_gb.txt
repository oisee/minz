  ✅ Code generation successful

=== Generated Code Analysis ===
; MinZ Game Boy generated code
; Generated: 2025-08-06 16:51:43
; Target: Sharp LR35902 (Game Boy CPU)
; Note: No shadow registers or IX/IY on GB

; Using RGBDS assembler syntax


; Code section
SECTION "Code", ROM0[$0150]


; Function: tests.backend_e2e.sources.arrays.main
; SMC enabled
tests.backend_e2e.sources.arrays.main:
    ; Load var arr to r3
    LD A, 0
    ; Store to r4
    ; TODO: LOAD_INDEX
    ; Store r5 to var first
    ; Load var arr to r7
    LD A, 4
    ; Store to r8
    ; TODO: LOAD_INDEX
    ; Store r9 to var last
    ; Load var first to r11
    ; Load var last to r12
    ; ADD r11 + r12 -> r13
    ; TODO: Implement register allocation
    ; Store r13 to var sum
    RET

; Print helpers for Game Boy
print_char:
    ; Wait for VBlank
    LD HL, $FF44  ; LY register
.wait_vblank:
    LD A, [HL]
    CP 144
    JR C, .wait_vblank
    ; Character in A, write to tile map
    ; This is a simplified version
    RET

print_hex:
    PUSH AF
    SWAP A
    CALL print_nibble
    POP AF
    CALL print_nibble
  ⚠️  Assembler not available, skipping binary generation
