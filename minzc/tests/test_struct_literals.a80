; MinZ generated code
; Generated: 2025-07-31 20:52:19


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.test_struct_literals.create_vec3
tests.test_struct_literals.create_vec3:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    EX DE, HL     ; Get parameter y from DE
    POP HL        ; Get parameter z from stack
    LD ($F006), HL    ; Virtual register 3 to memory
    ; Allocate struct Vec3
    LD HL, -6
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; Register 4 already in HL
    ; r5 = param x
    ; Load parameter x
    ; Store to Vec3.x
    ; Register 4 already in HL
    PUSH HL
    LD H, D
    LD L, E
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r6 = param y
    ; Load parameter y
    ; Store to Vec3.y
    ; Register 4 already in HL
    LD DE, 2
    ADD HL, DE
    PUSH HL
    LD H, B
    LD L, C
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r7 = param z
    ; Load parameter z
    ; Store to Vec3.z
    ; Register 4 already in HL
    LD DE, 4
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return r4
    ; Register 4 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.test_struct_literals.test_basic_literal
tests.test_struct_literals.test_basic_literal:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Point
    LD HL, -4
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r2 = 100
    LD A, 100
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; Store to Point.x
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r3 = 200
    LD A, 200
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; Store to Point.y
    LD DE, 2
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return r1
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.test_struct_literals.test_nested_literal
tests.test_struct_literals.test_nested_literal:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Pixel
    LD HL, -7
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; Register 1 already in HL
    ; Allocate struct Point
    LD HL, -4
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; Store to Point.x
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL
    ; Register 3 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r4 = 20
    LD A, 20
    LD L, A         ; Store to HL (low byte)
    ; Store to Point.y
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD DE, 2
    ADD HL, DE
    PUSH HL
    ; Register 4 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; Store to Pixel.pos
    ; Register 1 already in HL
    PUSH HL
    LD HL, ($F004)    ; Virtual register 2 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; Allocate struct Color
    LD HL, -3
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r6 = 255
    LD A, 255
    LD H, A         ; Store to physical register H
    ; Store to Color.r
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r7 = 128
    LD A, 128
    LD L, A         ; Store to physical register L
    ; Store to Color.g
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r8 = 64
    LD A, 64
    LD L, A         ; Store to HL (low byte)
    ; Store to Color.b
    LD DE, 2
    ADD HL, DE
    PUSH HL
    ; Register 8 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; Store to Pixel.color
    ; Register 1 already in HL
    LD DE, 4
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return r1
    ; Register 1 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.test_struct_literals.test_self_referential
tests.test_struct_literals.test_self_referential:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct ListNode
    LD HL, -3
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r2 = 42
    LD A, 42
    LD L, A         ; Store to HL (low byte)
    ; Store to ListNode.value
    PUSH HL
    ; Register 2 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return r1
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.test_struct_literals.test_complex_nested
tests.test_struct_literals.test_complex_nested:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Image
    LD HL, -10
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; Register 1 already in HL
    ; r2 = 320
    LD HL, 320
    ; Register 2 already in HL
    ; Store to Image.width
    ; Register 1 already in HL
    PUSH HL
    ; Register 2 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r3 = 200
    LD A, 200
    LD L, A         ; Store to HL (low byte)
    ; Store to Image.height
    ; Register 1 already in HL
    LD DE, 2
    ADD HL, DE
    PUSH HL
    ; Register 3 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; Allocate struct Point
    LD HL, -4
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; Register 4 already in HL
    ; r5 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; Store to Point.x
    ; Register 4 already in HL
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r6 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; Store to Point.y
    ; Register 4 already in HL
    LD DE, 2
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; Store to Image.origin
    ; Register 1 already in HL
    LD DE, 4
    ADD HL, DE
    PUSH HL
    ; Register 4 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return r1
    ; Register 1 already in HL
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
