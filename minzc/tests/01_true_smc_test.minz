// Test 1: TRUE SMC Parameter Passing
// Tests the revolutionary immediate operand patching optimization

fn add_numbers(a: u8, b: u8) -> u8 {
    return a + b;
}

fn multiply(x: u16, y: u16) -> u16 {
    return x * y;
}

fn triple_params(a: u8, b: u16, c: u8) -> u16 {
    return (a as u16) + b + (c as u16);
}

// Test nested calls with SMC
fn calculate(x: u8, y: u8) -> u16 {
    let sum: u8 = add_numbers(x, y);
    let doubled: u16 = multiply(sum as u16, 2);
    return doubled;
}

fn main() -> void {
    // Simple parameter passing
    let result1: u8 = add_numbers(5, 7);  // Should patch 5 and 7 into code
    
    // 16-bit parameters
    let result2: u16 = multiply(256, 3); // Should use 16-bit patches
    
    // Multiple parameters
    let result3: u16 = triple_params(10, 1000, 25);
    
    // Nested calls - tests SMC context preservation
    let result4: u16 = calculate(15, 20);
}