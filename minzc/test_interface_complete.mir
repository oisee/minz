; MinZ Intermediate Representation (MIR)
; Module: main

Function u8.print(self: u8) -> void
  Instructions:
      0: 12
      1: 77
      2: return

Function u16.print(self: u16) -> void
  Instructions:
      0: 12
      1: 78
      2: return

Function test_interface_complete.Point.print(self: test_interface_complete.Point) -> void
  Instructions:
      0: 83
      1: 82
      2: 12
      3: 13 ; Load field x (offset 0)
      4: r5 = call u8.print
      5: 83
      6: 82
      7: 12
      8: 13 ; Load field y (offset 1)
      9: r9 = call u8.print
     10: 83
     11: 82
     12: return

Function test_interface_complete.Circle.print(self: test_interface_complete.Circle) -> void
  Instructions:
      0: 83
      1: 82
      2: 12
      3: 13 ; Load field x (offset 0)
      4: r5 = call u8.print
      5: 83
      6: 82
      7: 12
      8: 13 ; Load field y (offset 1)
      9: r9 = call u8.print
     10: 83
     11: 82
     12: 12
     13: 13 ; Load field radius (offset 2)
     14: r13 = call u8.print
     15: 83
     16: 82
     17: return

Function test_interface_complete.Point.draw(self: test_interface_complete.Point) -> void
  Instructions:
      0: 83
      1: 82
      2: 12
      3: 13 ; Load field x (offset 0)
      4: r5 = call u8.print
      5: 83
      6: 82
      7: 12
      8: 13 ; Load field y (offset 1)
      9: r9 = call u8.print
     10: 83
     11: 82
     12: return

Function test_interface_complete.Circle.draw(self: test_interface_complete.Circle) -> void
  Instructions:
      0: 83
      1: 82
      2: 12
      3: 13 ; Load field x (offset 0)
      4: r5 = call u8.print
      5: 83
      6: 82
      7: 12
      8: 13 ; Load field y (offset 1)
      9: r9 = call u8.print
     10: 83
     11: 82
     12: 12
     13: 13 ; Load field radius (offset 2)
     14: r13 = call u8.print
     15: 83
     16: 82
     17: return

Function test_interface_complete.main() -> void
  @smc
  Locals:
    r1 = x: u8
    r3 = big: u16
    r5 = p: u16
    r9 = c: u16
  Instructions:
      0: r2 = 42
      1: store , r2
      2: r4 = 1000
      3: store , r4
      4: 60 ; Allocate struct Point
      5: r7 = 10
      6: 14 ; Store to Point.x
      7: r8 = 20
      8: 14 ; Store to Point.y
      9: store , r6
     10: 60 ; Allocate struct Circle
     11: r11 = 5
     12: 14 ; Store to Circle.x
     13: r12 = 15
     14: 14 ; Store to Circle.y
     15: r13 = 3
     16: 14 ; Store to Circle.radius
     17: store , r10
     18: 83
     19: 82
     20: r15 = load x
     21: r16 = call u8.print
     22: 83
     23: 82
     24: r18 = load big
     25: r19 = call u16.print
     26: 83
     27: 82
     28: r21 = load p
     29: r22 = call test_interface_complete.Point.print
     30: 83
     31: 82
     32: r24 = load c
     33: r25 = call test_interface_complete.Circle.print
     34: 83
     35: 82
     36: 83
     37: 82
     38: r28 = load p
     39: r29 = call test_interface_complete.Point.draw
     40: r30 = load c
     41: r31 = call test_interface_complete.Circle.draw
     42: 83
     43: 82
     44: return

