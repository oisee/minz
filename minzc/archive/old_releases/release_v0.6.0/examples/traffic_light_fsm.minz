// Traffic Light Finite State Machine - Elegant Pattern Matching Demo
// This showcases how natural state machines are with MinZ pattern matching

enum TrafficState {
    Red,
    Yellow, 
    Green,
    Flashing,
}

enum Event {
    Timer,
    Emergency,
    Reset,
}

// State transition function - this is the heart of our FSM
fun transition(current: TrafficState, event: Event) -> TrafficState {
    case current {
        TrafficState.Red => {
            case event {
                Event.Timer => TrafficState.Green,
                Event.Emergency => TrafficState.Flashing,
                _ => TrafficState.Red,
            }
        },
        TrafficState.Green => {
            case event {
                Event.Timer => TrafficState.Yellow,
                Event.Emergency => TrafficState.Flashing,
                _ => TrafficState.Green,
            }
        },
        TrafficState.Yellow => {
            case event {
                Event.Timer => TrafficState.Red,
                Event.Emergency => TrafficState.Flashing,
                _ => TrafficState.Yellow,
            }
        },
        TrafficState.Flashing => {
            case event {
                Event.Reset => TrafficState.Red,
                _ => TrafficState.Flashing,
            }
        },
    }
}

// Get timing for each state (in seconds)
fun get_timing(state: TrafficState) -> u16 {
    case state {
        TrafficState.Red => 30,      // 30 seconds
        TrafficState.Yellow => 5,    // 5 seconds
        TrafficState.Green => 25,    // 25 seconds
        TrafficState.Flashing => 1,  // 1 second blink
    }
}

// Get display color for state
fun get_color_code(state: TrafficState) -> u16 {
    case state {
        TrafficState.Red => 1,      // Red = 1
        TrafficState.Yellow => 2,   // Yellow = 2
        TrafficState.Green => 3,    // Green = 3
        TrafficState.Flashing => 4, // Flashing = 4
    }
}

// Traffic light controller simulation
fun simulate_traffic_light() -> void {
    let state = TrafficState.Red;
    let cycle_count = 0;
    
    @print("Traffic Light Simulation Starting...\n");
    
    // Simulate 10 cycles
    while (cycle_count < 10) {
        @print("Cycle ");
        @print(cycle_count);
        @print(": State ");
        @print(get_color_code(state));
        @print(" for ");
        @print(get_timing(state));
        @print(" seconds\n");
        
        // Normal timer event
        state = transition(state, Event.Timer);
        cycle_count = cycle_count + 1;
    }
    
    // Test emergency scenario
    @print("\nEMERGENCY! Switching to flashing...\n");
    state = transition(state, Event.Emergency);
    @print("Emergency state: ");
    @print(get_color_code(state));
    @print("\n");
    
    // Reset from emergency
    @print("Emergency over, resetting...\n");
    state = transition(state, Event.Reset);
    @print("Reset to state: ");
    @print(get_color_code(state));
    @print("\n");
}

fun main() -> void {
    simulate_traffic_light();
}