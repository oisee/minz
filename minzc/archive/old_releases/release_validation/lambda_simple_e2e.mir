; MinZ Intermediate Representation (MIR)
; Module: main

Function ......examples.lambda_simple_e2e.add_trad(x: u8, y: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: UNKNOWN_OP_33 ; Load from anchor y$imm0
      2: return

Function ......examples.lambda_simple_e2e.test_lambda$add_0(x: u8, y: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: UNKNOWN_OP_33 ; Load from anchor y$imm0
      2: return

Function ......examples.lambda_simple_e2e.test_lambda() -> u8
  @smc
  Instructions:
      0: r3 = call add
      1: return

Function ......examples.lambda_simple_e2e.test_double$double_1(x: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: UNKNOWN_OP_33 ; Load from anchor x$imm0
      2: return

Function ......examples.lambda_simple_e2e.test_double() -> u8
  @smc
  Instructions:
      0: r2 = call double
      1: return

Function ......examples.lambda_simple_e2e.test_chain$inc_2(x: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: return

Function ......examples.lambda_simple_e2e.test_chain$double_3(x: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: UNKNOWN_OP_33 ; Load from anchor x$imm0
      2: return

Function ......examples.lambda_simple_e2e.test_chain() -> u8
  @smc
  Locals:
    r1 = x: u8
    r3 = y: u16
    r6 = z: u16
  Instructions:
      0: r5 = call inc
      1: r8 = call double
      2: return

Function ......examples.lambda_simple_e2e.main() -> void
  @smc
  Locals:
    r1 = r1: u16
    r5 = r2: u16
    r7 = r3: u16
    r9 = r4: u16
  Instructions:
      0: r4 = call add_trad
      1: r6 = call test_lambda
      2: r8 = call test_double
      3: r10 = call test_chain
      4: return

