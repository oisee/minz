; MinZ Intermediate Representation (MIR)
; Module: main

Function ......examples.fibonacci_tail.fib_tail(n: u8, a: u16, b: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor n$imm0
      1: ......examples.fibonacci_tail.fib_tail_tail_loop: ; Tail recursion loop start
      2: UNKNOWN_OP_57
      3: jump_if_not r6, else_1
      4: UNKNOWN_OP_33 ; Load from anchor a$imm0
      5: return r7
      6: else_1:
      7: UNKNOWN_OP_33 ; Load from anchor n$imm0
      8: r9 = 1
      9: r10 = r8 == r9
     10: jump_if_not r10, else_3
     11: UNKNOWN_OP_33 ; Load from anchor b$imm0
     12: return r11
     13: else_3:
     14: UNKNOWN_OP_33 ; Load from anchor n$imm0
     15: UNKNOWN_OP_33 ; Load from anchor b$imm0
     16: UNKNOWN_OP_33 ; Load from anchor a$imm0
     17: UNKNOWN_OP_33 ; Load from anchor b$imm0
     18: jump ......examples.fibonacci_tail.fib_tail_tail_loop ; Tail recursion optimized to loop

Function ......examples.fibonacci_tail.fibonacci(n: u8) -> u16
  @smc
  @recursive
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor n$imm0
      1: r5 = call fib_tail
      2: return r5

Function ......examples.fibonacci_tail.main() -> void
  @smc
  @recursive
  Locals:
    r1 = result: u16
  Instructions:
      0: r3 = call fibonacci
      1: return

