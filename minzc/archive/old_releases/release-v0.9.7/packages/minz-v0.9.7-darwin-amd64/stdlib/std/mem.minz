// Standard library memory operations
module std.mem;

// Copy memory from source to destination
pub fn copy(dst: *mut u8, src: *u8, len: u16) -> void {
    let mut i: u16 = 0;
    while i < len {
        dst[i] = src[i];
        i = i + 1;
    }
}

// Fill memory with a byte value
pub fn fill(dst: *mut u8, value: u8, len: u16) -> void {
    let mut i: u16 = 0;
    while i < len {
        dst[i] = value;
        i = i + 1;
    }
}

// Compare two memory regions
pub fn compare(a: *u8, b: *u8, len: u16) -> i8 {
    let mut i: u16 = 0;
    while i < len {
        if a[i] < b[i] {
            return -1;
        } else if a[i] > b[i] {
            return 1;
        }
        i = i + 1;
    }
    return 0;
}

// Find first occurrence of byte in memory
pub fn find(mem: *u8, value: u8, len: u16) -> *u8 {
    let mut i: u16 = 0;
    while i < len {
        if mem[i] == value {
            return &mem[i];
        }
        i = i + 1;
    }
    return 0 as *u8;  // null pointer
}

// Swap two memory regions
pub fn swap(a: *mut u8, b: *mut u8, len: u16) -> void {
    let mut i: u16 = 0;
    while i < len {
        let temp = a[i];
        a[i] = b[i];
        b[i] = temp;
        i = i + 1;
    }
}