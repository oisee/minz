; MinZ generated code
; Generated: 2025-07-26 13:15:35


; Code section
    ORG $8000


; Function: ...examples.test_asm_simple.set_border
...examples.test_asm_simple.set_border:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm { ld a, 2
out (FE), a }
    ld a, 2
    out (FE), a
    ; return
    RET

; Function: ...examples.test_asm_simple.delay
...examples.test_asm_simple.delay:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm { ld b, 255
delay_loop:
djnz delay_loop }
    ld b, 255
delay_loop:
    djnz delay_loop
    ; return
    RET

; Function: ...examples.test_asm_simple.main
...examples.test_asm_simple.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r1 = call set_border
    CALL set_border
    LD ($F002), HL
    ; asm { ld a, 7
out (FE), a }
    ld a, 7
    out (FE), a
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F006), A
    ; store , r3
    LD HL, ($F006)
    LD ($F004), HL
    ; loop_1:
loop_1:
    ; r4 = load i
    LD HL, ($F000)
    LD ($F008), HL
    ; r5 = 10
    LD A, 10
    LD ($F00A), A
    ; r6 = r4 < r5
    LD HL, ($F008)
    LD D, H
    LD E, L
    LD HL, ($F00A)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F00C), HL
    ; jump_if_not r6, end_loop_2
    LD A, ($F00C)
    OR A
    JP Z, end_loop_2
    ; r7 = call delay
    CALL delay
    LD ($F00E), HL
    ; INC (optimized from ADD 1)
    LD HL, ($F010)
    INC HL
    LD ($F014), HL
    ; store i, r10
    LD HL, ($F014)
    LD ($F004), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    POP DE
    POP BC
    RET

    END main
