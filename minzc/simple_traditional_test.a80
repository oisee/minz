; MinZ generated code
; Generated: 2025-08-01 13:49:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: benchmarks.simple_traditional_test.double_it_traditional
benchmarks.simple_traditional_test.double_it_traditional:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
benchmarks.simple_traditional_test.double_it_traditional_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
; TSMC reference parameter ctx
ctx$immOP:
    LD HL, 0000      ; TSMC ref address for ctx
ctx$imm0 EQU ctx$immOP+1
    ; Register 4 already in HL
    ; Load field multiplier (offset 0)
    ; Register 4 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r6 = r3 * r5
    ; 8-bit multiplication
    ; Register 3 already in A
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return r6
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: benchmarks.simple_traditional_test.test_traditional
benchmarks.simple_traditional_test.test_traditional:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Context
    LD HL, -1
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r3 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; Store to Context.multiplier
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store , r2
    LD ($F002), HL
    ; r4 = 42
    LD A, 42
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: benchmarks.simple_traditional_test.main
benchmarks.simple_traditional_test.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = call test_traditional
    ; Call to test_traditional (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL benchmarks.simple_traditional_test.test_traditional
    ; Register 2 already in HL
    ; store , r2
    ; Register 2 already in HL
    LD ($F002), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
