; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   ...tests.test_nil.canvas: [4]u8

Function ...tests.test_nil.test_simple() -> void
  @smc
  Instructions:
      0: r1 = 5
      1: UNKNOWN_OP_71
      2: r3 = 0
      3: r4 = r2 + r3 ; Calculate array element address
      4: UNKNOWN_OP_64 ; Store to array[index] (u8)
      5: return

Function ...tests.test_nil.test_math() -> void
  @smc
  Locals:
    r1 = x: u8
    r3 = shift: u8
    r7 = mask: u8
  Instructions:
      0: r2 = 7
      1: store , r2
      2: r4 = load x
      3: r5 = 3
      4: r6 = r4 & r5
      5: store , r6
      6: r8 = 128
      7: r9 = load shift
      8: SHR
      9: store , r10
     10: r11 = load mask
     11: UNKNOWN_OP_71
     12: r13 = 0
     13: r14 = r12 + r13 ; Calculate array element address
     14: UNKNOWN_OP_64 ; Store to array[index] (u8)
     15: return

Function ...tests.test_nil.test_not() -> void
  @smc
  Locals:
    r1 = mask: u8
    r3 = inv: u8
  Instructions:
      0: r2 = 128
      1: store , r2
      2: r4 = load mask
      3: r5 = ~r4
      4: store , r5
      5: r6 = load inv
      6: UNKNOWN_OP_71
      7: r8 = 0
      8: r9 = r7 + r8 ; Calculate array element address
      9: UNKNOWN_OP_64 ; Store to array[index] (u8)
     10: return

Function ...tests.test_nil.main() -> void
  @smc
  Instructions:
      0: r1 = call test_simple
      1: r2 = call test_math
      2: r3 = call test_not
      3: return

