; MinZ Intermediate Representation (MIR)
; Module: main

Function ...test_crystal_comprehensive.fibonacci$u8(n: u8) -> u8
  @smc
  @recursive
  Instructions:
      0: TRUE_SMC_LOAD ; Load from anchor n$imm0
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_1
      4: TRUE_SMC_LOAD ; Load from anchor n$imm0
      5: return r5
      6: else_1:
      7: TRUE_SMC_LOAD ; Load from anchor n$imm0
      8: TRUE_SMC_LOAD ; Load from anchor n$imm0
      9: PATCH_TEMPLATE
     10: PATCH_TARGET
     11: PATCH_PARAM
     12: r12 = call ...test_crystal_comprehensive.fibonacci$u8
     13: TRUE_SMC_LOAD ; Load from anchor n$imm0
     14: TRUE_SMC_LOAD ; Load from anchor n$imm0
     15: PATCH_TEMPLATE
     16: PATCH_TARGET
     17: PATCH_PARAM
     18: r19 = call ...test_crystal_comprehensive.fibonacci$u8
     19: r20 = r12 + r19
     20: return r20

Function ...test_crystal_comprehensive.test_arithmetic() -> u8
  @smc
  Locals:
    r1 = a: u8
    r3 = b: u8
    r5 = c: u16
    r9 = d: u16
    r13 = e: u16
  Instructions:
      0: r17 = load e
      1: r18 = 5
      2: r19 = r17 - r18
      3: return r19

Function ...test_crystal_comprehensive.test_control_flow$u8(x: u8) -> bool
  @smc
  Instructions:
      0: TRUE_SMC_LOAD ; Load from anchor x$imm0
      1: r3 = 10
      2: r4 = r2 > r3
      3: jump_if_not r4, else_3
      4: r5 = 1
      5: return r5
      6: else_3:
      7: r6 = 0
      8: return r6

Function ...test_crystal_comprehensive.print_number$u8(n: u8) -> void
  @smc
  Instructions:
      0: PRINT_STRING_DIRECT ; Direct print "Number: " (8 chars)
      1: TRUE_SMC_LOAD ; Load from anchor n$imm0
      2: r0 = call print_u8_decimal ; Call runtime print_u8_decimal
      3: PRINT_STRING_DIRECT ; Direct print "
" (1 chars)
      4: return

Function ...test_crystal_comprehensive.main() -> void
  @smc
  @recursive
  Locals:
    r1 = result: u8
    r6 = fib: u8
    r13 = flag: bool
  Instructions:
      0: PATCH_TEMPLATE
      1: PATCH_TARGET
      2: PRINT_STRING_DIRECT ; Inlined: Direct print "Number: " (8 chars)
      3: LOAD_PARAM ; Inlined from ...test_crystal_comprehensive.print_number$u8
      4: r0 = call print_u8_decimal ; Inlined: Call runtime print_u8_decimal
      5: PRINT_STRING_DIRECT ; Inlined: Direct print "
" (1 chars)
      6: PATCH_TEMPLATE
      7: PATCH_TARGET
      8: PATCH_PARAM
      9: r9 = call ...test_crystal_comprehensive.fibonacci$u8
     10: PRINT_STRING_DIRECT ; Inlined: Direct print "Number: " (8 chars)
     11: LOAD_PARAM ; Inlined from ...test_crystal_comprehensive.print_number$u8
     12: r0 = call print_u8_decimal ; Inlined: Call runtime print_u8_decimal
     13: PRINT_STRING_DIRECT ; Inlined: Direct print "
" (1 chars)
     14: TRUE_SMC_LOAD ; Inlined: Load from anchor x$imm0
     15: r4 = 10 ; Inlined from ...test_crystal_comprehensive.test_control_flow$u8
     16: r5 = r3 > r4 ; Inlined from ...test_crystal_comprehensive.test_control_flow$u8
     17: jump_if_not r5, else_3 ; Inlined from ...test_crystal_comprehensive.test_control_flow$u8
     18: r16 = r6 ; Inlined return value
     19: else_3: ; Inlined from ...test_crystal_comprehensive.test_control_flow$u8
     20: r16 = r7 ; Inlined return value
     21: r17 = load flag
     22: jump_if_not r17, else_5
     23: LOAD_STRING
     24: PRINT_STRING ; Print "Test passed!
" (13 chars via loop)
     25: jump end_if_6
     26: else_5:
     27: end_if_6:
     28: return

