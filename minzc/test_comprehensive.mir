; MinZ Intermediate Representation (MIR)
; Module: main

Function ...test_iterator_comprehensive.main() -> void
  @smc
  Locals:
    r1 = numbers: [5]u8
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "=== Test 1: Just forEach ===
" (29 chars via loop)
      2: r3 = load numbers
      3: NOP ; DJNZ OPTIMIZED LOOP for array[5]
      4: r4 = 5 ; DJNZ counter = 5
      5: r5 = r3 ; Pointer to array start
      6: djnz_loop_1:
      7: UNKNOWN_OP_69 ; Load element via pointer
      8: r7 = call print_u8 ; Call print_u8
      9: INC ; Advance to next element
     10: UNKNOWN_OP_77 ; DJNZ - decrement and loop
     11: UNKNOWN_OP_88
     12: UNKNOWN_OP_86 ; Print "
=== Test 2: Just map ===
" (26 chars via loop)
     13: r9 = load numbers
     14: NOP ; DJNZ OPTIMIZED LOOP for array[5]
     15: r10 = 5 ; DJNZ counter = 5
     16: r11 = r9 ; Pointer to array start
     17: djnz_loop_2:
     18: UNKNOWN_OP_69 ; Load element via pointer
     19: r13 = call double ; Call double
     20: r14 = call print_u8 ; Call print_u8
     21: INC ; Advance to next element
     22: UNKNOWN_OP_77 ; DJNZ - decrement and loop
     23: UNKNOWN_OP_88
     24: UNKNOWN_OP_86 ; Print "
=== Test 3: Just filter ===
" (29 chars via loop)
     25: r16 = load numbers
     26: NOP ; DJNZ OPTIMIZED LOOP for array[5]
     27: r17 = 5 ; DJNZ counter = 5
     28: r18 = r16 ; Pointer to array start
     29: djnz_loop_3:
     30: UNKNOWN_OP_69 ; Load element via pointer
     31: r20 = call is_even ; Call is_even
     32: jump_if_not r20, filter_continue_4 ; Skip if filter predicate is false
     33: r21 = call print_u8 ; Call print_u8
     34: filter_continue_4:
     35: INC ; Advance to next element
     36: UNKNOWN_OP_77 ; DJNZ - decrement and loop
     37: UNKNOWN_OP_88
     38: UNKNOWN_OP_86 ; Print "
=== Test 4: map then filter ===
" (33 chars via loop)
     39: r23 = load numbers
     40: NOP ; DJNZ OPTIMIZED LOOP for array[5]
     41: r24 = 5 ; DJNZ counter = 5
     42: r25 = r23 ; Pointer to array start
     43: djnz_loop_5:
     44: UNKNOWN_OP_69 ; Load element via pointer
     45: r27 = call double ; Call double
     46: r28 = call gt_5 ; Call gt_5
     47: jump_if_not r28, filter_continue_6 ; Skip if filter predicate is false
     48: r29 = call print_u8 ; Call print_u8
     49: filter_continue_6:
     50: INC ; Advance to next element
     51: UNKNOWN_OP_77 ; DJNZ - decrement and loop
     52: UNKNOWN_OP_88
     53: UNKNOWN_OP_86 ; Print "
=== Test 5: filter then map ===
" (33 chars via loop)
     54: r31 = load numbers
     55: NOP ; DJNZ OPTIMIZED LOOP for array[5]
     56: r32 = 5 ; DJNZ counter = 5
     57: r33 = r31 ; Pointer to array start
     58: djnz_loop_7:
     59: UNKNOWN_OP_69 ; Load element via pointer
     60: r35 = call is_odd ; Call is_odd
     61: jump_if_not r35, filter_continue_8 ; Skip if filter predicate is false
     62: r36 = call triple ; Call triple
     63: r37 = call print_u8 ; Call print_u8
     64: filter_continue_8:
     65: INC ; Advance to next element
     66: UNKNOWN_OP_77 ; DJNZ - decrement and loop
     67: UNKNOWN_OP_88
     68: UNKNOWN_OP_86 ; Print "
=== Test 6: Multiple filters ===
" (34 chars via loop)
     69: r39 = load numbers
     70: NOP ; DJNZ OPTIMIZED LOOP for array[5]
     71: r40 = 5 ; DJNZ counter = 5
     72: r41 = r39 ; Pointer to array start
     73: djnz_loop_9:
     74: UNKNOWN_OP_69 ; Load element via pointer
     75: r43 = call gt_1 ; Call gt_1
     76: jump_if_not r43, filter_continue_10 ; Skip if filter predicate is false
     77: r44 = call lt_5 ; Call lt_5
     78: jump_if_not r44, filter_continue_11 ; Skip if filter predicate is false
     79: r45 = call print_u8 ; Call print_u8
     80: filter_continue_10:
     81: filter_continue_11:
     82: INC ; Advance to next element
     83: UNKNOWN_OP_77 ; DJNZ - decrement and loop
     84: UNKNOWN_OP_88
     85: UNKNOWN_OP_86 ; Print "
=== Test 7: Multiple maps ===
" (31 chars via loop)
     86: r47 = load numbers
     87: NOP ; DJNZ OPTIMIZED LOOP for array[5]
     88: r48 = 5 ; DJNZ counter = 5
     89: r49 = r47 ; Pointer to array start
     90: djnz_loop_12:
     91: UNKNOWN_OP_69 ; Load element via pointer
     92: r51 = call double ; Call double
     93: r52 = call add_one ; Call add_one
     94: r53 = call print_u8 ; Call print_u8
     95: INC ; Advance to next element
     96: UNKNOWN_OP_77 ; DJNZ - decrement and loop
     97: UNKNOWN_OP_88
     98: UNKNOWN_OP_86 ; Print "
=== Test 8: Complex chain ===
" (31 chars via loop)
     99: r55 = load numbers
    100: NOP ; DJNZ OPTIMIZED LOOP for array[5]
    101: r56 = 5 ; DJNZ counter = 5
    102: r57 = r55 ; Pointer to array start
    103: djnz_loop_13:
    104: UNKNOWN_OP_69 ; Load element via pointer
    105: r59 = call double ; Call double
    106: r60 = call gt_5 ; Call gt_5
    107: jump_if_not r60, filter_continue_14 ; Skip if filter predicate is false
    108: r61 = call add_one ; Call add_one
    109: r62 = call is_odd ; Call is_odd
    110: jump_if_not r62, filter_continue_15 ; Skip if filter predicate is false
    111: r63 = call print_u8 ; Call print_u8
    112: filter_continue_14:
    113: filter_continue_15:
    114: INC ; Advance to next element
    115: UNKNOWN_OP_77 ; DJNZ - decrement and loop
    116: UNKNOWN_OP_88
    117: UNKNOWN_OP_86 ; Print "
=== Test 9: With iter() ===
" (29 chars via loop)
    118: r65 = load numbers
    119: NOP ; DJNZ OPTIMIZED LOOP for array[5]
    120: r66 = 5 ; DJNZ counter = 5
    121: r67 = r65 ; Pointer to array start
    122: djnz_loop_16:
    123: UNKNOWN_OP_69 ; Load element via pointer
    124: r69 = call double ; Call double
    125: r70 = call print_u8 ; Call print_u8
    126: INC ; Advance to next element
    127: UNKNOWN_OP_77 ; DJNZ - decrement and loop
    128: return

Function ...test_iterator_comprehensive.double(x: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 2
      2: r4 = r2 * r3
      3: return r4

Function ...test_iterator_comprehensive.triple(x: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 3
      2: r4 = r2 * r3
      3: return r4

Function ...test_iterator_comprehensive.add_one(x: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 1
      2: r4 = r2 + r3
      3: return r4

Function ...test_iterator_comprehensive.is_even(x: u8) -> bool
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 1
      2: r4 = r2 & r3
      3: r5 = 0
      4: r6 = r4 == r5
      5: return r6

Function ...test_iterator_comprehensive.is_odd(x: u8) -> bool
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 1
      2: r4 = r2 & r3
      3: r5 = 1
      4: r6 = r4 == r5
      5: return r6

Function ...test_iterator_comprehensive.gt_1(x: u8) -> bool
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 1
      2: r4 = r2 > r3
      3: return r4

Function ...test_iterator_comprehensive.lt_5(x: u8) -> bool
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 5
      2: r4 = r2 < r3
      3: return r4

Function ...test_iterator_comprehensive.gt_5(x: u8) -> bool
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 5
      2: r4 = r2 > r3
      3: return r4

Function ...test_iterator_comprehensive.print_u8(x: u8) -> void
  @smc
  Instructions:
      0: return

