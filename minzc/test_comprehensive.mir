; MinZ Intermediate Representation (MIR)
; Module: main

Function zx.screen.get_cursor() -> u8
  @smc
  Instructions:
      0: return

Function zx.screen.init_text() -> void
  @smc
  Instructions:
      0: r1 = 0
      1: r2 = 0
      2: r3 = call zx.screen.set_cursor
      3: r4 = 7
      4: r5 = 0
      5: r6 = 0
      6: r7 = 0
      7: r8 = call zx.screen.set_text_attr
      8: return

Function test_comprehensive.add$u8$u8(a: u8, b: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r5 = r3 + r4
      3: return r5

Function test_comprehensive.main$double_0(x: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r2 = 2
      2: r3 = r1 * r2
      3: return

Function test_comprehensive.main() -> void
  @smc
  Locals:
    r1 = greeting: String
    r4 = sum: u16
    r10 = result: u16
    r15 = numbers: [10]u8
  Instructions:
      0: LOAD_LABEL ; Load string "Hello, MinZ!"
      1: store greeting, r2
      2: LOAD_STRING
      3: PRINT_STRING ; Print "Testing MinZ compiler" (21 chars via loop)
      4: r5 = 5
      5: r6 = 3
      6: r7 = 5
      7: r8 = 3
      8: PATCH_TEMPLATE
      9: PATCH_TARGET
     10: PATCH_PARAM
     11: PATCH_PARAM
     12: r9 = call test_comprehensive.add$u8$u8
     13: store sum, r9
     14: r11 = load sum
     15: PATCH_TEMPLATE
     16: PATCH_TARGET
     17: PATCH_PARAM
     18: r12 = call test_comprehensive.main$double_0
     19: store result, r12
     20: r13 = 2
     21: r14 = call zx.screen.set_border
     22: r16 = 42
     23: r17 = load numbers
     24: r18 = 0
     25: r19 = r17 + r18 ; Calculate array element address
     26: STORE_PTR ; Store to array[index] (u8)
     27: r20 = load result
     28: r21 = 10
     29: r22 = r20 > r21
     30: jump_if_not r22, else_1
     31: LOAD_STRING
     32: PRINT_STRING ; Print "Result is big!" (14 chars via loop)
     33: jump end_if_2
     34: else_1:
     35: LOAD_STRING
     36: PRINT_STRING ; Print "Result is small" (15 chars via loop)
     37: end_if_2:
     38: r25 = 0
     39: r26 = 5
     40: r27 = r25 ; Initialize loop variable i
     41: for_loop_3:
     42: r28 = r27 < r26 ; Check i < end
     43: jump_if_not r28, for_end_4
     44: r29 = load i
     45: r30 = load numbers
     46: r31 = load i
     47: r32 = r30 + r31 ; Calculate array element address
     48: STORE_PTR ; Store to array[index] (u8)
     49: r33 = 1
     50: r27 = r27 + r33 ; Increment i
     51: jump for_loop_3
     52: for_end_4:
     53: return

