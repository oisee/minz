; MinZ generated code
; Generated: 2025-08-05 12:50:52


; Data section
    ORG $F000

test_viz.counter:
    DB 0
str_0:
    DB 15    ; Length
    DB "Factorial(5) = "
str_1:
    DB 16    ; Length
    DB "Fibonacci(10) = "

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_viz.factorial
test_viz.factorial:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
test_viz.factorial_param_n:
    LD HL, #0000   ; SMC parameter n (u8->u16)
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    LD A, (test_viz.factorial_param_n)
    LD E, A         ; Store to physical register E
    LD A, (test_viz.factorial_param_n)
    LD H, A         ; Store to physical register H
    ; r8 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r9 = r7 - r8
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; r10 = call factorial
    ; Call to factorial (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_viz.factorial
    ; r11 = r6 * r10
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; return r11
    RET
    ; end_if_2:
end_if_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_viz.fibonacci
test_viz.fibonacci:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_viz.fibonacci_param_n:
    LD HL, #0000   ; SMC parameter n (u8->u16)
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r4 = r2 <= r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L4
    JP Z, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    LD ($F008), HL    ; Virtual register 4 to memory
    ; jump_if_not r4, else_3
    LD A, ($F008)     ; Virtual register 4 from memory
    OR A
    JP Z, else_3
    LD A, (test_viz.fibonacci_param_n)
    LD ($F00A), A     ; Virtual register 5 to memory
    ; return r5
    LD HL, ($F00A)    ; Virtual register 5 from memory
    RET
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; r7 = 0
    LD A, 0
    LD ($F00E), A     ; Virtual register 7 to memory
    ; store , r7
    LD A, ($F00E)     ; Virtual register 7 from memory
    LD ($F00C), A
    ; r9 = 1
    LD A, 1
    LD ($F012), A     ; Virtual register 9 to memory
    ; store , r9
    LD A, ($F012)     ; Virtual register 9 from memory
    LD ($F010), A
    ; r11 = 2
    LD A, 2
    LD ($F016), A     ; Virtual register 11 to memory
    ; store , r11
    LD A, ($F016)     ; Virtual register 11 from memory
    LD ($F014), A
    ; loop_5:
loop_5:
    ; r12 = load i
    LD A, ($F014)
    LD ($F018), A     ; Virtual register 12 to memory
    LD A, (test_viz.fibonacci_param_n)
    LD D, A         ; Store to physical register D
    ; r14 = r12 <= r13
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L6
    JP Z, .L6
    LD HL, 0
    JP .L7
.L6:
    LD HL, 1
.L7:
    ; jump_if_not r14, end_loop_6
    LD A, D
    OR A
    JP Z, end_loop_6
    ; r16 = load a
    LD A, ($F00C)
    ; Register 16 already in A
    ; r17 = load b
    LD A, ($F010)
    LD ($F022), A     ; Virtual register 17 to memory
    ; r18 = r16 + r17
    LD D, H
    LD E, L
    LD HL, ($F022)    ; Virtual register 17 from memory
    ADD HL, DE
    ; store , r18
    LD A, L
    LD ($F01E), A
    ; r19 = load b
    LD A, ($F010)
    LD H, A         ; Store to physical register H
    ; store a, r19
    LD A, H
    LD ($F00C), A
    ; r20 = load temp
    LD A, ($F01E)
    LD H, A         ; Store to physical register H
    ; store b, r20
    LD A, H
    LD ($F010), A
    ; r21 = load i
    LD A, ($F014)
    ; Register 21 already in A
    ; r22 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r23 = r21 + r22
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r23
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD ($F014), A
    ; jump loop_5
    JP loop_5
    ; end_loop_6:
end_loop_6:
    ; r24 = load b
    LD A, ($F010)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; return r24
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_viz.main
test_viz.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r3 = call factorial
    ; Call to factorial (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_viz.factorial
    ; store , r3
    ; Register 3 already in A
    LD ($F002), A
    ; r5 = 10
    LD A, 10
    LD C, A         ; Store to physical register C
    ; r6 = call fibonacci
    ; Call to fibonacci (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_viz.fibonacci
    ; store , r6
    LD A, C
    LD ($F008), A
    ; r7 = string(str_0)
    LD HL, str_0
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; Print "Factorial(5) = " (15 chars via loop)
    LD HL, ($F00E)    ; Virtual register 7 from memory
    CALL print_string
    ; r8 = load result1
    LD A, ($F002)
    ; Register 8 already in A
    ; print_u8(r8)
    ; Register 8 already in A
    CALL print_u8_decimal
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; r9 = string(str_1)
    LD HL, str_1
    LD ($F012), HL    ; Virtual register 9 to memory
    ; Print "Fibonacci(10) = " (16 chars via loop)
    LD HL, ($F012)    ; Virtual register 9 from memory
    CALL print_string
    ; r10 = load result2
    LD A, ($F008)
    ; Register 10 already in A
    ; print_u8(r10)
    ; Register 10 already in A
    CALL print_u8_decimal
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; r11 = load test_viz.counter
    LD HL, ($F000)
    ; r12 = 1
    LD A, 1
    ; Register 12 already in A
    ; r13 = r11 + r12
    LD D, H
    LD E, L
    ADD HL, DE
    ; store counter, r13
    LD ($F000), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
