; MinZ generated code
; Generated: 2025-08-03 16:05:06


; Data section
    ORG $F000

str_0:
    DB 22    ; Length
    DB "=== Simple forEach ==="
str_1:
    DB 30    ; Length
    DB 10
    DB "=== Chained map + forEach ==="
str_2:
    DB 29    ; Length
    DB 10
    DB "=== With explicit iter() ==="

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_visualization.main
...test_iterator_visualization.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = string(str_0)
    LD HL, str_0
    ; Print "=== Simple forEach ===" (22 chars via loop)
    CALL print_string
    ; r3 = load numbers
    LD HL, ($F002)
    ; Iterator index = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; Array length = 5
    LD A, 5
    LD D, A         ; Store to physical register D
    ; iter_loop_1:
iter_loop_1:
    ; Check index < length
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r8, iter_end_2
    LD A, E
    OR A
    JP Z, iter_end_2
    ; Calculate element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; Load array element
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_visualization.print_u8
    ; r10 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; Increment index
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump iter_loop_1
    JP iter_loop_1
    ; iter_end_2:
iter_end_2:
    ; r11 = string(str_1)
    LD HL, str_1
    ; Print "
=== Chained map + forEach ===" (30 chars via loop)
    CALL print_string
    ; r12 = load numbers
    LD HL, ($F002)
    LD D, H
    LD E, L
    ; Iterator index = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; Array length = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; iter_loop_3:
iter_loop_3:
    ; Check index < length
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; Register 17 already in HL
    ; jump_if_not r17, iter_end_4
    LD A, L
    OR A
    JP Z, iter_end_4
    ; Calculate element address
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ADD HL, DE
    ; Load array element
    LD A, (HL)
    LD ($F01E), A     ; Virtual register 15 to memory
    ; Call double
    ; Call to double (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F01E)    ; Virtual register 15 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_visualization.double
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_visualization.print_u8
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r20 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; Increment index
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump iter_loop_3
    JP iter_loop_3
    ; iter_end_4:
iter_end_4:
    ; r21 = string(str_2)
    LD HL, str_2
    ; Print "
=== With explicit iter() ===" (29 chars via loop)
    CALL print_string
    ; r22 = load numbers
    LD HL, ($F002)
    LD B, H
    LD C, L
    ; Iterator index = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; Array length = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; iter_loop_5:
iter_loop_5:
    ; Check index < length
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; Register 27 already in HL
    ; jump_if_not r27, iter_end_6
    LD A, L
    OR A
    JP Z, iter_end_6
    ; Calculate element address
    LD H, B
    LD L, C
    LD D, H
    LD E, L
    ADD HL, DE
    ; Load array element
    LD A, (HL)
    LD ($F032), A     ; Virtual register 25 to memory
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F032)    ; Virtual register 25 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_visualization.print_u8
    ; r29 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Increment index
    LD D, H
    LD E, L
    ; Register 29 already in HL
    ADD HL, DE
    ; jump iter_loop_5
    JP iter_loop_5
    ; iter_end_6:
iter_end_6:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_visualization.double
...test_iterator_visualization.double:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_visualization.double_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_6
.mul_loop_6:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_6
.mul_done_6:
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_visualization.print_u8
...test_iterator_visualization.print_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
