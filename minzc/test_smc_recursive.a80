; MinZ generated code
; Generated: 2025-07-27 08:37:19


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_smc_recursive.factorial_smc
...examples.test_smc_recursive.factorial_smc:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; unknown op 12
    ; Load parameter n
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    LD SP, IX
    POP IX
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; unknown op 12
    ; Load parameter n
    ; unknown op 12
    ; Load parameter n
    ; r8 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r9 = r7 - r8
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    EXX               ; Switch to shadow registers
    ; r10 = call factorial_smc
    ; Call to factorial_smc (args: 1)
    ; Register-based parameter passing
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    ; Parameter n in A
    ; Found function, UsesTrueSMC=false
    CALL factorial_smc
    EXX               ; Switch to shadow registers
    ; r11 = r6 * r10
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    EXX               ; Switch to shadow registers
    ; return r11
    EXX               ; Switch to shadow registers
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_smc_recursive.fib_smc
...examples.test_smc_recursive.fib_smc:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; unknown op 12
    ; Load parameter n
    ; r3 = 1
    LD A, 1
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 <= r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L4
    JP Z, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    LD ($F008), HL    ; Virtual register 4 to memory
    ; jump_if_not r4, else_3
    LD A, ($F008)     ; Virtual register 4 from memory
    OR A
    JP Z, else_3
    ; unknown op 12
    ; Load parameter n
    ; return r5
    EXX               ; Switch to shadow registers
    LD SP, IX
    POP IX
    RET
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; unknown op 12
    ; Load parameter n
    ; r7 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r8 = r6 - r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; r9 = call fib_smc
    ; Call to fib_smc (args: 1)
    ; Register-based parameter passing
    LD A, B
    ; Parameter n in A
    ; Found function, UsesTrueSMC=false
    CALL fib_smc
    EXX               ; Switch to shadow registers
    ; unknown op 12
    ; Load parameter n
    ; r11 = 2
    LD A, 2
    LD E, A         ; Store to physical register E
    ; r12 = r10 - r11
    EXX               ; Switch to shadow registers
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; r13 = call fib_smc
    ; Call to fib_smc (args: 1)
    ; Register-based parameter passing
    LD A, E
    ; Parameter n in A
    ; Found function, UsesTrueSMC=false
    CALL fib_smc
    ; r14 = r9 + r13
    EXX               ; Switch to shadow registers
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r14
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_smc_recursive.many_params_recursive
...examples.test_smc_recursive.many_params_recursive:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.test_smc_recursive.many_params_recursive_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; r7 = 0
    LD A, 0
    ; Register 7 already in A
    ; r8 = r6 == r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L6
    LD HL, 0
    JP .L7
.L6:
    LD HL, 1
.L7:
    LD ($F010), HL    ; Virtual register 8 to memory
    ; jump_if_not r8, else_5
    LD A, ($F010)     ; Virtual register 8 from memory
    OR A
    JP Z, else_5
...examples.test_smc_recursive.many_params_recursive_param_b:
    LD HL, #0000   ; SMC parameter b (u8->u16)
    LD ($F012), HL    ; Virtual register 9 to memory
...examples.test_smc_recursive.many_params_recursive_param_c:
    LD HL, #0000   ; SMC parameter c (u8->u16)
    LD ($F014), HL    ; Virtual register 10 to memory
    ; r11 = r9 + r10
    LD HL, ($F012)    ; Virtual register 9 from memory
    LD D, H
    LD E, L
    LD HL, ($F014)    ; Virtual register 10 from memory
    ADD HL, DE
    LD ($F016), HL    ; Virtual register 11 to memory
...examples.test_smc_recursive.many_params_recursive_param_d:
    LD HL, #0000   ; SMC parameter d (u8->u16)
    ; r13 = r11 + r12
    LD HL, ($F016)    ; Virtual register 11 from memory
    LD D, H
    LD E, L
    ADD HL, DE
...examples.test_smc_recursive.many_params_recursive_param_e:
    LD HL, #0000   ; SMC parameter e (u8->u16)
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; r15 = r13 + r14
    LD D, H
    LD E, L
    LD HL, ($F01C)    ; Virtual register 14 from memory
    ADD HL, DE
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; return r15
    LD HL, ($F01E)    ; Virtual register 15 from memory
    RET
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    LD A, (...examples.test_smc_recursive.many_params_recursive_param_a)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    LD A, (...examples.test_smc_recursive.many_params_recursive_param_a)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r18 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r19 = r17 - r18
    EXX               ; Switch to shadow registers
    LD D, H
    LD E, L
    EXX               ; Switch to shadow registers
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    EXX               ; Switch to shadow registers
    LD A, (...examples.test_smc_recursive.many_params_recursive_param_b)
    LD L, A         ; Store to physical register L
    LD A, (...examples.test_smc_recursive.many_params_recursive_param_c)
    LD L, A         ; Store to physical register L
    LD A, (...examples.test_smc_recursive.many_params_recursive_param_d)
    LD E, A         ; Store to physical register E
    LD A, (...examples.test_smc_recursive.many_params_recursive_param_e)
    LD D, A         ; Store to physical register D
    ; r24 = call many_params_recursive
    ; Call to many_params_recursive (args: 5)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 4
    PUSH HL       ; Argument 3
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    EXX               ; Switch to shadow registers
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL many_params_recursive
    ; r25 = r16 + r24
    EXX               ; Switch to shadow registers
    LD D, H
    LD E, L
    ADD HL, DE
    EXX               ; Switch to shadow registers
    ; return r25
    EXX               ; Switch to shadow registers
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_smc_recursive.main
...examples.test_smc_recursive.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r3 = call factorial_smc
    ; Call to factorial_smc (args: 1)
    ; Register-based parameter passing
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    ; Parameter n in A
    ; Found function, UsesTrueSMC=false
    CALL factorial_smc
    EXX               ; Switch to shadow registers
    ; store , r3
    EXX               ; Switch to shadow registers
    LD ($F002), HL
    ; r5 = 10
    LD A, 10
    ; Register 5 already in A
    ; r6 = call fib_smc
    ; Call to fib_smc (args: 1)
    ; Register-based parameter passing
    ; Register 5 already in A
    ; Parameter n in A
    ; Found function, UsesTrueSMC=false
    CALL fib_smc
    ; store , r6
    LD ($F008), HL
    ; r8 = 3
    LD A, 3
    LD C, A         ; Store to physical register C
    ; r9 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r10 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r11 = 3
    LD A, 3
    LD D, A         ; Store to physical register D
    ; r12 = 4
    LD A, 4
    LD ($F018), A     ; Virtual register 12 to memory
    ; r13 = call many_params_recursive
    ; Call to many_params_recursive (args: 5)
    ; Stack-based parameter passing
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 4
    PUSH HL       ; Argument 3
    EXX               ; Switch to shadow registers
    PUSH HL       ; Argument 2
    EXX               ; Switch to shadow registers
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL many_params_recursive
    ; store , r13
    LD ($F00E), HL
    ; return
    RET

    END main
