; MinZ generated code
; Generated: 2025-08-05 22:17:09


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci.fibonacci$u8
...examples.fibonacci.fibonacci$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.fibonacci.fibonacci$u8_param_n:
    LD HL, #0000   ; SMC parameter n (u8->u16)
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = 1
    LD A, 1
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 <= r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    LD A, (...examples.fibonacci.fibonacci$u8_param_n)
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; r7 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; store , r7
    LD ($F00C), HL
    ; r9 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; store , r9
    LD ($F010), HL
    ; r11 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store , r11
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD ($F014), A
    ; loop_3:
loop_3:
    ; r12 = load i
    LD A, ($F014)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    LD A, (...examples.fibonacci.fibonacci$u8_param_n)
    LD B, A         ; Store to physical register B
    ; r14 = r12 <= r13
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r14, end_loop_4
    LD A, B
    OR A
    JP Z, end_loop_4
    ; r16 = load a
    LD HL, ($F00C)
    ; r17 = load b
    LD HL, ($F010)
    ; r18 = r16 + r17
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r18
    LD ($F01E), HL
    ; r19 = load b
    LD HL, ($F010)
    ; store a, r19
    LD ($F00C), HL
    ; r20 = load temp
    LD HL, ($F01E)
    LD ($F028), HL    ; Virtual register 20 to memory
    ; store b, r20
    LD HL, ($F028)    ; Virtual register 20 from memory
    LD ($F010), HL
    ; r21 = load i
    LD A, ($F014)
    LD H, A         ; Store to physical register H
    ; r22 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r23 = r21 + r22
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 23 already in HL
    ; store i, r23
    LD A, L
    LD ($F014), A
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r24 = load b
    LD HL, ($F010)
    ; return r24
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci.main
...examples.fibonacci.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; r3 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; r4 = call ...examples.fibonacci.fibonacci$u8
    ; Call to ...examples.fibonacci.fibonacci$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...examples.fibonacci.fibonacci$u8
    ; store , r4
    LD ($F002), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
