; MinZ Intermediate Representation (MIR)
; Module: main

Function test_peephole.test() -> void
  @smc
  Locals:
    r1 = a: u8
    r3 = b: u8
  Instructions:
      0: r5 = load a
      1: r6 = load b
      2: r7 = r5 < r6
      3: jump_if_not r7, else_1
      4: LOAD_STRING
      5: PRINT_STRING ; Print "a is less than b" (16 chars via loop)
      6: jump end_if_2
      7: else_1:
      8: end_if_2:
      9: return

Function test_peephole.main() -> void
  @smc
  Instructions:
      0: r1 = load a ; Inlined from test_peephole.test
      1: r2 = load b ; Inlined from test_peephole.test
      2: r3 = r1 < r2 ; Inlined from test_peephole.test
      3: jump_if_not r3, else_1 ; Inlined from test_peephole.test
      4: LOAD_STRING ; Inlined from test_peephole.test
      5: PRINT_STRING ; Inlined: Print "a is less than b" (16 chars via loop)
      6: jump end_if_2 ; Inlined from test_peephole.test
      7: else_1: ; Inlined from test_peephole.test
      8: end_if_2: ; Inlined from test_peephole.test
      9: return

