; MinZ generated code
; Generated: 2025-07-30 09:31:03


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_bits_new_syntax.main
...test_bits_new_syntax.main:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -10
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    ; r2 = 71
    LD A, 71
    ; Register 2 already in A
    ; store , r2
    ; Register 2 already in A
    LD (IX-1), A
    ; r4 = 4660
    LD HL, 4660
    LD ($F008), HL    ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD (IX-3), L
    LD (IX-2), H
    ; r6 = load attr
    LD A, (IX-1)
    LD D, A         ; Store to physical register D
    ; store , r6
    LD (IX-4), L
    LD (IX-3), H
    ; r8 = load sprite
    LD L, (IX-3)
    LD H, (IX-2)
    ; store , r8
    LD (IX-6), L
    LD (IX-5), H
    ; r10 = load attr
    LD A, (IX-1)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r10
    LD (IX-7), L
    LD (IX-6), H
    ; r12 = load attr_bits
    LD L, (IX-4)
    LD H, (IX-3)
    LD ($F018), HL    ; Virtual register 12 to memory
    ; Load bit field ink (offset 0, width 3)
    LD A, ($F018)     ; Virtual register 12 from memory
    AND 7
    LD H, A         ; Store to physical register H
    ; store , r13
    LD A, H
    LD (IX-8), A
    ; r15 = load sprite_bits
    LD L, (IX-6)
    LD H, (IX-5)
    ; Register 15 already in HL
    ; Load bit field x_pos (offset 0, width 9)
    LD A, L
    AND 511
    LD H, A         ; Store to physical register H
    ; store , r16
    LD A, H
    LD (IX-9), A
    ; r18 = load old_bits
    LD L, (IX-7)
    LD H, (IX-6)
    ; Load bit field field1 (offset 0, width 4)
    LD A, L
    AND 15
    LD L, A         ; Store to HL (low byte)
    ; store , r19
    LD A, L
    LD (IX-10), A
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
