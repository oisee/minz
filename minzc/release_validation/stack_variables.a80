; MinZ generated code
; Generated: 2025-08-02 18:22:12


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.stack_variables.test_stack_locals
......examples.stack_variables.test_stack_locals:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
y$immOP:
    LD B, 0        ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    ; r15 = load c
    LD A, ($F016)
    LD D, A         ; Store to physical register D
    ; return r15
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.stack_variables.factorial
......examples.stack_variables.factorial:
; TRUE SMC function with immediate anchors
n$immOP:
    LD E, 0        ; n anchor (will be patched)
n$imm0 EQU n$immOP+1
    ; r3 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, L
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; return r5
    RET
    ; else_1:
else_1:
    LD A, (n$imm0)    ; Reuse from anchor
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r10 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.stack_variables.factorial
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (n$imm0), A        ; Patch n
    CALL ......examples.stack_variables.factorial
    LD A, (n$imm0)    ; Reuse from anchor
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r12 = load prev
    LD HL, ($F00C)
    ; r13 = r11 * r12
    ; 8-bit multiplication
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; return r13
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.stack_variables.many_locals
......examples.stack_variables.many_locals:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r33 = load sum1
    LD A, ($F022)
    LD B, A         ; Store to physical register B
    ; r34 = load sum2
    LD A, ($F032)
    LD B, A         ; Store to physical register B
    ; r35 = r33 + r34
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r35
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.stack_variables.outer
......examples.stack_variables.outer:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    ; r8 = call inner
    ; Call to inner (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.stack_variables.inner
    LD A, ($F00E)     ; Virtual register 7 from memory
    LD (y$imm0), A        ; Patch y
    CALL ......examples.stack_variables.inner
    ; r13 = load local2
    LD A, ($F012)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; return r13
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.stack_variables.inner
......examples.stack_variables.inner:
; TRUE SMC function with immediate anchors
y$immOP:
    LD B, 0        ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    ; r6 = load temp
    LD A, ($F004)
    LD B, A         ; Store to physical register B
    ; return r6
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.stack_variables.main
......examples.stack_variables.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
    ; r4 = call test_stack_locals
    ; Call to test_stack_locals (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.stack_variables.test_stack_locals
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (x$imm0), A        ; Patch x
    LD A, ($F006)     ; Virtual register 3 from memory
    LD (y$imm0), A        ; Patch y
    CALL ......examples.stack_variables.test_stack_locals
    ; r7 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.stack_variables.factorial
    LD A, ($F00C)     ; Virtual register 6 from memory
    LD (n$imm0), A        ; Patch n
    CALL ......examples.stack_variables.factorial
    ; r9 = call many_locals
    ; Call to many_locals (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ......examples.stack_variables.many_locals
    ; r12 = call outer
    ; Call to outer (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F016)    ; Virtual register 11 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.stack_variables.outer
    LD A, ($F016)     ; Virtual register 11 from memory
    LD (x$imm0), A        ; Patch x
    CALL ......examples.stack_variables.outer
    ; return
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x$imm0           ; ......examples.stack_variables.test_stack_locals.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; ......examples.stack_variables.test_stack_locals.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW n$imm0           ; ......examples.stack_variables.factorial.n
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; ......examples.stack_variables.outer.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; ......examples.stack_variables.inner.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
