; MinZ generated code
; Generated: 2025-08-02 18:22:13


; Data section
    ORG $F000

str_0:
    DB 37    ; Length
    DB "Traffic Light Simulation Starting..."
    DB 10
str_1:
    DB 9    ; Length
    DB " seconds"
    DB 10
str_2:
    DB 37    ; Length
    DB 10
    DB "EMERGENCY! Switching to flashing..."
    DB 10
str_3:
    DB 17    ; Length
    DB "Emergency state: "
str_4:
    DB 29    ; Length
    DB "Emergency over, resetting..."
    DB 10
str_5:
    DB 16    ; Length
    DB "Reset to state: "

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.traffic_light_fsm.transition
......examples.traffic_light_fsm.transition:
; TRUE SMC function with immediate anchors
current$immOP:
    LD A, 0        ; current anchor (will be patched)
current$imm0 EQU current$immOP+1
    ; jump_if r4, case_arm_0_2
    LD A, B
    OR A
    JP NZ, case_arm_0_2
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.traffic_light_fsm.get_timing
......examples.traffic_light_fsm.get_timing:
; TRUE SMC function with immediate anchors
state$immOP:
    LD C, 0        ; state anchor (will be patched)
state$imm0 EQU state$immOP+1
    ; jump_if r3, case_arm_0_7
    LD A, D
    OR A
    JP NZ, case_arm_0_7
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.traffic_light_fsm.get_color_code
......examples.traffic_light_fsm.get_color_code:
; TRUE SMC function with immediate anchors
state$immOP:
    LD E, 0        ; state anchor (will be patched)
state$imm0 EQU state$immOP+1
    ; jump_if r3, case_arm_0_12
    LD A, H
    OR A
    JP NZ, case_arm_0_12
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.traffic_light_fsm.simulate_traffic_light
......examples.traffic_light_fsm.simulate_traffic_light:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r5 = string(str_0)
    LD HL, str_0
    ; Print "Traffic Light Simulation Starting...
" (37 chars via loop)
    CALL print_string
    ; loop_16:
loop_16:
    ; r6 = load cycle_count
    LD A, ($F006)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r7 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r8 = r6 < r7
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F010), HL    ; Virtual register 8 to memory
    ; jump_if_not r8, end_loop_17
    LD A, ($F010)     ; Virtual register 8 from memory
    OR A
    JP Z, end_loop_17
    ; Direct print "Cycle " (6 chars)
    ; Direct print "Cycle " (6 chars)
    LD A, 67
    RST 16             ; Print character
    LD A, 121
    RST 16             ; Print character
    LD A, 99
    RST 16             ; Print character
    LD A, 108
    RST 16             ; Print character
    LD A, 101
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; print_u8(r9)
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    CALL print_u8_decimal
    ; Direct print ": State " (8 chars)
    ; Direct print ": State " (8 chars)
    LD A, 58
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    LD A, 83
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 97
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 101
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; r11 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F014)    ; Virtual register 10 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.traffic_light_fsm.get_color_code
    LD A, ($F014)     ; Virtual register 10 from memory
    LD (state$imm0), A        ; Patch state
    CALL ......examples.traffic_light_fsm.get_color_code
    ; print_u8(r11)
    ; Register 11 already in A
    CALL print_u8_decimal
    ; Direct print " for " (5 chars)
    ; Direct print " for " (5 chars)
    LD A, 32
    RST 16             ; Print character
    LD A, 102
    RST 16             ; Print character
    LD A, 111
    RST 16             ; Print character
    LD A, 114
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; r13 = call get_timing
    ; Call to get_timing (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.traffic_light_fsm.get_timing
    LD A, ($F018)     ; Virtual register 12 from memory
    LD (state$imm0), A        ; Patch state
    CALL ......examples.traffic_light_fsm.get_timing
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; print_u8(r13)
    LD A, ($F01A)     ; Virtual register 13 from memory
    CALL print_u8_decimal
    ; r14 = string(str_1)
    LD HL, str_1
    ; Print " seconds
" (9 chars via loop)
    CALL print_string
    ; r17 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F020)    ; Virtual register 16 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F01E)    ; Virtual register 15 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.traffic_light_fsm.transition
    LD A, ($F01E)     ; Virtual register 15 from memory
    LD (current$imm0), A        ; Patch current
    LD A, ($F020)     ; Virtual register 16 from memory
    LD (event$imm0), A        ; Patch event
    CALL ......examples.traffic_light_fsm.transition
    ; jump loop_16
    JP loop_16
    ; end_loop_17:
end_loop_17:
    ; r21 = string(str_2)
    LD HL, str_2
    ; Print "
EMERGENCY! Switching to flashing...
" (37 chars via loop)
    CALL print_string
    ; r24 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F02E)    ; Virtual register 23 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F02C)    ; Virtual register 22 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.traffic_light_fsm.transition
    LD A, ($F02C)     ; Virtual register 22 from memory
    LD (current$imm0), A        ; Patch current
    LD A, ($F02E)     ; Virtual register 23 from memory
    LD (event$imm0), A        ; Patch event
    CALL ......examples.traffic_light_fsm.transition
    LD ($F030), HL    ; Virtual register 24 to memory
    ; r25 = string(str_3)
    LD HL, str_3
    ; Print "Emergency state: " (17 chars via loop)
    CALL print_string
    ; r27 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F034)    ; Virtual register 26 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.traffic_light_fsm.get_color_code
    LD A, ($F034)     ; Virtual register 26 from memory
    LD (state$imm0), A        ; Patch state
    CALL ......examples.traffic_light_fsm.get_color_code
    ; print_u8(r27)
    LD A, D
    CALL print_u8_decimal
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; r28 = string(str_4)
    LD HL, str_4
    ; Print "Emergency over, resetting...
" (29 chars via loop)
    CALL print_string
    ; r31 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F03C)    ; Virtual register 30 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F03A)    ; Virtual register 29 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.traffic_light_fsm.transition
    LD A, ($F03A)     ; Virtual register 29 from memory
    LD (current$imm0), A        ; Patch current
    LD A, ($F03C)     ; Virtual register 30 from memory
    LD (event$imm0), A        ; Patch event
    CALL ......examples.traffic_light_fsm.transition
    ; r32 = string(str_5)
    LD HL, str_5
    ; Print "Reset to state: " (16 chars via loop)
    CALL print_string
    ; r34 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F042)    ; Virtual register 33 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.traffic_light_fsm.get_color_code
    LD A, ($F042)     ; Virtual register 33 from memory
    LD (state$imm0), A        ; Patch state
    CALL ......examples.traffic_light_fsm.get_color_code
    ; print_u8(r34)
    ; Register 34 already in A
    CALL print_u8_decimal
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.traffic_light_fsm.main
......examples.traffic_light_fsm.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r1 = call simulate_traffic_light
    ; Call to simulate_traffic_light (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ......examples.traffic_light_fsm.simulate_traffic_light
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW current$imm0           ; ......examples.traffic_light_fsm.transition.current
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW event$imm0           ; ......examples.traffic_light_fsm.transition.event
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW state$imm0           ; ......examples.traffic_light_fsm.get_timing.state
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW state$imm0           ; ......examples.traffic_light_fsm.get_color_code.state
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
