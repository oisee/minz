; MinZ generated code
; Generated: 2025-08-02 18:22:12


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_16bit_smc.multiply_add
......examples.test_16bit_smc.multiply_add:
; TRUE SMC function with immediate anchors
a$immOP:
    LD HL, 0       ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
    ; Register 4 already in HL
b$immOP:
    LD HL, 0       ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    LD D, H
    LD E, L
    ; r6 = r4 * r5
    ; 16-bit multiplication
    ; Register 4 already in HL
    LD (mul_src1_0), HL  ; Save multiplicand
    LD H, D
    LD L, E
    LD (mul_src2_0), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_0)  ; DE = multiplicand
    LD BC, (mul_src2_0)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_0
.mul16_loop_0:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_0
.mul16_done_0:
mul_src1_0: DW 0
mul_src2_0: DW 0
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
c$immOP:
    LD HL, 0       ; c anchor (will be patched)
c$imm0 EQU c$immOP+1
    ; r8 = r6 + r7
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r8
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_16bit_smc.main
......examples.test_16bit_smc.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r5 = call multiply_add
    ; Call to multiply_add (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F008)    ; Virtual register 4 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.test_16bit_smc.multiply_add
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD (a$imm0), HL       ; Patch a (atomic)
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD (b$imm0), HL       ; Patch b (atomic)
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD (c$imm0), HL       ; Patch c (atomic)
    CALL ......examples.test_16bit_smc.multiply_add
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW a$imm0           ; ......examples.test_16bit_smc.multiply_add.a
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; ......examples.test_16bit_smc.multiply_add.b
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW c$imm0           ; ......examples.test_16bit_smc.multiply_add.c
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
