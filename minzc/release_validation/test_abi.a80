; MinZ generated code
; Generated: 2025-08-02 18:22:12


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_abi.smc_function
......examples.test_abi.smc_function:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
y$immOP:
    LD B, 0        ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_abi.register_function
......examples.test_abi.register_function:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 * r4
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return r5
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_abi.mapped_function
......examples.test_abi.mapped_function:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load x
    LD HL, ($F000)
    ; r4 = load y
    LD HL, ($F000)
    ; r5 = r3 - r4
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_abi.stack_function
......examples.test_abi.stack_function:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load data
    LD HL, ($F000)
    LD D, H
    LD E, L
    ; r4 = load count
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 5 already in HL
    ; return r5
    ; Register 5 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_abi.external_function
......examples.test_abi.external_function:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r6 = call smc_function
    ; Call to smc_function (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F00A)    ; Virtual register 5 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F008)    ; Virtual register 4 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.test_abi.smc_function
    LD A, ($F008)     ; Virtual register 4 from memory
    LD (x$imm0), A        ; Patch x
    LD A, ($F00A)     ; Virtual register 5 from memory
    LD (y$imm0), A        ; Patch y
    CALL ......examples.test_abi.smc_function
    ; r10 = call register_function
    ; Call to register_function (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ......examples.test_abi.register_function
    ; Register 10 already in HL
    ; r14 = call mapped_function
    ; Call to mapped_function (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F01A)    ; Virtual register 13 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ......examples.test_abi.mapped_function
    ; r18 = call stack_function
    ; Call to stack_function (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F022)    ; Virtual register 17 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F020)    ; Virtual register 16 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ......examples.test_abi.stack_function
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x$imm0           ; ......examples.test_abi.smc_function.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; ......examples.test_abi.smc_function.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
