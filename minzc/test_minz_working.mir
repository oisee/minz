; MinZ Intermediate Representation (MIR)
; Module: main

Function test_minz_working.say_hello() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_87 ; Direct print "hello!" (6 chars)
      1: return

Function test_minz_working.say_goodbye() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_87 ; Direct print "goodbye!" (8 chars)
      1: return

Function test_minz_working.double_u8(x: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r4 = r2 + r3
      3: return r4

Function test_minz_working.double_u16(x: u16) -> u16
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r4 = r2 + r3
      3: return r4

Function test_minz_working.add_u8(x: u8, y: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r5 = r3 + r4
      3: return r5

Function test_minz_working.sub_u8(x: u8, y: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r5 = r3 - r4
      3: return r5

Function test_minz_working.check_range_u8(value: u8, min: u8, max: u8) -> bool
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r6 = r4 < r5
      3: jump_if_not r6, else_1
      4: r7 = 0
      5: return r7
      6: jump end_if_2
      7: else_1:
      8: end_if_2:
      9: LOAD_PARAM
     10: LOAD_PARAM
     11: r10 = r8 > r9
     12: jump_if_not r10, else_3
     13: r11 = 0
     14: return r11
     15: jump end_if_4
     16: else_3:
     17: end_if_4:
     18: r12 = 1
     19: return r12

Function test_minz_working.main() -> u8
  @smc
  Locals:
    r4 = x: u16
    r9 = y: u16
    r14 = sum: u16
    r20 = diff: u16
    r26 = in_range: u16
    r33 = out_range: u16
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "=== Testing @minz Code Generation ===" (37 chars via loop)
      2: r2 = call say_hello
      3: r3 = call say_goodbye
      4: r5 = 21
      5: r6 = call double_u8
      6: store , r6
      7: UNKNOWN_OP_88
      8: UNKNOWN_OP_86 ; Print "double(21) = " (13 chars via loop)
      9: r8 = load x
     10: UNKNOWN_OP_82
     11: r10 = 500
     12: r11 = call double_u16
     13: store , r11
     14: UNKNOWN_OP_88
     15: UNKNOWN_OP_86 ; Print "double(500) = " (14 chars via loop)
     16: r13 = load y
     17: UNKNOWN_OP_82
     18: r15 = 15
     19: r16 = 25
     20: r17 = call add_u8
     21: store , r17
     22: UNKNOWN_OP_88
     23: UNKNOWN_OP_86 ; Print "15 + 25 = " (10 chars via loop)
     24: r19 = load sum
     25: UNKNOWN_OP_82
     26: r21 = 50
     27: r22 = 20
     28: r23 = call sub_u8
     29: store , r23
     30: UNKNOWN_OP_88
     31: UNKNOWN_OP_86 ; Print "50 - 20 = " (10 chars via loop)
     32: r25 = load diff
     33: UNKNOWN_OP_82
     34: r27 = 50
     35: r28 = 0
     36: r29 = 100
     37: r30 = call check_range_u8
     38: store , r30
     39: UNKNOWN_OP_88
     40: UNKNOWN_OP_86 ; Print "50 in range [0,100]? " (21 chars via loop)
     41: r32 = load in_range
     42: UNKNOWN_OP_82
     43: r34 = 150
     44: r35 = 0
     45: r36 = 100
     46: r37 = call check_range_u8
     47: store , r37
     48: UNKNOWN_OP_88
     49: UNKNOWN_OP_86 ; Print "150 in range [0,100]? " (22 chars via loop)
     50: r39 = load out_range
     51: UNKNOWN_OP_82
     52: UNKNOWN_OP_88
     53: UNKNOWN_OP_86 ; Print "=== All @minz tests passed! ===" (31 chars via loop)
     54: r41 = 0
     55: return r41

