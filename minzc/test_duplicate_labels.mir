; MinZ Intermediate Representation (MIR)
; Module: main

Function test_duplicate_labels.process_array$a5_u8(arr: [5]u8) -> u8
  @smc
  Locals:
    r2 = sum: u8
  Instructions:
      0: r3 = 0
      1: store sum, r3
      2: r4 = 0
      3: r5 = 5
      4: r6 = r4 ; Initialize loop variable i
      5: for_loop_1:
      6: r7 = r6 < r5 ; Check i < end
      7: jump_if_not r7, for_end_2
      8: r8 = load sum
      9: LOAD_PARAM
     10: r10 = load i
     11: LOAD_INDEX ; Load array element (u8)
     12: r12 = r8 + r11
     13: store sum, r12
     14: r13 = 1
     15: r6 = r6 + r13 ; Increment i
     16: jump for_loop_1
     17: for_end_2:
     18: r14 = load sum
     19: return r14

Function test_duplicate_labels.count_evens$a5_u8(arr: [5]u8) -> u8
  @smc
  Locals:
    r2 = count: u8
  Instructions:
      0: r3 = 0
      1: store count, r3
      2: r4 = 0
      3: r5 = 5
      4: r6 = r4 ; Initialize loop variable i
      5: for_loop_3:
      6: r7 = r6 < r5 ; Check i < end
      7: jump_if_not r7, for_end_4
      8: LOAD_PARAM
      9: r9 = load i
     10: LOAD_INDEX ; Load array element (u8)
     11: r11 = 1
     12: r12 = r10 & r11
     13: r13 = 0
     14: r14 = r12 == r13
     15: jump_if_not r14, else_5
     16: r15 = load count
     17: r16 = 1
     18: r17 = r15 + r16
     19: store count, r17
     20: jump end_if_6
     21: else_5:
     22: end_if_6:
     23: r18 = 1
     24: r6 = r6 + r18 ; Increment i
     25: jump for_loop_3
     26: for_end_4:
     27: r19 = load count
     28: return r19

Function test_duplicate_labels.main() -> void
  @smc
  Locals:
    r1 = data: [5]u8
    r2 = total: u16
    r6 = evens: u16
  Instructions:
      0: r3 = load data
      1: r4 = load data
      2: r5 = call test_duplicate_labels.process_array$a5_u8
      3: store total, r5
      4: r7 = load data
      5: r8 = load data
      6: r9 = call test_duplicate_labels.count_evens$a5_u8
      7: store evens, r9
      8: return

