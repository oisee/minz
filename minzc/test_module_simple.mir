; MinZ Intermediate Representation (MIR)
; Module: main

Function screen.pixel_addr(x: u8, y: u8) -> u16
  Locals:
    r3 = y_high: u8
    r7 = y_mid: u8
    r13 = y_low: u8
    r17 = addr: u16
  Instructions:
      0: 12
      1: r5 = 192
      2: r6 = r4 & r5
      3: store , r6
      4: 12
      5: r9 = 56
      6: r10 = r8 & r9
      7: r11 = 3
      8: 52
      9: store , r12
     10: 12
     11: r15 = 7
     12: r16 = r14 & r15
     13: store , r16
     14: r18 = 16384
     15: r19 = load y_low
     16: r20 = 8
     17: 51
     18: r22 = r18 | r21
     19: r23 = load y_mid
     20: r24 = 5
     21: 51
     22: r26 = r22 | r25
     23: r27 = load y_high
     24: r28 = 5
     25: 51
     26: r30 = r26 | r29
     27: 12
     28: r32 = 3
     29: 52
     30: r34 = r30 | r33
     31: store , r34
     32: r35 = load addr
     33: return r35

Function screen.attr_addr(x: u8, y: u8) -> u16
  Instructions:
      0: r3 = 22528
      1: 12
      2: r5 = 32
      3: r6 = r4 * r5
      4: r7 = r3 + r6
      5: 12
      6: r9 = r7 + r8
      7: return r9

Function test_module_simple.main() -> void
  @smc
  Locals:
    r1 = x: u8
    r3 = y: u8
    r5 = addr: u16
    r9 = attr: u16
  Instructions:
      0: r2 = 10
      1: store , r2
      2: r4 = 20
      3: store , r4
      4: r6 = load x
      5: r7 = load y
      6: r8 = call screen.pixel_addr
      7: store , r8
      8: r10 = load x
      9: r11 = 8
     10: 42
     11: r13 = load y
     12: r14 = 8
     13: 42
     14: r16 = call screen.attr_addr
     15: store , r16
     16: 83
     17: 82
     18: r18 = load addr
     19: 78
     20: 83
     21: 82
     22: 83
     23: 82
     24: r21 = load attr
     25: 78
     26: 83
     27: 82
     28: return

