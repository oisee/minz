; MinZ generated code
; Generated: 2025-08-01 11:59:08


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.test_reordering_showcase.complex_math
.Users.alice.dev.minz-ts.test_reordering_showcase.complex_math:
; TRUE SMC function with immediate anchors
    ; r5 = 10
    LD A, 10
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r11 = 20
    LD A, 20
    LD ($F016), A     ; Virtual register 11 to memory
    ; r14 = 3
    LD A, 3
    LD C, A         ; Store to physical register C
    ; r17 = 5
    LD A, 5
    LD D, A         ; Store to physical register D
    ; store , r5
    LD A, ($F00A)     ; Virtual register 5 from memory
    LD ($F008), A
a$immOP:
    LD A, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
    LD H, A         ; Store to physical register H
b$immOP:
    LD A, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    LD L, A         ; Store to physical register L
    ; r9 = r7 + r8
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F012), HL    ; Virtual register 9 to memory
    ; store , r9
    LD HL, ($F012)    ; Virtual register 9 from memory
    LD ($F00C), HL
    ; store , r11
    LD A, ($F016)     ; Virtual register 11 from memory
    LD ($F014), A
c$immOP:
    LD A, 0        ; c anchor (will be patched)
c$imm0 EQU c$immOP+1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r15 = r13 * r14
    ; 8-bit multiplication
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD B, A       ; B = multiplicand
    LD A, C
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; store , r15
    LD ($F018), HL
    ; store , r17
    LD A, D
    LD ($F020), A
    ; r19 = load x
    LD A, ($F008)
    LD B, A         ; Store to physical register B
    ; r20 = load y
    LD A, ($F014)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r21 = r19 + r20
    LD D, H
    LD E, L
    ADD HL, DE
    ; r22 = load z
    LD A, ($F020)
    LD E, A         ; Store to physical register E
    ; r23 = r21 + r22
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r23
    LD ($F024), HL
    ; r24 = load temp1
    LD HL, ($F00C)
    ; r25 = load temp2
    LD HL, ($F018)
    ; r26 = r24 + r25
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 26 already in HL
    ; r27 = load final_const
    LD HL, ($F024)
    ; r28 = r26 + r27
    ; Register 26 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD D, H
    LD E, L
    ; return r28
    LD H, D
    LD L, E
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.test_reordering_showcase.main
.Users.alice.dev.minz-ts.test_reordering_showcase.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r5 = call complex_math
    ; Call to complex_math (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F008)    ; Virtual register 4 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.test_reordering_showcase.complex_math
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F006)     ; Virtual register 3 from memory
    LD (b$imm0), A        ; Patch b
    LD A, ($F008)     ; Virtual register 4 from memory
    LD (c$imm0), A        ; Patch c
    CALL .Users.alice.dev.minz-ts.test_reordering_showcase.complex_math
    ; Register 5 already in HL
    ; store , r5
    ; Register 5 already in HL
    LD ($F002), HL
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW a$imm0           ; .Users.alice.dev.minz-ts.test_reordering_showcase.complex_math.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; .Users.alice.dev.minz-ts.test_reordering_showcase.complex_math.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW c$imm0           ; .Users.alice.dev.minz-ts.test_reordering_showcase.complex_math.c
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
