; MinZ generated code
; Generated: 2025-07-26 13:15:40


; Code section
    ORG $8000


; Function: ...examples.test_loop_into.main
...examples.test_loop_into.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F004), A
    ; store , r2
    LD HL, ($F004)
    LD ($F002), HL
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F008), A
    ; store , r4
    LD HL, ($F008)
    LD ($F006), HL
    ; Load table base address
    LD HL, ($F00A)
    LD ($F00C), HL
    ; Load table base for end calculation
    LD HL, ($F00A)
    LD ($F00E), HL
    ; Calculate table end (+ 5 elements * 4 bytes)
    LD HL, ($F00E)
    LD DE, 20
    ADD HL, DE
    LD ($F00E), HL
    ; Load loop counter
    LD A, 5
    LD ($F010), A
    ; Check if reached end of table
    LD HL, ($F00C)
    LD D, H
    LD E, L
    LD HL, ($F00E)
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, ($F012)
    OR A
    JP NZ, loop_end_2
    ; Copy element to buffer at $F000
    LD HL, ($F00C)
    LD DE, $F000    ; Buffer address
    LD BC, 4       ; Size
    LDIR            ; Copy to buffer
    ; Load person.active from buffer at $F003
    LD A, ($F003)
    LD ($F014), A
    ; jump_if_not r10, else_3
    LD A, ($F014)
    OR A
    JP Z, else_3
    ; Load person.score from buffer at $F001
    LD HL, ($F001)
    LD ($F016), HL
    ; Store to person.score at buffer $F001
    LD HL, ($F01A)
    LD ($F001), HL
    ; r14 = load total_score
    LD HL, ($F000)
    LD ($F01C), HL
    ; Load person.score from buffer at $F001
    LD HL, ($F001)
    LD ($F01E), HL
    ; r16 = r14 + r15
    LD HL, ($F01C)
    LD D, H
    LD E, L
    LD HL, ($F01E)
    ADD HL, DE
    LD ($F020), HL
    ; store total_score, r16
    LD HL, ($F020)
    LD ($F002), HL
    ; INC (optimized from ADD 1)
    LD HL, ($F022)
    INC HL
    LD ($F026), HL
    ; store active_count, r19
    LD HL, ($F026)
    LD ($F006), HL
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; Load person.age from buffer at $F000
    LD A, ($F000)
    LD ($F028), A
    ; Store to person.age at buffer $F000
    LD A, ($F02C)
    LD ($F000), A
    ; Copy buffer back to element at $F000
    LD HL, ($F00C)
    EX DE, HL       ; DE = destination
    LD HL, $F000    ; Buffer address
    LD BC, 4       ; Size
    LDIR            ; Copy from buffer
    ; Advance to next element (+4 bytes)
    LD HL, ($F00C)
    LD DE, 4
    ADD HL, DE
    LD ($F00C), HL
    ; Decrement counter and loop if not zero
    LD A, ($F010)
    LD B, A
    DJNZ loop_start_1
    LD A, B
    LD ($F010), A
    ; return
    RET

    END main
