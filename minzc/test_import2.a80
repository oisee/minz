; MinZ generated code
; Generated: 2025-08-09 11:03:09


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.get_cursor
zx.screen.get_cursor:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.init_text
zx.screen.init_text:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 0
    LD A, 0
    ; Register 1 already in A
    ; r2 = 0
    LD A, 0
    LD B, A         ; Store to physical register B
    ; r3 = call zx.screen.set_cursor
    ; Call to zx.screen.set_cursor (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL zx.screen.set_cursor
    ; r4 = 7
    LD A, 7
    LD D, A         ; Store to physical register D
    ; r5 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; r6 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r7 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r8 = call zx.screen.set_text_attr
    ; Call to zx.screen.set_text_attr (args: 4)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 3
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL zx.screen.set_text_attr
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_import2.main
test_import2.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r2 = call zx.screen.set_border
    ; Call to zx.screen.set_border (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL zx.screen.set_border
    ; return
    RET

    END main
