; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   ...examples.zvdb_bits_demo.test_entry: bits<u8>
;   ...examples.zvdb_bits_demo.test_result: bits<u16>

Function ...examples.zvdb_bits_demo.test_hash_entry() -> void
  @smc
  Locals:
    r1 = entry: bits<u8>
    r9 = id: u8
    r12 = occ: u8
  Instructions:
      0: r2 = 42
      1: r3 = load entry
      2: STORE_BIT_FIELD ; Store bit field vector_id (offset 0, width 6)
      3: r4 = 1
      4: r5 = load entry
      5: STORE_BIT_FIELD ; Store bit field occupied (offset 6, width 1)
      6: r6 = 0
      7: r7 = load entry
      8: STORE_BIT_FIELD ; Store bit field chain (offset 7, width 1)
      9: r8 = load entry
     10: store test_entry, r8
     11: r10 = load test_entry
     12: LOAD_BIT_FIELD ; Load bit field vector_id (offset 0, width 6)
     13: store , r11
     14: r13 = load test_entry
     15: LOAD_BIT_FIELD ; Load bit field occupied (offset 6, width 1)
     16: store , r14
     17: UNKNOWN_OP_88
     18: UNKNOWN_OP_86 ; Print "Hash Entry - ID: " (17 chars via loop)
     19: UNKNOWN_OP_88
     20: UNKNOWN_OP_86 ; Print ", Occupied: " (12 chars via loop)
     21: UNKNOWN_OP_87 ; Direct print "
" (1 chars)
     22: return

Function ...examples.zvdb_bits_demo.test_sim_result() -> void
  @smc
  Locals:
    r1 = result: bits<u16>
    r9 = id: u8
    r12 = score: u8
  Instructions:
      0: r2 = 7
      1: r3 = load result
      2: STORE_BIT_FIELD ; Store bit field vector_id (offset 0, width 8)
      3: r4 = 95
      4: r5 = load result
      5: STORE_BIT_FIELD ; Store bit field score (offset 8, width 7)
      6: r6 = 1
      7: r7 = load result
      8: STORE_BIT_FIELD ; Store bit field valid (offset 15, width 1)
      9: r8 = load result
     10: store test_result, r8
     11: r10 = load test_result
     12: LOAD_BIT_FIELD ; Load bit field vector_id (offset 0, width 8)
     13: store , r11
     14: r13 = load test_result
     15: LOAD_BIT_FIELD ; Load bit field score (offset 8, width 7)
     16: store , r14
     17: UNKNOWN_OP_88
     18: UNKNOWN_OP_86 ; Print "Similarity - Vector: " (21 chars via loop)
     19: UNKNOWN_OP_88
     20: UNKNOWN_OP_86 ; Print ", Score: " (9 chars via loop)
     21: UNKNOWN_OP_87 ; Direct print "%
" (2 chars)
     22: return

Function ...examples.zvdb_bits_demo.show_efficiency() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "
Memory Efficiency:
" (20 chars via loop)
      2: UNKNOWN_OP_88
      3: UNKNOWN_OP_86 ; Print "==================
" (19 chars via loop)
      4: UNKNOWN_OP_88
      5: UNKNOWN_OP_86 ; Print "Traditional struct:
" (20 chars via loop)
      6: UNKNOWN_OP_88
      7: UNKNOWN_OP_86 ; Print "  vector_id: u8 (8 bits)
" (25 chars via loop)
      8: UNKNOWN_OP_88
      9: UNKNOWN_OP_86 ; Print "  occupied: bool (8 bits)
" (26 chars via loop)
     10: UNKNOWN_OP_88
     11: UNKNOWN_OP_86 ; Print "  chain: bool (8 bits)
" (23 chars via loop)
     12: UNKNOWN_OP_88
     13: UNKNOWN_OP_86 ; Print "  Total: 24 bits (3 bytes)

" (28 chars via loop)
     14: UNKNOWN_OP_88
     15: UNKNOWN_OP_86 ; Print "Bit-packed HashEntry:
" (22 chars via loop)
     16: UNKNOWN_OP_88
     17: UNKNOWN_OP_86 ; Print "  vector_id: 6 bits
" (20 chars via loop)
     18: UNKNOWN_OP_88
     19: UNKNOWN_OP_86 ; Print "  occupied: 1 bit
" (18 chars via loop)
     20: UNKNOWN_OP_88
     21: UNKNOWN_OP_86 ; Print "  chain: 1 bit
" (15 chars via loop)
     22: UNKNOWN_OP_88
     23: UNKNOWN_OP_86 ; Print "  Total: 8 bits (1 byte)
" (25 chars via loop)
     24: UNKNOWN_OP_88
     25: UNKNOWN_OP_86 ; Print "  Savings: 67% less memory!
" (28 chars via loop)
     26: return

Function ...examples.zvdb_bits_demo.main() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "ZVDB Bit Structure Demo
" (24 chars via loop)
      2: UNKNOWN_OP_88
      3: UNKNOWN_OP_86 ; Print "=======================

" (25 chars via loop)
      4: r3 = call test_hash_entry
      5: r4 = call test_sim_result
      6: r5 = call show_efficiency
      7: UNKNOWN_OP_88
      8: UNKNOWN_OP_86 ; Print "
â Benefits for ZVDB:
" (27 chars via loop)
      9: UNKNOWN_OP_88
     10: UNKNOWN_OP_86 ; Print "   â¢ Compact hash tables
" (30 chars via loop)
     11: UNKNOWN_OP_88
     12: UNKNOWN_OP_86 ; Print "   â¢ Efficient result packing
" (35 chars via loop)
     13: UNKNOWN_OP_88
     14: UNKNOWN_OP_86 ; Print "   â¢ Type-safe bit manipulation
" (37 chars via loop)
     15: UNKNOWN_OP_88
     16: UNKNOWN_OP_86 ; Print "   â¢ 3x memory savings!
" (29 chars via loop)
     17: return

