; MinZ Intermediate Representation (MIR)
; Module: main

Function ...test_string_architecture.main() -> void
  @smc
  Instructions:
      0: r1 = call test_short_strings
      1: r2 = call test_medium_strings
      2: r3 = call test_long_strings
      3: r4 = call test_string_operations
      4: r5 = call test_boolean_printing
      5: return

Function ...test_string_architecture.test_short_strings() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_87
      1: UNKNOWN_OP_86
      2: UNKNOWN_OP_87
      3: UNKNOWN_OP_86
      4: UNKNOWN_OP_87
      5: UNKNOWN_OP_86
      6: return

Function ...test_string_architecture.test_medium_strings() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_87
      1: UNKNOWN_OP_86
      2: UNKNOWN_OP_87
      3: UNKNOWN_OP_86
      4: UNKNOWN_OP_87
      5: UNKNOWN_OP_86
      6: return

Function ...test_string_architecture.test_long_strings() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_87
      1: UNKNOWN_OP_86
      2: UNKNOWN_OP_87
      3: UNKNOWN_OP_86
      4: UNKNOWN_OP_87
      5: UNKNOWN_OP_86
      6: return

Function ...test_string_architecture.test_string_operations() -> void
  @smc
  Locals:
    r1 = greeting: *u8
    r3 = name: *u8
  Instructions:
      0: LOAD_LABEL ; Load string "Hello"
      1: store , r2
      2: LOAD_LABEL ; Load string "Alice"
      3: store , r4
      4: r5 = load greeting
      5: UNKNOWN_OP_86
      6: r6 = load name
      7: UNKNOWN_OP_86
      8: return

Function ...test_string_architecture.test_boolean_printing() -> void
  @smc
  Locals:
    r1 = flag1: bool
    r2 = flag2: bool
  Instructions:
      0: r3 = load flag1
      1: UNKNOWN_OP_85
      2: r4 = load flag2
      3: UNKNOWN_OP_85
      4: return

