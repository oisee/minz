; MinZ generated code
; Generated: 2025-07-30 12:50:50


; Data section
    ORG $F000

str_0:
    DB 54    ; Length
    DB "Bit struct field access test completed successfully!"
    DB 92
    DB "n"
    DB 0               ; Null terminator

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_bit_field_comprehensive.test_8bit_fields
...examples.test_bit_field_comprehensive.test_8bit_fields:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -7
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    ; r2 = 130
    LD A, 130
    ; Register 2 already in A
    ; store , r2
    ; Register 2 already in A
    LD (IX-1), A
    ; r4 = load raw
    LD A, (IX-1)
    LD ($F008), A     ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD (IX-2), L
    LD (IX-1), H
    ; r6 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; Load bit field carry (offset 0, width 1)
    LD A, ($F00C)     ; Virtual register 6 from memory
    AND 1
    LD H, A         ; Store to physical register H
    ; store , r7
    LD A, H
    LD (IX-3), A
    ; r9 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    ; Load bit field zero (offset 6, width 1)
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store , r10
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD (IX-4), A
    ; r12 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    LD ($F018), HL    ; Virtual register 12 to memory
    ; Load bit field sign (offset 7, width 1)
    LD A, ($F018)     ; Virtual register 12 from memory
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r13
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD (IX-5), A
    ; r14 = 1
    LD A, 1
    LD C, A         ; Store to physical register C
    ; r15 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    ; Store bit field zero (offset 6, width 1)
    LD A, C
    LD B, A        ; Save original value
    AND 191         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, C
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD C, A         ; Store to physical register C
    ; r16 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r17 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    LD ($F022), HL    ; Virtual register 17 to memory
    ; Store bit field carry (offset 0, width 1)
    LD A, ($F022)     ; Virtual register 17 from memory
    LD B, A        ; Save original value
    AND 254         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, L
    AND 1         ; Mask to field width
    OR C           ; Combine with cleared original
    LD ($F022), A     ; Virtual register 17 to memory
    ; r18 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r19 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    LD ($F026), HL    ; Virtual register 19 to memory
    ; Store bit field parity (offset 2, width 1)
    LD A, ($F026)     ; Virtual register 19 from memory
    LD B, A        ; Save original value
    AND 251         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, B
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD ($F026), A     ; Virtual register 19 to memory
    ; r21 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    ; Load bit field sign (offset 7, width 1)
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    LD ($F02C), A     ; Virtual register 22 to memory
    ; store , r22
    LD A, ($F02C)     ; Virtual register 22 from memory
    LD (IX-6), A
    ; r23 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; r24 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    ; Store bit field sign (offset 7, width 1)
    LD A, L
    LD B, A        ; Save original value
    AND 127         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, E
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD L, A         ; Store to physical register L
    ; r26 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    LD ($F034), HL    ; Virtual register 26 to memory
    ; Load bit field sign (offset 7, width 1)
    LD A, ($F034)     ; Virtual register 26 from memory
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    LD B, A         ; Store to physical register B
    ; store , r27
    LD A, B
    LD (IX-7), A
    ; r28 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    ; Load bit field carry (offset 0, width 1)
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    AND 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r30 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    ; Load bit field zero (offset 6, width 1)
    LD A, L
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    LD L, A         ; Store to physical register L
    ; r32 = r29 | r31
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    ; r33 = load flags
    LD L, (IX-2)
    LD H, (IX-1)
    ; Store bit field half_carry (offset 4, width 1)
    LD A, B
    LD B, A        ; Save original value
    AND 239         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, B
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD B, A         ; Store to physical register B
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_bit_field_comprehensive.test_16bit_fields
...examples.test_bit_field_comprehensive.test_16bit_fields:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; store , r2
    LD ($F002), HL
    ; r4 = load raw
    LD HL, ($F002)
    ; store , r4
    LD ($F006), HL
    ; r5 = 256
    LD HL, 256
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; r6 = load sprite
    LD HL, ($F006)
    ; Register 6 already in HL
    ; Store bit field x_coord (offset 0, width 9)
    LD A, L
    LD B, A        ; Save original value
    AND 0         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, ($F00A)     ; Virtual register 5 from memory
    AND 511         ; Mask to field width
    OR C           ; Combine with cleared original
    LD L, A         ; Store to HL (low byte)
    ; r7 = 3
    LD A, 3
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = load sprite
    LD HL, ($F006)
    ; Store bit field palette_id (offset 9, width 3)
    LD A, H
    LD B, A        ; Save original value
    AND 255         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, ($F00E)     ; Virtual register 7 from memory
    AND 7         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD H, A         ; Store to physical register H
    ; r9 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; r10 = load sprite
    LD HL, ($F006)
    ; Register 10 already in HL
    ; Store bit field priority (offset 12, width 2)
    LD A, L
    LD B, A        ; Save original value
    AND 255         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, L
    AND 3         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD L, A         ; Store to HL (low byte)
    ; r12 = load sprite
    LD HL, ($F006)
    ; Load bit field x_coord (offset 0, width 9)
    LD A, H
    AND 511
    LD H, A         ; Store to physical register H
    ; store , r13
    LD ($F016), HL
    ; r14 = load x
    LD HL, ($F016)
    ; r15 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r16 = r14 + r15
    LD D, H
    LD E, L
    ; Register 15 already in HL
    ADD HL, DE
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = load sprite
    LD HL, ($F006)
    ; Register 17 already in HL
    ; Store bit field x_coord (offset 0, width 9)
    LD A, L
    LD B, A        ; Save original value
    AND 0         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, ($F020)     ; Virtual register 16 from memory
    AND 511         ; Mask to field width
    OR C           ; Combine with cleared original
    LD L, A         ; Store to HL (low byte)
    ; r18 = load sprite
    LD HL, ($F006)
    ; Register 18 already in HL
    ; Load bit field h_flip (offset 14, width 1)
    LD A, L
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    LD E, A         ; Store to DE (low byte)
    ; r20 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; r21 = r19 == r20
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ; Register 20 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F02A), HL    ; Virtual register 21 to memory
    ; jump_if_not r21, else_1
    LD A, ($F02A)     ; Virtual register 21 from memory
    OR A
    JP Z, else_1
    ; r22 = 1
    LD A, 1
    LD ($F02C), A     ; Virtual register 22 to memory
    ; r23 = load sprite
    LD HL, ($F006)
    ; Store bit field h_flip (offset 14, width 1)
    LD A, H
    LD B, A        ; Save original value
    AND 255         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, ($F02C)     ; Virtual register 22 from memory
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD H, A         ; Store to physical register H
    ; r24 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r25 = load sprite
    LD HL, ($F006)
    ; Register 25 already in HL
    ; Store bit field v_flip (offset 15, width 1)
    LD A, L
    LD B, A        ; Save original value
    AND 255         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, L
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD L, A         ; Store to HL (low byte)
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_bit_field_comprehensive.test_field_expressions
...examples.test_bit_field_comprehensive.test_field_expressions:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r2
    LD ($F002), HL
    ; r4 = load flags
    LD HL, ($F002)
    LD ($F008), HL    ; Virtual register 4 to memory
    ; Load bit field carry (offset 0, width 1)
    LD A, ($F008)     ; Virtual register 4 from memory
    AND 1
    LD H, A         ; Store to physical register H
    ; r6 = load flags
    LD HL, ($F002)
    ; Load bit field zero (offset 6, width 1)
    LD A, L
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r9 = r7 * r8
    ; 8-bit multiplication
    LD A, ($F00E)     ; Virtual register 7 from memory
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; r10 = r5 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F014), HL    ; Virtual register 10 to memory
    ; r11 = load flags
    LD HL, ($F002)
    ; Load bit field sign (offset 7, width 1)
    LD A, H
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    LD L, A         ; Store to physical register L
    ; r13 = 4
    LD A, 4
    LD ($F01A), A     ; Virtual register 13 to memory
    ; r14 = r12 * r13
    ; 8-bit multiplication
    LD A, L
    LD B, A       ; B = multiplicand
    LD A, ($F01A)     ; Virtual register 13 from memory
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_3
.mul_loop_3:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_3
.mul_done_3:
    ; r15 = r10 + r14
    LD HL, ($F014)    ; Virtual register 10 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r15
    LD A, L
    LD ($F006), A
    ; r16 = load flags
    LD HL, ($F002)
    ; Load bit field zero (offset 6, width 1)
    LD A, L
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    LD ($F022), A     ; Virtual register 17 to memory
    ; r18 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r19 = r17 == r18
    LD HL, ($F022)    ; Virtual register 17 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r19, else_3
    LD A, L
    OR A
    JP Z, else_3
    ; r20 = 1
    LD A, 1
    LD ($F028), A     ; Virtual register 20 to memory
    ; r21 = load flags
    LD HL, ($F002)
    ; Store bit field sign (offset 7, width 1)
    LD A, H
    LD B, A        ; Save original value
    AND 127         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, ($F028)     ; Virtual register 20 from memory
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD H, A         ; Store to physical register H
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; r22 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r23 = load flags
    LD HL, ($F002)
    LD ($F02E), HL    ; Virtual register 23 to memory
    ; Store bit field carry (offset 0, width 1)
    LD A, ($F02E)     ; Virtual register 23 from memory
    LD B, A        ; Save original value
    AND 254         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, L
    AND 1         ; Mask to field width
    OR C           ; Combine with cleared original
    LD ($F02E), A     ; Virtual register 23 to memory
    ; r24 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r25 = load flags
    LD HL, ($F002)
    ; Store bit field zero (offset 6, width 1)
    LD A, L
    LD B, A        ; Save original value
    AND 191         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, H
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD L, A         ; Store to physical register L
    ; r26 = 1
    LD A, 1
    LD ($F034), A     ; Virtual register 26 to memory
    ; r27 = load flags
    LD HL, ($F002)
    ; Store bit field sign (offset 7, width 1)
    LD A, H
    LD B, A        ; Save original value
    AND 127         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, ($F034)     ; Virtual register 26 from memory
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD H, A         ; Store to physical register H
    ; r28 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r29 = load flags
    LD HL, ($F002)
    ; Register 29 already in HL
    ; Store bit field parity (offset 2, width 1)
    LD A, L
    LD B, A        ; Save original value
    AND 251         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, L
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD L, A         ; Store to HL (low byte)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_bit_field_comprehensive.main
...examples.test_bit_field_comprehensive.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call test_8bit_fields
    ; Call to test_8bit_fields (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_8bit_fields
    ; r2 = call test_16bit_fields
    ; Call to test_16bit_fields (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_16bit_fields
    ; r3 = call test_field_expressions
    ; Call to test_field_expressions (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_field_expressions
    ; Register 3 already in HL
    ; r4 = string(str_0)
    LD HL, str_0
    ; print_string(r4)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
