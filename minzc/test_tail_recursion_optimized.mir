; MinZ Intermediate Representation (MIR)
; Module: main

Function test_tail_recursion.factorial_tail(n: u8, acc: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: test_tail_recursion.factorial_tail_tail_loop: ; Tail recursion loop start
      2: r4 = 1
      3: r5 = r3 <= r4
      4: jump_if_not r5, else_1
      5: 29 ; Load from anchor acc$imm0
      6: return r6
      7: else_1:
      8: 29 ; Load from anchor n$imm0
      9: 29 ; Load from anchor acc$imm0
     10: 29 ; Load from anchor n$imm0
     11: jump test_tail_recursion.factorial_tail_tail_loop ; Tail recursion optimized to loop

Function test_tail_recursion.factorial(n: u8) -> u16
  @recursive
  Instructions:
      0: 12
      1: r4 = call factorial_tail
      2: return r4

Function test_tail_recursion.sum_tail(n: u8, acc: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: test_tail_recursion.sum_tail_tail_loop: ; Tail recursion loop start
      2: r4 = r4 ^ r4 ; XOR A,A (optimized from LD A,0)
      3: r5 = r3 == r4
      4: jump_if_not r5, else_3
      5: 29 ; Load from anchor acc$imm0
      6: return r6
      7: else_3:
      8: 29 ; Load from anchor n$imm0
      9: 29 ; Load from anchor acc$imm0
     10: 29 ; Load from anchor n$imm0
     11: jump test_tail_recursion.sum_tail_tail_loop ; Tail recursion optimized to loop

Function test_tail_recursion.countdown_tail(n: u8) -> u8
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: test_tail_recursion.countdown_tail_tail_loop: ; Tail recursion loop start
      2: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      3: r4 = r2 == r3
      4: jump_if_not r4, else_5
      5: r5 = r5 ^ r5 ; XOR A,A (optimized from LD A,0)
      6: return r5
      7: else_5:
      8: 29 ; Load from anchor n$imm0
      9: jump test_tail_recursion.countdown_tail_tail_loop ; Tail recursion optimized to loop

Function test_tail_recursion.factorial_non_tail(n: u8) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_7
      4: r5 = 1
      5: return r5
      6: else_7:
      7: 29 ; Load from anchor n$imm0
      8: 29 ; Load from anchor n$imm0
      9: r10 = call factorial_non_tail
     10: r11 = r6 * r10
     11: return r11

Function test_tail_recursion.fibonacci_non_tail(n: u8) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_9
      4: 29 ; Load from anchor n$imm0
      5: return r5
      6: else_9:
      7: 29 ; Load from anchor n$imm0
      8: r9 = call fibonacci_non_tail
      9: 29 ; Load from anchor n$imm0
     10: r13 = call fibonacci_non_tail
     11: r14 = r9 + r13
     12: return r14

Function test_tail_recursion.fib_tail_helper(n: u8, a: u16, b: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: test_tail_recursion.fib_tail_helper_tail_loop: ; Tail recursion loop start
      2: r5 = r5 ^ r5 ; XOR A,A (optimized from LD A,0)
      3: r6 = r4 == r5
      4: jump_if_not r6, else_11
      5: 29 ; Load from anchor a$imm0
      6: return r7
      7: else_11:
      8: 29 ; Load from anchor n$imm0
      9: r9 = 1
     10: r10 = r8 == r9
     11: jump_if_not r10, else_13
     12: 29 ; Load from anchor b$imm0
     13: return r11
     14: else_13:
     15: 29 ; Load from anchor n$imm0
     16: 29 ; Load from anchor b$imm0
     17: 29 ; Load from anchor a$imm0
     18: 29 ; Load from anchor b$imm0
     19: jump test_tail_recursion.fib_tail_helper_tail_loop ; Tail recursion optimized to loop

Function test_tail_recursion.fibonacci_tail(n: u8) -> u16
  @recursive
  Instructions:
      0: 12
      1: r5 = call fib_tail_helper
      2: return r5

Function test_tail_recursion.gcd_tail(a: u16, b: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor b$imm0
      1: test_tail_recursion.gcd_tail_tail_loop: ; Tail recursion loop start
      2: r4 = r4 ^ r4 ; XOR A,A (optimized from LD A,0)
      3: r5 = r3 == r4
      4: jump_if_not r5, else_15
      5: 29 ; Load from anchor a$imm0
      6: return r6
      7: else_15:
      8: 29 ; Load from anchor b$imm0
      9: 29 ; Load from anchor a$imm0
     10: 29 ; Load from anchor b$imm0
     11: jump test_tail_recursion.gcd_tail_tail_loop ; Tail recursion optimized to loop

Function test_tail_recursion.power_tail(base: u8, exp: u8, acc: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor exp$imm0
      1: test_tail_recursion.power_tail_tail_loop: ; Tail recursion loop start
      2: r5 = r5 ^ r5 ; XOR A,A (optimized from LD A,0)
      3: r6 = r4 == r5
      4: jump_if_not r6, else_17
      5: 29 ; Load from anchor acc$imm0
      6: return r7
      7: else_17:
      8: 29 ; Load from anchor base$imm0
      9: 29 ; Load from anchor exp$imm0
     10: 29 ; Load from anchor acc$imm0
     11: 29 ; Load from anchor base$imm0
     12: jump test_tail_recursion.power_tail_tail_loop ; Tail recursion optimized to loop

Function test_tail_recursion.power(base: u8, exp: u8) -> u16
  @recursive
  Instructions:
      0: 12
      1: 12
      2: r6 = call power_tail
      3: return r6

Function test_tail_recursion.complex_tail(n: u8, flag: bool, acc: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: test_tail_recursion.complex_tail_tail_loop: ; Tail recursion loop start
      2: r5 = r5 ^ r5 ; XOR A,A (optimized from LD A,0)
      3: r6 = r4 == r5
      4: jump_if_not r6, else_19
      5: 29 ; Load from anchor acc$imm0
      6: return r7
      7: else_19:
      8: 29 ; Load from anchor flag$imm0
      9: jump_if_not r8, else_21
     10: 29 ; Load from anchor n$imm0
     11: 29 ; Load from anchor acc$imm0
     12: 29 ; Load from anchor n$imm0
     13: jump test_tail_recursion.complex_tail_tail_loop ; Tail recursion optimized to loop
     14: else_21:
     15: 29 ; Load from anchor n$imm0
     16: 29 ; Load from anchor acc$imm0
     17: jump test_tail_recursion.complex_tail_tail_loop ; Tail recursion optimized to loop

Function test_tail_recursion.main() -> void
  @recursive
  Locals:
    r1 = fact5: u16
    r4 = sum10: u16
    r8 = countdown: u8
    r11 = fib10: u16
    r14 = gcd_result: u16
    r18 = pow_result: u16
    r22 = complex_result: u16
    r27 = fact5_normal: u16
    r30 = fib5_normal: u16
  Instructions:
      0: r3 = call factorial
      1: store , r3
      2: r7 = call sum_tail
      3: store , r7
      4: r10 = call countdown_tail
      5: store , r10
      6: r13 = call fibonacci_tail
      7: store , r13
      8: r17 = call gcd_tail
      9: store , r17
     10: r21 = call power
     11: store , r21
     12: r26 = call complex_tail
     13: store , r26
     14: r29 = call factorial_non_tail
     15: store , r29
     16: r32 = call fibonacci_non_tail
     17: store , r32
     18: return

