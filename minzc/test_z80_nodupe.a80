; MinZ generated code
; Generated: 2025-08-06 17:08:41


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_duplicate_labels.process_array$a5_u8
test_duplicate_labels.process_array$a5_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    ; Register 3 already in A
    ; store sum, r3
    ; Register 3 already in A
    LD ($F004), A
    ; r4 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; r5 = 5
    LD A, 5
    LD D, A         ; Store to physical register D
    ; Initialize loop variable i
    ; for_loop_1:
test_duplicate_labels_process_array_a5_u8.for_loop_1:
    ; Check i < end
    LD E, D        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, test_duplicate_labels_process_array_a5_u8.lt_true_0
    LD HL, 0       ; False
    JP test_duplicate_labels_process_array_a5_u8.lt_done_0
test_duplicate_labels_process_array_a5_u8.lt_true_0:
    LD HL, 1       ; True
test_duplicate_labels_process_array_a5_u8.lt_done_0:
    ; jump_if_not r7, for_end_2
    LD A, H
    OR A
    JP Z, test_duplicate_labels_process_array_a5_u8.for_end_2
    ; r8 = load sum
    LD A, ($F004)
    LD L, A         ; Store to physical register L
test_duplicate_labels.process_array$a5_u8_param_arr:
    LD HL, #0000   ; SMC parameter arr
    LD ($F012), HL    ; Virtual register 9 to memory
    ; r10 = load i
    LD HL, ($F000)
    ; Load array element (u8)
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r12 = r8 + r11
    LD D, H
    LD E, L
    ADD HL, DE
    ; store sum, r12
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD ($F004), A
    ; r13 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_1
    JP test_duplicate_labels_process_array_a5_u8.for_loop_1
    ; for_end_2:
test_duplicate_labels_process_array_a5_u8.for_end_2:
    ; r14 = load sum
    LD A, ($F004)
    LD L, A         ; Store to HL (low byte)
    ; return r14
    ; Register 14 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_duplicate_labels.count_evens$a5_u8
test_duplicate_labels.count_evens$a5_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store count, r3
    LD A, H
    LD ($F004), A
    ; r4 = 0
    LD A, 0
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    LD HL, ($F008)    ; Virtual register 4 from memory
    ; for_loop_3:
test_duplicate_labels_count_evens_a5_u8.for_loop_3:
    ; Check i < end
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, test_duplicate_labels_count_evens_a5_u8.lt_true_1
    LD HL, 0       ; False
    JP test_duplicate_labels_count_evens_a5_u8.lt_done_1
test_duplicate_labels_count_evens_a5_u8.lt_true_1:
    LD HL, 1       ; True
test_duplicate_labels_count_evens_a5_u8.lt_done_1:
    ; Register 7 already in HL
    ; jump_if_not r7, for_end_4
    LD A, L
    OR A
    JP Z, test_duplicate_labels_count_evens_a5_u8.for_end_4
test_duplicate_labels.count_evens$a5_u8_param_arr:
    LD HL, #0000   ; SMC parameter arr
    ; r9 = load i
    LD HL, ($F000)
    LD ($F012), HL    ; Virtual register 9 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F012)     ; Virtual register 9 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r11 = 1
    LD A, 1
    LD ($F016), A     ; Virtual register 11 to memory
    ; r12 = r10 & r11
    LD D, H
    LD E, L
    LD HL, ($F016)    ; Virtual register 11 from memory
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r13 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r14 = r12 == r13
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, test_duplicate_labels_count_evens_a5_u8.eq_true_2
    LD HL, 0       ; False
    JP test_duplicate_labels_count_evens_a5_u8.eq_done_2
test_duplicate_labels_count_evens_a5_u8.eq_true_2:
    LD HL, 1       ; True
test_duplicate_labels_count_evens_a5_u8.eq_done_2:
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; jump_if_not r14, else_5
    LD A, ($F01C)     ; Virtual register 14 from memory
    OR A
    JP Z, test_duplicate_labels_count_evens_a5_u8.else_5
    ; r15 = load count
    LD A, ($F004)
    LD H, A         ; Store to physical register H
    ; r16 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r17 = r15 + r16
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 17 already in HL
    ; store count, r17
    LD A, L
    LD ($F004), A
    ; jump end_if_6
    JP test_duplicate_labels_count_evens_a5_u8.end_if_6
    ; else_5:
test_duplicate_labels_count_evens_a5_u8.else_5:
    ; end_if_6:
test_duplicate_labels_count_evens_a5_u8.end_if_6:
    ; r18 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_3
    JP test_duplicate_labels_count_evens_a5_u8.for_loop_3
    ; for_end_4:
test_duplicate_labels_count_evens_a5_u8.for_end_4:
    ; r19 = load count
    LD A, ($F004)
    LD L, A         ; Store to physical register L
    ; return r19
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_duplicate_labels.main
test_duplicate_labels.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load data
    LD HL, ($F002)
    ; Register 3 already in HL
    ; r4 = load data
    LD HL, ($F002)
    ; r5 = call test_duplicate_labels.process_array$a5_u8
    ; Call to test_duplicate_labels.process_array$a5_u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_duplicate_labels.process_array$a5_u8
    ; store total, r5
    LD ($F004), HL
    ; r7 = load data
    LD HL, ($F002)
    ; Register 7 already in HL
    ; r8 = load data
    LD HL, ($F002)
    ; r9 = call test_duplicate_labels.count_evens$a5_u8
    ; Call to test_duplicate_labels.count_evens$a5_u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_duplicate_labels.count_evens$a5_u8
    ; store evens, r9
    LD ($F00C), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
