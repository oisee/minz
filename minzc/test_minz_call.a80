; MinZ generated code
; Generated: 2025-08-04 23:40:29


; Data section
    ORG $F000

str_0:
    DB 16    ; Length
    DB "Hello from MinZ!"
str_1:
    DB 38    ; Length
    DB "Testing @minz generated function calls"
str_2:
    DB 10    ; Length
    DB "10 + 20 = "

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_minz_call.greet_MinZ
test_minz_call.greet_MinZ:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = string(str_0)
    LD HL, str_0
    ; Print "Hello from MinZ!" (16 chars via loop)
    CALL print_string
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_minz_call.add_u8
test_minz_call.add_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_minz_call.add_u8_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
test_minz_call.add_u8_param_b:
    LD DE, #0000   ; SMC parameter b (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_minz_call.main
test_minz_call.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = string(str_1)
    LD HL, str_1
    LD ($F002), HL    ; Virtual register 1 to memory
    ; Print "Testing @minz generated function calls" (38 chars via loop)
    LD HL, ($F002)    ; Virtual register 1 from memory
    CALL print_string
    ; r2 = call greet_MinZ
    ; Call to greet_MinZ (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_minz_call.greet_MinZ
    ; r4 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r5 = 20
    LD A, 20
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r6 = call add_u8
    ; Call to add_u8 (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL test_minz_call.add_u8
    ; store , r6
    LD ($F006), HL
    ; r7 = string(str_2)
    LD HL, str_2
    ; Print "10 + 20 = " (10 chars via loop)
    CALL print_string
    ; r8 = load result
    LD HL, ($F006)
    LD ($F010), HL    ; Virtual register 8 to memory
    ; print_u16(r8)
    LD HL, ($F010)    ; Virtual register 8 from memory
    CALL print_u16_decimal
    ; r9 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; return r9
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
