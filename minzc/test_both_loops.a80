; MinZ generated code
; Generated: 2025-07-26 19:29:12


; Code section
    ORG $8000


; Function: ...test_both_loops.main
...test_both_loops.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 1
    LD A, 1
    LD ($F004), A
    ; r3 = 2
    LD A, 2
    LD ($F006), A
    ; r5 = 3
    LD A, 3
    LD ($F00A), A
    ; r6 = 4
    LD A, 4
    LD ($F00C), A
    ; r7 = load arr1
    LD HL, ($F000)
    LD ($F00E), HL
    ; Load table base address
    LD HL, ($F00E)
    LD ($F010), HL
    ; Load table base for end calculation
    LD HL, ($F00E)
    LD ($F012), HL
    ; Calculate table end (+ 2 elements * 1 bytes)
    LD HL, ($F012)
    LD DE, 2
    ADD HL, DE
    LD ($F012), HL
    ; Load loop counter
    LD A, 2
    LD ($F014), A
    ; loop_start_1:
loop_start_1:
    ; Check if reached end of table
    LD HL, ($F010)
    LD D, H
    LD E, L
    LD HL, ($F012)
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, ($F016)
    OR A
    JP NZ, loop_end_2
    ; Copy element to buffer at $F000
    LD HL, ($F010)
    LD DE, $F000    ; Buffer address
    LD BC, 1       ; Size
    LDIR            ; Copy to buffer
    ; Copy buffer back to element at $F000
    LD HL, ($F010)
    EX DE, HL       ; DE = destination
    LD HL, $F000    ; Buffer address
    LD BC, 1       ; Size
    LDIR            ; Copy from buffer
    ; Advance to next element (+1 bytes)
    LD HL, ($F010)
    LD DE, 1
    ADD HL, DE
    LD ($F010), HL
    ; Decrement counter and loop if not zero
    LD A, ($F014)
    LD B, A
    DJNZ loop_start_1
    LD A, B
    LD ($F014), A
    ; loop_end_2:
loop_end_2:
    ; return
    RET

    END main
