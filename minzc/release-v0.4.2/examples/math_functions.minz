// Mathematical Functions Example
fun abs(x: i8) -> u8 {
    if x < 0 {
        return (-x) as u8;
    }
    return x as u8;
}

fun min(a: u8, b: u8) -> u8 {
    if a < b {
        return a;
    }
    return b;
}

fun max(a: u8, b: u8) -> u8 {
    if a > b {
        return a;
    }
    return b;
}

fun clamp(value: u8, min_val: u8, max_val: u8) -> u8 {
    if value < min_val {
        return min_val;
    }
    if value > max_val {
        return max_val;
    }
    return value;
}

fun lerp(a: u8, b: u8, t: u8) -> u8 {
    // Linear interpolation: a + (b - a) * t / 255
    let diff: i16 = (b as i16) - (a as i16);
    let scaled = (diff * (t as i16)) / 255;
    return ((a as i16) + scaled) as u8;
}

fun sqrt_approx(n: u16) -> u8 {
    // Simple square root approximation
    if n == 0 {
        return 0;
    }
    
    let x: u16 = n;
    let y: u16 = (x + 1) / 2;
    
    while y < x {
        x = y;
        y = (x + n / x) / 2;
    }
    
    return (x & 0xFF) as u8;
}

fun main() {
    let a = abs(-42);
    let minimum = min(10, 20);
    let maximum = max(10, 20);
    let clamped = clamp(150, 0, 100);
    let interpolated = lerp(0, 100, 128);
    let root = sqrt_approx(64);
}