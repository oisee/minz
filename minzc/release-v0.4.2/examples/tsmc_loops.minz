// TSMC Loop Examples - demonstrates self-modifying loop patterns

// Pattern 1: Basic array sum with TSMC
@abi("smc")
fun sum_array_tsmc(arr: *u8, count: u16) -> u16 {
    var sum: u16 = 0;
    var i: u16 = 0;
    while i < count {
        sum = sum + *arr;
        arr = arr + 1;  // Self-modifies the dereference above
        i = i + 1;
    }
    return sum;
}

// Pattern 2: Find maximum in array
@abi("smc")
fun find_max_tsmc(arr: *u8, count: u16) -> u8 {
    if count == 0 {
        return 0;
    }
    
    var max: u8 = *arr;
    arr = arr + 1;
    var i: u16 = 1;
    
    while i < count {
        if *arr > max {
            max = *arr;
        }
        arr = arr + 1;  // Advance to next element
        i = i + 1;
    }
    return max;
}

// Pattern 3: Copy memory with TSMC
@abi("smc")
fun memcpy_tsmc(dest: *u8, src: *u8, count: u16) {
    var i: u16 = 0;
    while i < count {
        *dest = *src;
        dest = dest + 1;  // Self-modify destination
        src = src + 1;   // Self-modify source
        i = i + 1;
    }
}

// Pattern 4: String comparison with TSMC
@abi("smc")
fun strcmp_tsmc(s1: *u8, s2: *u8) -> i8 {
    while *s1 != 0 && *s1 == *s2 {
        s1 = s1 + 1;
        s2 = s2 + 1;
    }
    
    // Return difference of final characters
    if *s1 < *s2 {
        return -1;
    } else if *s1 > *s2 {
        return 1;
    } else {
        return 0;
    }
}

// Pattern 5: Count occurrences of character
@abi("smc")
fun count_char_tsmc(str: *u8, ch: u8) -> u16 {
    var count: u16 = 0;
    while *str != 0 {
        if *str == ch {
            count = count + 1;
        }
        str = str + 1;
    }
    return count;
}

// Test function
fun test_tsmc_loops() {
    // Test data
    var data: [10]u8 = [1, 5, 3, 9, 2, 7, 4, 8, 6, 0];
    var hello: [6]u8 = [72, 101, 108, 108, 111, 0];  // "Hello\0"
    var world: [6]u8 = [87, 111, 114, 108, 100, 0];  // "World\0"
    var dest: [10]u8;
    
    // Test array sum
    var sum: u16 = sum_array_tsmc(&data[0], 10);
    
    // Test find max
    var max: u8 = find_max_tsmc(&data[0], 10);
    
    // Test memory copy
    memcpy_tsmc(&dest[0], &data[0], 10);
    
    // Test string comparison
    var cmp: i8 = strcmp_tsmc(&hello[0], &world[0]);
    
    // Test character count
    var count: u16 = count_char_tsmc(&hello[0], 108);  // Count 'l' in "Hello"
}

// Entry point
fun main() {
    test_tsmc_loops();
}