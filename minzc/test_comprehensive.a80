; MinZ generated code
; Generated: 2025-08-09 11:04:38


; Data section
    ORG $F000

str_0:
    DB 12    ; Length
    DB "Hello, MinZ!"
str_1:
    DB 21    ; Length
    DB "Testing MinZ compiler"
str_2:
    DB 14    ; Length
    DB "Result is big!"
str_3:
    DB 15    ; Length
    DB "Result is small"

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.get_cursor
zx.screen.get_cursor:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.init_text
zx.screen.init_text:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 0
    LD A, 0
    ; Register 1 already in A
    ; r2 = 0
    LD A, 0
    LD B, A         ; Store to physical register B
    ; r3 = call zx.screen.set_cursor
    ; Call to zx.screen.set_cursor (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL zx.screen.set_cursor
    ; r4 = 7
    LD A, 7
    LD D, A         ; Store to physical register D
    ; r5 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; r6 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r7 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r8 = call zx.screen.set_text_attr
    ; Call to zx.screen.set_text_attr (args: 4)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 3
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL zx.screen.set_text_attr
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_comprehensive.add$u8$u8
test_comprehensive.add$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_comprehensive.add$u8$u8_param_a.op:
test_comprehensive.add$u8$u8_param_a equ test_comprehensive.add$u8$u8_param_a.op + 1
    LD A, #00      ; Parameter a (gets patched)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
test_comprehensive.add$u8$u8_param_b.op:
test_comprehensive.add$u8$u8_param_b equ test_comprehensive.add$u8$u8_param_b.op + 1
    LD B, #00      ; Parameter b (gets patched)
    LD A, B
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 5 already in A

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
test_comprehensive.add$u8$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
test_comprehensive.add$u8$u8_store_addr.op:
test_comprehensive.add$u8$u8_store_addr equ test_comprehensive.add$u8$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_comprehensive.main$double_0
test_comprehensive.main$double_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_comprehensive.main$double_0_param_x.op:
test_comprehensive.main$double_0_param_x equ test_comprehensive.main$double_0_param_x.op + 1
    LD A, #00      ; Parameter x (gets patched)
    ; Register 1 already in A
    ; r2 = 2
    LD A, 2
    ; Register 2 already in A
    ; r3 = r1 * r2
    ; 8-bit multiplication
    ; Register 1 already in A
    LD B, A       ; B = multiplicand
    ; Register 2 already in A
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, test_comprehensive_main_double_0_mul_done_0
test_comprehensive_main_double_0_mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, test_comprehensive_main_double_0_mul_loop_0
test_comprehensive_main_double_0_mul_done_0:
    LD ($F006), HL    ; Virtual register 3 to memory

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
test_comprehensive.main$double_0_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
test_comprehensive.main$double_0_store_addr.op:
test_comprehensive.main$double_0_store_addr equ test_comprehensive.main$double_0_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_comprehensive.main
test_comprehensive.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Load string "Hello, MinZ!"
    LD HL, str_0
    ; store greeting, r2
    LD ($F002), HL
    ; r3 = string(str_1)
    LD HL, str_1
    LD ($F006), HL    ; Virtual register 3 to memory
    ; Print "Testing MinZ compiler" (21 chars via loop)
    LD HL, ($F006)    ; Virtual register 3 from memory
    CALL print_string
    ; r5 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r6 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; r7 = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; r8 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; unknown op 39
    ; Smart patch 'store_u8' for test_comprehensive.add$u8$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (test_comprehensive.add$u8$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (test_comprehensive.add$u8$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter a = 0
    LD A, 0               ; Parameter value
    LD (test_comprehensive.add$u8$u8_param_a+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD A, 0               ; Parameter value
    LD (test_comprehensive.add$u8$u8_param_b+1), A   ; Patch parameter immediate
    ; r9 = call test_comprehensive.add$u8$u8
    ; Call to test_comprehensive.add$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL test_comprehensive.add$u8$u8
    ; store sum, r9
    LD ($F008), HL
    ; r11 = load sum
    LD HL, ($F008)
    ; Register 11 already in HL
    ; unknown op 39
    ; Smart patch 'store_u8' for test_comprehensive.main$double_0_return_patch
    LD A, #00               ; NOP opcode
    LD (test_comprehensive.main$double_0_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (test_comprehensive.main$double_0_store_addr), HL
    ; unknown op 41
    ; Patch parameter x = 0
    LD A, 0               ; Parameter value
    LD (test_comprehensive.main$double_0_param_x+1), A   ; Patch parameter immediate
    ; r12 = call test_comprehensive.main$double_0
    ; Call to test_comprehensive.main$double_0 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_comprehensive.main$double_0
    ; store result, r12
    LD ($F014), HL
    ; r13 = 2
    LD A, 2
    LD ($F01A), A     ; Virtual register 13 to memory
    ; r14 = call zx.screen.set_border
    ; Call to zx.screen.set_border (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F01A)    ; Virtual register 13 from memory
    PUSH HL       ; Argument 0
    CALL zx.screen.set_border
    ; r16 = 42
    LD A, 42
    LD L, A         ; Store to physical register L
    ; r17 = load numbers
    LD HL, ($F01E)
    ; Register 17 already in HL
    ; r18 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; Calculate array element address
    ; Register 17 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F026), HL    ; Virtual register 19 to memory
    ; Store to array[index] (u8)
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r20 = load result
    LD HL, ($F014)
    ; Register 20 already in HL
    ; r21 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; r22 = r20 > r21
    ; Register 20 already in HL
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, test_comprehensive_main_gt_check_zero_1
    LD HL, 0       ; False (negative)
    JP test_comprehensive_main_gt_done_1
test_comprehensive_main_gt_check_zero_1:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, test_comprehensive_main_gt_false_1
    LD HL, 1       ; True (positive and non-zero)
    JP test_comprehensive_main_gt_done_1
test_comprehensive_main_gt_false_1:
    LD HL, 0       ; False (zero)
test_comprehensive_main_gt_done_1:
    LD ($F02C), HL    ; Virtual register 22 to memory
    ; jump_if_not r22, else_1
    LD A, ($F02C)     ; Virtual register 22 from memory
    OR A
    JP Z, test_comprehensive_main_else_1
    ; r23 = string(str_2)
    LD HL, str_2
    LD ($F02E), HL    ; Virtual register 23 to memory
    ; Print "Result is big!" (14 chars via loop)
    LD HL, ($F02E)    ; Virtual register 23 from memory
    CALL print_string
    ; jump end_if_2
    JP test_comprehensive_main_end_if_2
    ; else_1:
test_comprehensive_main_else_1:
    ; r24 = string(str_3)
    LD HL, str_3
    ; Print "Result is small" (15 chars via loop)
    CALL print_string
    ; end_if_2:
test_comprehensive_main_end_if_2:
    ; r25 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r26 = 5
    LD A, 5
    LD ($F034), A     ; Virtual register 26 to memory
    ; Initialize loop variable i
    ; for_loop_3:
test_comprehensive_main_for_loop_3:
    ; Check i < end
    LD HL, ($F034)    ; Virtual register 26 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, test_comprehensive_main_lt_true_2
    LD HL, 0       ; False
    JP test_comprehensive_main_lt_done_2
test_comprehensive_main_lt_true_2:
    LD HL, 1       ; True
test_comprehensive_main_lt_done_2:
    ; jump_if_not r28, for_end_4
    LD A, L
    OR A
    JP Z, test_comprehensive_main_for_end_4
    ; r29 = load i
    LD HL, ($F000)
    ; Register 29 already in HL
    ; r30 = load numbers
    LD HL, ($F01E)
    ; r31 = load i
    LD HL, ($F000)
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F040), HL    ; Virtual register 32 to memory
    ; Store to array[index] (u8)
    LD HL, ($F040)    ; Virtual register 32 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r33 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Increment i
    LD D, H
    LD E, L
    ; Register 33 already in HL
    ADD HL, DE
    ; jump for_loop_3
    JP test_comprehensive_main_for_loop_3
    ; for_end_4:
test_comprehensive_main_for_end_4:
    ; return
    RET

    END main
