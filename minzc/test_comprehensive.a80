; MinZ generated code
; Generated: 2025-08-03 16:51:43


; Data section
    ORG $F000

str_0:
    DB 29    ; Length
    DB "=== Test 1: Just forEach ==="
    DB 10
str_1:
    DB 26    ; Length
    DB 10
    DB "=== Test 2: Just map ==="
    DB 10
str_2:
    DB 29    ; Length
    DB 10
    DB "=== Test 3: Just filter ==="
    DB 10
str_3:
    DB 33    ; Length
    DB 10
    DB "=== Test 4: map then filter ==="
    DB 10
str_4:
    DB 33    ; Length
    DB 10
    DB "=== Test 5: filter then map ==="
    DB 10
str_5:
    DB 34    ; Length
    DB 10
    DB "=== Test 6: Multiple filters ==="
    DB 10
str_6:
    DB 31    ; Length
    DB 10
    DB "=== Test 7: Multiple maps ==="
    DB 10
str_7:
    DB 31    ; Length
    DB 10
    DB "=== Test 8: Complex chain ==="
    DB 10
str_8:
    DB 29    ; Length
    DB 10
    DB "=== Test 9: With iter() ==="
    DB 10

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.main
...test_iterator_comprehensive.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = string(str_0)
    LD HL, str_0
    ; Print "=== Test 1: Just forEach ===
" (29 chars via loop)
    CALL print_string
    ; r3 = load numbers
    LD HL, ($F002)
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD C, A         ; Store to physical register C
    ; Pointer to array start
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; djnz_loop_1:
djnz_loop_1:
    ; Load element via pointer
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD A, (HL)
    LD D, A         ; Store to physical register D
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    ; Advance to next element
    LD HL, ($F00A)    ; Virtual register 5 from memory
    INC HL
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; DJNZ - decrement and loop
    LD A, C
    LD B, A
    DJNZ djnz_loop_1
    LD A, B
    LD C, A         ; Store to physical register C
    ; r8 = string(str_1)
    LD HL, str_1
    ; Print "
=== Test 2: Just map ===
" (26 chars via loop)
    CALL print_string
    ; r9 = load numbers
    LD HL, ($F002)
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; Pointer to array start
    LD D, H
    LD E, L
    ; djnz_loop_2:
djnz_loop_2:
    ; Load element via pointer
    LD H, D
    LD L, E
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; Call double
    ; Call to double (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.double
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F01A)    ; Virtual register 13 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    ; Advance to next element
    LD H, D
    LD L, E
    INC HL
    LD D, H
    LD E, L
    ; DJNZ - decrement and loop
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD B, A
    DJNZ djnz_loop_2
    LD A, B
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r15 = string(str_2)
    LD HL, str_2
    ; Print "
=== Test 3: Just filter ===
" (29 chars via loop)
    CALL print_string
    ; r16 = load numbers
    LD HL, ($F002)
    ; Register 16 already in HL
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; Pointer to array start
    ; Register 16 already in HL
    ; djnz_loop_3:
djnz_loop_3:
    ; Load element via pointer
    LD A, (HL)
    LD ($F026), A     ; Virtual register 19 to memory
    ; Call is_even
    ; Call to is_even (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.is_even
    ; Skip if filter predicate is false
    LD A, L
    OR A
    JP Z, filter_continue_4
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    LD ($F02A), HL    ; Virtual register 21 to memory
    ; filter_continue_4:
filter_continue_4:
    ; Advance to next element
    INC HL
    ; DJNZ - decrement and loop
    LD A, H
    LD B, A
    DJNZ djnz_loop_3
    LD A, B
    LD H, A         ; Store to physical register H
    ; r22 = string(str_3)
    LD HL, str_3
    ; Print "
=== Test 4: map then filter ===
" (33 chars via loop)
    CALL print_string
    ; r23 = load numbers
    LD HL, ($F002)
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; Pointer to array start
    ; djnz_loop_5:
djnz_loop_5:
    ; Load element via pointer
    LD A, (HL)
    LD ($F034), A     ; Virtual register 26 to memory
    ; Call double
    ; Call to double (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F034)    ; Virtual register 26 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.double
    ; Call gt_5
    ; Call to gt_5 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.gt_5
    LD ($F038), HL    ; Virtual register 28 to memory
    ; Skip if filter predicate is false
    LD A, ($F038)     ; Virtual register 28 from memory
    OR A
    JP Z, filter_continue_6
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    ; filter_continue_6:
filter_continue_6:
    ; Advance to next element
    INC HL
    ; DJNZ - decrement and loop
    LD A, L
    LD B, A
    DJNZ djnz_loop_5
    LD A, B
    LD L, A         ; Store to HL (low byte)
    ; r30 = string(str_4)
    LD HL, str_4
    ; Print "
=== Test 5: filter then map ===
" (33 chars via loop)
    CALL print_string
    ; r31 = load numbers
    LD HL, ($F002)
    ; Register 31 already in HL
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; Pointer to array start
    ; Register 31 already in HL
    ; djnz_loop_7:
djnz_loop_7:
    ; Load element via pointer
    LD A, (HL)
    LD ($F044), A     ; Virtual register 34 to memory
    ; Call is_odd
    ; Call to is_odd (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F044)    ; Virtual register 34 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.is_odd
    ; Skip if filter predicate is false
    LD A, L
    OR A
    JP Z, filter_continue_8
    ; Call triple
    ; Call to triple (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F044)    ; Virtual register 34 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.triple
    LD ($F048), HL    ; Virtual register 36 to memory
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F048)    ; Virtual register 36 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    ; filter_continue_8:
filter_continue_8:
    ; Advance to next element
    INC HL
    ; DJNZ - decrement and loop
    LD A, H
    LD B, A
    DJNZ djnz_loop_7
    LD A, B
    LD H, A         ; Store to physical register H
    ; r38 = string(str_5)
    LD HL, str_5
    ; Print "
=== Test 6: Multiple filters ===
" (34 chars via loop)
    CALL print_string
    ; r39 = load numbers
    LD HL, ($F002)
    ; Register 39 already in HL
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; Pointer to array start
    ; Register 39 already in HL
    ; djnz_loop_9:
djnz_loop_9:
    ; Load element via pointer
    LD A, (HL)
    LD ($F054), A     ; Virtual register 42 to memory
    ; Call gt_1
    ; Call to gt_1 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F054)    ; Virtual register 42 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.gt_1
    ; Skip if filter predicate is false
    LD A, L
    OR A
    JP Z, filter_continue_10
    ; Call lt_5
    ; Call to lt_5 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F054)    ; Virtual register 42 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.lt_5
    LD ($F058), HL    ; Virtual register 44 to memory
    ; Skip if filter predicate is false
    LD A, ($F058)     ; Virtual register 44 from memory
    OR A
    JP Z, filter_continue_11
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F054)    ; Virtual register 42 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    ; filter_continue_10:
filter_continue_10:
    ; filter_continue_11:
filter_continue_11:
    ; Advance to next element
    INC HL
    ; DJNZ - decrement and loop
    LD A, H
    LD B, A
    DJNZ djnz_loop_9
    LD A, B
    LD H, A         ; Store to physical register H
    ; r46 = string(str_6)
    LD HL, str_6
    ; Print "
=== Test 7: Multiple maps ===
" (31 chars via loop)
    CALL print_string
    ; r47 = load numbers
    LD HL, ($F002)
    ; Register 47 already in HL
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; Pointer to array start
    ; Register 47 already in HL
    ; djnz_loop_12:
djnz_loop_12:
    ; Load element via pointer
    LD A, (HL)
    LD ($F064), A     ; Virtual register 50 to memory
    ; Call double
    ; Call to double (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F064)    ; Virtual register 50 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.double
    ; Call add_one
    ; Call to add_one (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.add_one
    LD ($F068), HL    ; Virtual register 52 to memory
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F068)    ; Virtual register 52 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    ; Advance to next element
    INC HL
    ; DJNZ - decrement and loop
    LD A, H
    LD B, A
    DJNZ djnz_loop_12
    LD A, B
    LD H, A         ; Store to physical register H
    ; r54 = string(str_7)
    LD HL, str_7
    ; Print "
=== Test 8: Complex chain ===
" (31 chars via loop)
    CALL print_string
    ; r55 = load numbers
    LD HL, ($F002)
    ; Register 55 already in HL
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; Pointer to array start
    ; Register 55 already in HL
    ; djnz_loop_13:
djnz_loop_13:
    ; Load element via pointer
    LD A, (HL)
    LD ($F074), A     ; Virtual register 58 to memory
    ; Call double
    ; Call to double (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F074)    ; Virtual register 58 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.double
    ; Call gt_5
    ; Call to gt_5 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.gt_5
    LD ($F078), HL    ; Virtual register 60 to memory
    ; Skip if filter predicate is false
    LD A, ($F078)     ; Virtual register 60 from memory
    OR A
    JP Z, filter_continue_14
    ; Call add_one
    ; Call to add_one (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.add_one
    ; Call is_odd
    ; Call to is_odd (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.is_odd
    ; Skip if filter predicate is false
    LD A, L
    OR A
    JP Z, filter_continue_15
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    LD ($F07E), HL    ; Virtual register 63 to memory
    ; filter_continue_14:
filter_continue_14:
    ; filter_continue_15:
filter_continue_15:
    ; Advance to next element
    INC HL
    ; DJNZ - decrement and loop
    LD A, H
    LD B, A
    DJNZ djnz_loop_13
    LD A, B
    LD H, A         ; Store to physical register H
    ; r64 = string(str_8)
    LD HL, str_8
    ; Print "
=== Test 9: With iter() ===
" (29 chars via loop)
    CALL print_string
    ; r65 = load numbers
    LD HL, ($F002)
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; Pointer to array start
    ; djnz_loop_16:
djnz_loop_16:
    ; Load element via pointer
    LD A, (HL)
    LD ($F088), A     ; Virtual register 68 to memory
    ; Call double
    ; Call to double (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F088)    ; Virtual register 68 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.double
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_iterator_comprehensive.print_u8
    ; Register 70 already in HL
    ; Advance to next element
    INC HL
    ; DJNZ - decrement and loop
    LD A, L
    LD B, A
    DJNZ djnz_loop_16
    LD A, B
    LD L, A         ; Store to HL (low byte)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.double
...test_iterator_comprehensive.double:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_comprehensive.double_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.triple
...test_iterator_comprehensive.triple:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_comprehensive.triple_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_1
.mul_loop_1:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_1
.mul_done_1:
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.add_one
...test_iterator_comprehensive.add_one:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_comprehensive.add_one_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.is_even
...test_iterator_comprehensive.is_even:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_comprehensive.is_even_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r4 = r2 & r3
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; Register 4 already in HL
    ; r5 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r6 = r4 == r5
    ; Register 4 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; return r6
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.is_odd
...test_iterator_comprehensive.is_odd:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_comprehensive.is_odd_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r4 = r2 & r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r5 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r6 = r4 == r5
    LD D, H
    LD E, L
    ; Register 5 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; return r6
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.gt_1
...test_iterator_comprehensive.gt_1:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_comprehensive.gt_1_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r4 = r2 > r3
    LD D, H
    LD E, L
    ; Register 3 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L8
    JP P, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.lt_5
...test_iterator_comprehensive.lt_5:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_comprehensive.lt_5_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; r4 = r2 < r3
    LD D, H
    LD E, L
    ; Register 3 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.gt_5
...test_iterator_comprehensive.gt_5:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_iterator_comprehensive.gt_5_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; r4 = r2 > r3
    LD D, H
    LD E, L
    ; Register 3 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L12
    JP P, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_iterator_comprehensive.print_u8
...test_iterator_comprehensive.print_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
