; MinZ generated code
; Generated: 2025-08-03 22:08:54


; Data section
    ORG $F000

...test_global_access.count:
    DB 0
...test_global_access.max_value:
    DW 1000
...test_global_access.total:
    DW 0

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_global_access.increment
...test_global_access.increment:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = load ...test_global_access.count
    LD HL, ($F000)
    ; r2 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r3 = r1 + r2
    LD D, H
    LD E, L
    ADD HL, DE
    ; store count, r3
    LD ($F000), HL
    ; r4 = load ...test_global_access.count
    LD HL, ($F000)
    ; r5 = 10
    LD A, 10
    LD E, A         ; Store to physical register E
    ; r6 = r4 > r5
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L2
    JP P, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r6, else_1
    LD A, H
    OR A
    JP Z, else_1
    ; r7 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store count, r7
    LD ($F000), HL
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_global_access.add_to_total
...test_global_access.add_to_total:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = load ...test_global_access.total
    LD HL, ($F040)
...test_global_access.add_to_total_param_value:
    LD HL, #0000   ; SMC parameter value
    ; Register 3 already in HL
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ; Register 3 already in HL
    ADD HL, DE
    LD D, H
    LD E, L
    ; store total, r4
    LD H, D
    LD L, E
    LD ($F000), HL
    ; r5 = load ...test_global_access.total
    LD HL, ($F040)
    ; r6 = load ...test_global_access.max_value
    LD HL, ($F020)
    ; r7 = r5 > r6
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L4
    JP P, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD B, H
    LD C, L
    ; jump_if_not r7, else_3
    LD A, C
    OR A
    JP Z, else_3
    ; r8 = load ...test_global_access.max_value
    LD HL, ($F020)
    ; store total, r8
    LD ($F000), HL
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_global_access.get_count
...test_global_access.get_count:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = load ...test_global_access.count
    LD HL, ($F000)
    ; Register 1 already in HL
    ; return r1
    ; Register 1 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_global_access.main
...test_global_access.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call increment
    ; Call to increment (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...test_global_access.increment
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r2 = call increment
    ; Call to increment (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...test_global_access.increment
    ; r4 = call get_count
    ; Call to get_count (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...test_global_access.get_count
    LD ($F008), HL    ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD ($F006), HL
    ; Direct print "Count: " (7 chars)
    ; Direct print "Count: " (7 chars)
    LD A, 67
    RST 16             ; Print character
    LD A, 111
    RST 16             ; Print character
    LD A, 117
    RST 16             ; Print character
    LD A, 110
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 58
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; r5 = 100
    LD A, 100
    LD L, A         ; Store to physical register L
    ; r6 = call add_to_total
    ; Call to add_to_total (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_global_access.add_to_total
    ; Register 6 already in HL
    ; r7 = 200
    LD A, 200
    LD H, A         ; Store to physical register H
    ; r8 = call add_to_total
    ; Call to add_to_total (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_global_access.add_to_total
    ; Direct print "Total: " (7 chars)
    ; Direct print "Total: " (7 chars)
    LD A, 84
    RST 16             ; Print character
    LD A, 111
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 97
    RST 16             ; Print character
    LD A, 108
    RST 16             ; Print character
    LD A, 58
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
