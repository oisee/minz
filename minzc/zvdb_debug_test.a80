; MinZ generated code
; Generated: 2025-08-06 21:00:35


; Data section
    ORG $F000

.Users.alice.dev.zvdb-minz.zvdb_debug_test.test_v1:
    DS 8
.Users.alice.dev.zvdb-minz.zvdb_debug_test.test_v2:
    DS 8
str_0:
    DB 20    ; Length
    DB "ZVDB TAS Debug Test"
    DB 10
str_1:
    DB 18    ; Length
    DB "Hamming distance: "
str_2:
    DB 19    ; Length
    DB "TAS Test Complete!"
    DB 10

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb_debug_test.popcount_simple$u8
.Users.alice.dev.zvdb-minz.zvdb_debug_test.popcount_simple$u8:
; TRUE SMC function with immediate anchors
val$immOP:
    LD A, 0        ; val anchor (will be patched)
val$imm0 EQU val$immOP+1
    LD ($F00A), A     ; Virtual register 5 to memory
    ; unknown op 57
    LD A, H
    OR L           ; Test HL (set flags)
    ; jump_if_not r10, else_1
    LD A, ($F014)     ; Virtual register 10 from memory
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_1
    ; jump end_if_2
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_2
    ; else_1:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_1:
    ; end_if_2:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_2:
    ; unknown op 57
    LD A, H
    OR L           ; Test HL (set flags)
    ; jump_if_not r21, else_3
    LD A, D
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_3
    ; jump end_if_4
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_4
    ; else_3:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_3:
    ; end_if_4:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_4:
    ; unknown op 57
    LD HL, ($F03C)    ; Virtual register 30 from memory
    LD A, H
    OR L           ; Test HL (set flags)
    ; jump_if_not r32, else_5
    LD A, H
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_5
    ; jump end_if_6
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_6
    ; else_5:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_5:
    ; end_if_6:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_6:
    ; unknown op 57
    LD A, H
    OR L           ; Test HL (set flags)
    ; jump_if_not r43, else_7
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_7
    ; jump end_if_8
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_8
    ; else_7:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_7:
    ; end_if_8:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_8:
    ; unknown op 57
    LD A, H
    OR L           ; Test HL (set flags)
    ; jump_if_not r54, else_9
    LD A, ($F06C)     ; Virtual register 54 from memory
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_9
    ; jump end_if_10
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_10
    ; else_9:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_9:
    ; end_if_10:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_10:
    ; unknown op 57
    LD A, H
    OR L           ; Test HL (set flags)
    ; jump_if_not r65, else_11
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_11
    ; jump end_if_12
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_12
    ; else_11:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_11:
    ; end_if_12:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_12:
    ; unknown op 57
    LD A, H
    OR L           ; Test HL (set flags)
    ; jump_if_not r76, else_13
    ; Register 76 already in A
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_13
    ; jump end_if_14
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_14
    ; else_13:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_13:
    ; end_if_14:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_14:
    ; unknown op 57
    LD A, H
    OR L           ; Test HL (set flags)
    ; jump_if_not r87, else_15
    LD A, B
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_15
    ; jump end_if_16
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_16
    ; else_15:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_else_15:
    ; end_if_16:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_popcount_simple_u8_end_if_16:
    ; r91 = load count
    LD A, ($F004)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; return r91
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb_debug_test.hamming_test$TestVector$TestVector
.Users.alice.dev.zvdb-minz.zvdb_debug_test.hamming_test$TestVector$TestVector:
; TRUE SMC function with immediate anchors
    ; r6 = 8
    LD A, 8
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; Initialize loop variable i
    ; for_loop_17:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_hamming_test_TestVector_TestVector_for_loop_17:
    ; Check i < end
    EXX               ; Switch to shadow registers
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_debug_test_hamming_test_TestVector_TestVector_lt_true_0
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_hamming_test_TestVector_TestVector_lt_done_0
_Users_alice_dev_zvdb-minz_zvdb_debug_test_hamming_test_TestVector_TestVector_lt_true_0:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_debug_test_hamming_test_TestVector_TestVector_lt_done_0:
    ; jump_if_not r8, for_end_18
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_hamming_test_TestVector_TestVector_for_end_18
v1$immOP:
    ; Load array element (u8)
    ; Register 11 already in HL
    PUSH HL
    LD A, H
    LD E, A
    XOR D, D    ; Optimized: was LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
v2$immOP:
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    XOR D, D    ; Optimized: was LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F022), A     ; Virtual register 17 to memory
    ; r22 = call .Users.alice.dev.zvdb-minz.zvdb_debug_test.popcount_simple$u8
    ; Call to .Users.alice.dev.zvdb-minz.zvdb_debug_test.popcount_simple$u8 (args: 1)
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.zvdb-minz.zvdb_debug_test.popcount_simple$u8
    LD A, ($F02A)     ; Virtual register 21 from memory
    LD (val$imm0), A        ; Patch val
    CALL .Users.alice.dev.zvdb-minz.zvdb_debug_test.popcount_simple$u8
    ; Register 22 already in HL
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; r26 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; jump for_loop_17
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_hamming_test_TestVector_TestVector_for_loop_17
    ; for_end_18:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_hamming_test_TestVector_TestVector_for_end_18:
    ; r27 = load dist
    LD A, ($F006)
    LD L, A         ; Store to physical register L
    ; return r27
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb_debug_test.main
.Users.alice.dev.zvdb-minz.zvdb_debug_test.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r1 = string(str_0)
    LD HL, str_0
    LD ($F002), HL    ; Virtual register 1 to memory
    ; Print "ZVDB TAS Debug Test
" (20 chars via loop)
    LD HL, ($F002)    ; Virtual register 1 from memory
    CALL print_string
    ; r3 = 8
    LD A, 8
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    LD HL, ($F004)    ; Virtual register 2 from memory
    ; for_loop_19:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_main_for_loop_19:
    ; Check i < end
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_debug_test_main_lt_true_1
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_main_lt_done_1
_Users_alice_dev_zvdb-minz_zvdb_debug_test_main_lt_true_1:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_debug_test_main_lt_done_1:
    ; jump_if_not r5, for_end_20
    LD A, H
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_debug_test_main_for_end_20
    ; Store to array[index] (u8)
    PUSH HL
    LD A, ($F00C)     ; Virtual register 6 from memory
    POP HL
    LD (HL), A
    ; Store to array[index] (u8)
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r4++
    INC HL
    ; jump for_loop_19
    JP _Users_alice_dev_zvdb-minz_zvdb_debug_test_main_for_loop_19
    ; for_end_20:
_Users_alice_dev_zvdb-minz_zvdb_debug_test_main_for_end_20:
    ; r22 = call .Users.alice.dev.zvdb-minz.zvdb_debug_test.hamming_test$TestVector$TestVector
    ; Call to .Users.alice.dev.zvdb-minz.zvdb_debug_test.hamming_test$TestVector$TestVector (args: 2)
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.zvdb-minz.zvdb_debug_test.hamming_test$TestVector$TestVector
    LD HL, ($F028)    ; Virtual register 20 from memory
    LD (v1$imm0), HL       ; Patch v1 (atomic)
    LD HL, ($F02A)    ; Virtual register 21 from memory
    LD (v2$imm0), HL       ; Patch v2 (atomic)
    CALL .Users.alice.dev.zvdb-minz.zvdb_debug_test.hamming_test$TestVector$TestVector
    ; Register 22 already in HL
    ; r23 = string(str_1)
    LD HL, str_1
    ; Print "Hamming distance: " (18 chars via loop)
    CALL print_string
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; r24 = string(str_2)
    LD HL, str_2
    ; Print "TAS Test Complete!
" (19 chars via loop)
    CALL print_string
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW val$imm0           ; .Users.alice.dev.zvdb-minz.zvdb_debug_test.popcount_simple$u8.val
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW v1$imm0           ; .Users.alice.dev.zvdb-minz.zvdb_debug_test.hamming_test$TestVector$TestVector.v1
    DB 8              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW v2$imm0           ; .Users.alice.dev.zvdb-minz.zvdb_debug_test.hamming_test$TestVector$TestVector.v2
    DB 8              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main


; Assembly peephole optimization: 1 patterns applied