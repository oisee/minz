; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   test_viz.counter: u8

Function test_viz.factorial$u8(n: u8) -> u8
  @smc
  @recursive
  Instructions:
      0: LOAD_PARAM
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_1
      4: r5 = 1
      5: return r5
      6: jump end_if_2
      7: else_1:
      8: LOAD_PARAM
      9: LOAD_PARAM
     10: r8 = 1
     11: r9 = r7 - r8
     12: LOAD_PARAM
     13: r11 = 1
     14: r12 = r10 - r11
     15: r13 = call test_viz.factorial$u8
     16: r14 = r6 * r13
     17: return r14
     18: end_if_2:
     19: return

Function test_viz.fibonacci$u8(n: u8) -> u8
  @smc
  Locals:
    r6 = a: u8
    r8 = b: u8
    r10 = i: u8
    r15 = temp: u8
  Instructions:
      0: LOAD_PARAM
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_3
      4: LOAD_PARAM
      5: return r5
      6: jump end_if_4
      7: else_3:
      8: end_if_4:
      9: r7 = 0
     10: store , r7
     11: r9 = 1
     12: store , r9
     13: r11 = 2
     14: store , r11
     15: loop_5:
     16: r12 = load i
     17: LOAD_PARAM
     18: r14 = r12 <= r13
     19: jump_if_not r14, end_loop_6
     20: r16 = load a
     21: r17 = load b
     22: r18 = r16 + r17
     23: store , r18
     24: r19 = load b
     25: store a, r19
     26: r20 = load temp
     27: store b, r20
     28: r21 = load i
     29: r22 = 1
     30: r23 = r21 + r22
     31: store i, r23
     32: jump loop_5
     33: end_loop_6:
     34: r24 = load b
     35: return r24

Function test_viz.main() -> void
  @smc
  Locals:
    r1 = result1: u8
    r5 = result2: u8
  Instructions:
      0: r2 = 5
      1: r3 = 5
      2: r4 = call test_viz.factorial$u8
      3: store , r4
      4: r6 = 10
      5: r7 = 10
      6: r8 = call test_viz.fibonacci$u8
      7: store , r8
      8: LOAD_STRING
      9: PRINT_STRING ; Print "Factorial(5) = " (15 chars via loop)
     10: r10 = load result1
     11: PRINT_U8
     12: PRINT_STRING_DIRECT ; Direct print "
" (1 chars)
     13: LOAD_STRING
     14: PRINT_STRING ; Print "Fibonacci(10) = " (16 chars via loop)
     15: r12 = load result2
     16: PRINT_U8
     17: PRINT_STRING_DIRECT ; Direct print "
" (1 chars)
     18: r13 = load test_viz.counter
     19: r14 = 1
     20: r15 = r13 + r14
     21: store counter, r15
     22: return

