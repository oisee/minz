; MinZ Intermediate Representation (MIR)
; Module: main

Function test_m68k.fibonacci$u8(n: u8) -> u8
  @smc
  @recursive
  Instructions:
      0: LOAD_PARAM
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_1
      4: LOAD_PARAM
      5: return r5
      6: jump end_if_2
      7: else_1:
      8: end_if_2:
      9: LOAD_PARAM
     10: r7 = 1
     11: r8 = r6 - r7
     12: LOAD_PARAM
     13: r10 = 1
     14: r11 = r9 - r10
     15: r12 = call test_m68k.fibonacci$u8
     16: LOAD_PARAM
     17: r14 = 2
     18: r15 = r13 - r14
     19: LOAD_PARAM
     20: r17 = 2
     21: r18 = r16 - r17
     22: r19 = call test_m68k.fibonacci$u8
     23: r20 = r12 + r19
     24: return r20

Function test_m68k.main() -> void
  @smc
  Locals:
    r1 = result: u8
  Instructions:
      0: r2 = 10
      1: r3 = 10
      2: r4 = call test_m68k.fibonacci$u8
      3: store , r4
      4: return

