; MinZ Intermediate Representation (MIR)
; Module: main

Function test_c_backend.main() -> void
  @smc
  Locals:
    r1 = x: u8
    r3 = y: u8
    r5 = sum: u8
    r13 = i: u8
    r28 = result: u8
  Instructions:
      0: r2 = 10
      1: store , r2
      2: r4 = 20
      3: store , r4
      4: r6 = load x
      5: r7 = load y
      6: r8 = r6 + r7
      7: store , r8
      8: r9 = load sum
      9: r10 = load sum
     10: r11 = call test_c_backend.print_u8$u8
     11: r12 = call test_c_backend.print_newline
     12: r14 = 0
     13: store , r14
     14: loop_1:
     15: r15 = load i
     16: r16 = 5
     17: r17 = r15 < r16
     18: jump_if_not r17, end_loop_2
     19: r18 = load i
     20: r19 = load i
     21: r20 = call test_c_backend.print_u8$u8
     22: r21 = 32
     23: r22 = 32
     24: r23 = call test_c_backend.print_char$u8
     25: r24 = load i
     26: r25 = 1
     27: r26 = r24 + r25
     28: store i, r26
     29: jump loop_1
     30: end_loop_2:
     31: r27 = call test_c_backend.print_newline
     32: r29 = 15
     33: r30 = 25
     34: r31 = 15
     35: r32 = 25
     36: r33 = call test_c_backend.add$u8$u8
     37: store , r33
     38: r34 = load result
     39: r35 = load result
     40: r36 = call test_c_backend.print_u8$u8
     41: r37 = call test_c_backend.print_newline
     42: return

Function test_c_backend.add$u8$u8(a: u8, b: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r5 = r3 + r4
      3: return r5

Function test_c_backend.print_char$u8(ch: u8) -> void
  @smc
  Instructions:
      0: return

Function test_c_backend.print_u8$u8(value: u8) -> void
  @smc
  Instructions:
      0: return

Function test_c_backend.print_newline() -> void
  @smc
  Instructions:
      0: return

