; MinZ generated code
; Generated: 2025-07-28 12:22:38


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.types_demo.test_u8
...examples.types_demo.test_u8:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD C, A         ; Store to physical register C
    LD A, E       ; Get parameter b
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param a
    ; Load parameter a
    ; r4 = param b
    ; Load parameter b
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.types_demo.test_u16
...examples.types_demo.test_u16:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD B, H
    LD C, L
    EX DE, HL     ; Get parameter y from DE
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = param x
    ; Load parameter x
    ; r4 = param y
    ; Load parameter y
    ; r5 = r3 * r4
    ; 16-bit multiplication
    ; Register 3 already in HL
    LD (mul_src1_0), HL  ; Save multiplicand
    LD H, D
    LD L, E
    LD (mul_src2_0), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_0)  ; DE = multiplicand
    LD BC, (mul_src2_0)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_0
.mul16_loop_0:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_0
.mul16_done_0:
mul_src1_0: DW 0
mul_src2_0: DW 0
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.types_demo.test_i8
...examples.types_demo.test_i8:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    LD A, E       ; Get parameter b
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param a
    ; Load parameter a
    ; r4 = param b
    ; Load parameter b
    ; r5 = r3 - r4
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.types_demo.test_bool
...examples.types_demo.test_bool:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = param x
    ; Load parameter x
    ; r3 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; r4 = r2 > r3
    ; Register 2 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    JP P, .L2
    LD HL, 0
    JP .L3
.L2:
    LD HL, 1
.L3:
    ; return r4
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.types_demo.test_pointers
...examples.types_demo.test_pointers:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    LD A, E       ; Get parameter value
    LD ($F004), A     ; Virtual register 2 to memory
    ; return
    LD SP, IX
    POP IX
    RET

    END main
