; MinZ generated code
; Generated: 2025-07-28 12:22:38


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_abi_demo.smc_add
...examples.simple_abi_demo.smc_add:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD C, A         ; Store to physical register C
    LD A, E       ; Get parameter y
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param x
    ; Load parameter x
    ; r4 = param y
    ; Load parameter y
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_abi_demo.register_multiply
...examples.simple_abi_demo.register_multiply:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    LD A, E       ; Get parameter b
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 * r4
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_abi_demo.stack_process
...examples.simple_abi_demo.stack_process:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    LD A, E       ; Get parameter offset
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = load data
    LD HL, ($F000)
    ; r4 = load offset
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 5 already in HL
    ; return r5
    ; Register 5 already in HL
    LD SP, IX
    POP IX
    RET

    END main
