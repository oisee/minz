; MinZ generated code
; Generated: 2025-07-28 12:22:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci.fibonacci
...examples.fibonacci.fibonacci:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = param n
    ; Load parameter n
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = param n
    ; Load parameter n
    ; return r5
    LD SP, IX
    POP IX
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; r7 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; store , r7
    LD ($F000), HL
    ; r9 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; store , r9
    LD ($F002), HL
    ; r11 = 2
    LD A, 2
    LD ($F016), A     ; Virtual register 11 to memory
    ; store , r11
    LD HL, ($F016)    ; Virtual register 11 from memory
    LD ($F004), HL
    ; loop_3:
loop_3:
    ; r12 = load i
    LD HL, ($F004)
    ; r13 = param n
    ; Load parameter n
    ; r14 = r12 <= r13
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r14, end_loop_4
    ; Register 14 already in A
    OR A
    JP Z, end_loop_4
    ; r16 = load a
    LD HL, ($F000)
    ; r17 = load b
    LD HL, ($F002)
    ; r18 = r16 + r17
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r18
    LD ($F005), HL
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r19 = load b
    LD HL, ($F002)
    ; return r19
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci.main
...examples.fibonacci.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; r3 = call fibonacci
    ; Call to fibonacci (args: 1)
    ; Register-based parameter passing
    LD A, L
    ; Parameter n in A
    ; Found function, UsesTrueSMC=false
    CALL fibonacci
    ; store , r3
    LD ($F002), HL
    ; return
    RET

    END main
