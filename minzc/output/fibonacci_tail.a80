; MinZ generated code
; Generated: 2025-07-28 12:22:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci_tail.fib_tail
...examples.fibonacci_tail.fib_tail:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
...examples.fibonacci_tail.fib_tail_param_n:
    LD HL, #0000   ; SMC parameter n (u8->u16)
    ; r5 = 0
    LD A, 0
    LD B, A         ; Store to physical register B
    ; r6 = r4 == r5
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r6, else_1
    LD A, C
    OR A
    JP Z, else_1
...examples.fibonacci_tail.fib_tail_param_a:
    LD HL, #0000   ; SMC parameter a
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; return r7
    LD HL, ($F00E)    ; Virtual register 7 from memory
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    LD A, (...examples.fibonacci_tail.fib_tail_param_n)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r9 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r10 = r8 == r9
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r10, else_3
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_3
...examples.fibonacci_tail.fib_tail_param_b:
    LD HL, #0000   ; SMC parameter b
    LD B, H
    LD C, L
    ; return r11
    LD H, B
    LD L, C
    RET
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    LD A, (...examples.fibonacci_tail.fib_tail_param_n)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r13 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r14 = r12 - r13
    LD D, H
    LD E, L
    ; Register 13 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    LD HL, (...examples.fibonacci_tail.fib_tail_param_b)
    LD ($F01E), HL    ; Virtual register 15 to memory
    LD HL, (...examples.fibonacci_tail.fib_tail_param_a)
    ; Register 16 already in HL
    LD HL, (...examples.fibonacci_tail.fib_tail_param_b)
    LD ($F022), HL    ; Virtual register 17 to memory
    ; r18 = r16 + r17
    ; Register 16 already in HL
    LD D, H
    LD E, L
    LD HL, ($F022)    ; Virtual register 17 from memory
    ADD HL, DE
    ; Register 18 already in HL
    ; r19 = call fib_tail
    ; Call to fib_tail (args: 3)
    ; Stack-based parameter passing
    ; Register 18 already in HL
    PUSH HL       ; Argument 2
    LD HL, ($F01E)    ; Virtual register 15 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL fib_tail
    ; Register 19 already in HL
    ; return r19
    ; Register 19 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci_tail.fibonacci
...examples.fibonacci_tail.fibonacci:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = param n
    ; Load parameter n
    ; r3 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r4 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r5 = call fib_tail
    ; Call to fib_tail (args: 3)
    ; Stack-based parameter passing
    ; Register 4 already in HL
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL fib_tail
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.fibonacci_tail.main
...examples.fibonacci_tail.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; r3 = call fibonacci
    ; Call to fibonacci (args: 1)
    ; Register-based parameter passing
    LD A, L
    ; Parameter n in A
    ; Found function, UsesTrueSMC=false
    CALL fibonacci
    ; Register 3 already in HL
    ; store , r3
    ; Register 3 already in HL
    LD ($F002), HL
    ; return
    RET

    END main
