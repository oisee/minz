// Test advanced @minz metafunction features

// Generate multiple functions with different types
@minz[[[fun add_{0}(a: {0}, b: {0}) -> {0} { return a + b; }]]]("u8")
@minz[[[fun add_{0}(a: {0}, b: {0}) -> {0} { return a + b; }]]]("u16")

// Generate getter/setter pair
@minz[[[
fun get_{0}() -> {1} { return {0}; }
fun set_{0}(value: {1}) -> void { {0} = value; }
]]]("score", "u16")

// Generate with multiple parameters
@minz[[[fun {0}_{1}() -> void { @print("Function {0} with type {1}"); }]]]("process", "data")

fun main() -> u8 {
    @print("Testing advanced @minz features")
    
    // TODO: Once code injection works, we can call:
    // let x = add_u8(5, 3);
    // let y = add_u16(1000, 2000); 
    // set_score(100);
    // process_data();
    
    return 0;
}