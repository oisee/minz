; MinZ Intermediate Representation (MIR)
; Module: main

Function ...test_mir_simple.test_mir_const() -> u8
  @smc
  Instructions:
      0: r1 = 42
      1: return

Function ...test_mir_simple.test_mir_add(a: u8, b: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r3 = r1 + r2
      3: return

Function ...test_mir_simple.main() -> u8
  @smc
  Locals:
    r2 = x: u16
    r6 = y: u16
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "Testing @mir code generation" (28 chars via loop)
      2: r3 = call test_mir_const
      3: store , r3
      4: UNKNOWN_OP_88
      5: UNKNOWN_OP_86 ; Print "mir const = " (12 chars via loop)
      6: r5 = load x
      7: UNKNOWN_OP_82
      8: r7 = 10
      9: r8 = 20
     10: r9 = call test_mir_add
     11: store , r9
     12: UNKNOWN_OP_88
     13: UNKNOWN_OP_86 ; Print "mir add(10,20) = " (17 chars via loop)
     14: r11 = load y
     15: UNKNOWN_OP_82
     16: r12 = 0
     17: return r12

