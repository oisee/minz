; MinZ generated code
; Generated: 2025-07-30 22:52:01


; Data section
    ORG $F000

str_0:
    DB 16    ; Length
    DB "Status message: "
    DB 0               ; Null terminator
str_1:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_2:
    DB 13    ; Length
    DB "Color value: "
    DB 0               ; Null terminator
str_3:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_pattern_comprehensive.status_message
...test_pattern_comprehensive.status_message:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = param s
    ; Load parameter s
    ; r3 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if r3, case_arm_0_2
    LD A, B
    OR A
    JP NZ, case_arm_0_2
    ; jump case_arm_1_3
    JP case_arm_1_3
    ; r4 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if r4, case_arm_1_3
    LD A, C
    OR A
    JP NZ, case_arm_1_3
    ; jump case_arm_2_4
    JP case_arm_2_4
    ; r5 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if r5, case_arm_2_4
    LD A, D
    OR A
    JP NZ, case_arm_2_4
    ; jump case_end_1
    JP case_end_1
    ; case_arm_0_2:
case_arm_0_2:
    ; r6 = 1
    LD A, 1
    LD E, A         ; Store to physical register E
    ; jump case_end_1
    JP case_end_1
    ; case_arm_1_3:
case_arm_1_3:
    ; r7 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; jump case_end_1
    JP case_end_1
    ; case_arm_2_4:
case_arm_2_4:
    ; r8 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; case_end_1:
case_end_1:
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_pattern_comprehensive.color_value
...test_pattern_comprehensive.color_value:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = param c
    ; Load parameter c
    ; r3 = r2 == r0
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; jump_if r3, case_arm_0_6
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    OR A
    JP NZ, case_arm_0_6
    ; jump case_arm_1_7
    JP case_arm_1_7
    ; r4 = r2 == r0
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    ; jump_if r4, case_arm_1_7
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP NZ, case_arm_1_7
    ; jump case_arm_2_8
    JP case_arm_2_8
    ; r5 = r2 == r0
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    ; jump_if r5, case_arm_2_8
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP NZ, case_arm_2_8
    ; jump case_end_5
    JP case_end_5
    ; case_arm_0_6:
case_arm_0_6:
    ; r6 = 255
    LD A, 255
    ; Register 6 already in A
    ; jump case_end_5
    JP case_end_5
    ; case_arm_1_7:
case_arm_1_7:
    ; r7 = 65280
    LD HL, 65280
    ; Register 7 already in HL
    ; jump case_end_5
    JP case_end_5
    ; case_arm_2_8:
case_arm_2_8:
    ; r8 = 16711680
    LD HL, 16711680
    LD D, H
    LD E, L
    ; case_end_5:
case_end_5:
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_pattern_comprehensive.main
...test_pattern_comprehensive.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 1
    LD A, 1
    ; Register 2 already in A
    ; store , r2
    LD ($F002), HL
    ; r4 = load status
    LD HL, ($F002)
    ; r5 = call status_message
    ; Call to status_message (args: 1)
    ; Register-based parameter passing
    LD A, H
    ; Parameter s in A
    ; Found function, UsesTrueSMC=false
    CALL status_message
    ; store , r5
    LD ($F006), HL
    ; r6 = string(str_0)
    LD HL, str_0
    ; print_string(r6)
    CALL print_string
    ; r7 = load msg
    LD HL, ($F006)
    ; print_u16(r7)
    CALL print_u16_decimal
    ; r8 = string(str_1)
    LD HL, str_1
    LD ($F010), HL    ; Virtual register 8 to memory
    ; print_string(r8)
    LD HL, ($F010)    ; Virtual register 8 from memory
    CALL print_string
    ; r10 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; store , r10
    LD ($F012), HL
    ; r12 = load color
    LD HL, ($F012)
    LD ($F018), HL    ; Virtual register 12 to memory
    ; r13 = call color_value
    ; Call to color_value (args: 1)
    ; Register-based parameter passing
    LD A, ($F018)     ; Virtual register 12 from memory
    ; Parameter c in A
    ; Found function, UsesTrueSMC=false
    CALL color_value
    ; store , r13
    LD ($F016), HL
    ; r14 = string(str_2)
    LD HL, str_2
    ; Register 14 already in HL
    ; print_string(r14)
    ; Register 14 already in HL
    CALL print_string
    ; r15 = load value
    LD HL, ($F016)
    ; print_u16(r15)
    CALL print_u16_decimal
    ; r16 = string(str_3)
    LD HL, str_3
    ; print_string(r16)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
