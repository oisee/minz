; MinZ generated code
; Generated: 2025-07-31 00:13:47


; Data section
    ORG $F000

str_0:
    DB 6    ; Length
    DB "Point("
    DB 0               ; Null terminator
str_1:
    DB 2    ; Length
    DB ", "
    DB 0               ; Null terminator
str_2:
    DB 1    ; Length
    DB ")"
    DB 0               ; Null terminator
str_3:
    DB 26    ; Length
    DB "Interface test compiled!"
    DB 92
    DB "n"
    DB 0               ; Null terminator

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_interface_simple.print
test_interface_simple.print:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = param self
    ; Load parameter self
    ; print_u8(r2)
    ; Register 2 already in A
    CALL print_u8_decimal
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_interface_simple.print
test_interface_simple.print:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r2 = string(str_0)
    LD HL, str_0
    ; print_string(r2)
    CALL print_string
    ; r3 = param self
    ; Load parameter self
    ; Load field x (offset 0)
    ; Register 3 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; print_u8(r4)
    LD A, C
    CALL print_u8_decimal
    ; r5 = string(str_1)
    LD HL, str_1
    ; print_string(r5)
    CALL print_string
    ; r6 = param self
    ; Load parameter self
    ; Load field y (offset 1)
    LD H, D
    LD L, E
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; print_u8(r7)
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    CALL print_u8_decimal
    ; r8 = string(str_2)
    LD HL, str_2
    ; print_string(r8)
    CALL print_string
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_interface_simple.main
test_interface_simple.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 42
    LD A, 42
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r2
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; Allocate struct Point
    LD HL, -2
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    LD B, H
    LD C, L
    ; r5 = 10
    LD A, 10
    LD ($F00A), A     ; Virtual register 5 to memory
    ; Store to Point.x
    LD H, B
    LD L, C
    PUSH HL
    LD HL, ($F00A)    ; Virtual register 5 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r6 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; Store to Point.y
    LD H, B
    LD L, C
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store , r4
    LD H, B
    LD L, C
    LD ($F006), HL
    ; r7 = string(str_3)
    LD HL, str_3
    ; Register 7 already in HL
    ; print_string(r7)
    ; Register 7 already in HL
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
