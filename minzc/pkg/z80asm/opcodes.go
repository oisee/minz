package z80asm

// This file contains opcode tables for all Z80 instructions,
// including undocumented ones

// Base opcodes (no prefix)
var baseOpcodes = map[string]byte{
	// 8-bit loads
	"LD_B_B":   0x40, "LD_B_C":   0x41, "LD_B_D":   0x42, "LD_B_E":   0x43,
	"LD_B_H":   0x44, "LD_B_L":   0x45, "LD_B_HL":  0x46, "LD_B_A":   0x47,
	"LD_C_B":   0x48, "LD_C_C":   0x49, "LD_C_D":   0x4A, "LD_C_E":   0x4B,
	"LD_C_H":   0x4C, "LD_C_L":   0x4D, "LD_C_HL":  0x4E, "LD_C_A":   0x4F,
	"LD_D_B":   0x50, "LD_D_C":   0x51, "LD_D_D":   0x52, "LD_D_E":   0x53,
	"LD_D_H":   0x54, "LD_D_L":   0x55, "LD_D_HL":  0x56, "LD_D_A":   0x57,
	"LD_E_B":   0x58, "LD_E_C":   0x59, "LD_E_D":   0x5A, "LD_E_E":   0x5B,
	"LD_E_H":   0x5C, "LD_E_L":   0x5D, "LD_E_HL":  0x5E, "LD_E_A":   0x5F,
	"LD_H_B":   0x60, "LD_H_C":   0x61, "LD_H_D":   0x62, "LD_H_E":   0x63,
	"LD_H_H":   0x64, "LD_H_L":   0x65, "LD_H_HL":  0x66, "LD_H_A":   0x67,
	"LD_L_B":   0x68, "LD_L_C":   0x69, "LD_L_D":   0x6A, "LD_L_E":   0x6B,
	"LD_L_H":   0x6C, "LD_L_L":   0x6D, "LD_L_HL":  0x6E, "LD_L_A":   0x6F,
	"LD_HL_B":  0x70, "LD_HL_C":  0x71, "LD_HL_D":  0x72, "LD_HL_E":  0x73,
	"LD_HL_H":  0x74, "LD_HL_L":  0x75, "HALT":     0x76, "LD_HL_A":  0x77,
	"LD_A_B":   0x78, "LD_A_C":   0x79, "LD_A_D":   0x7A, "LD_A_E":   0x7B,
	"LD_A_H":   0x7C, "LD_A_L":   0x7D, "LD_A_HL":  0x7E, "LD_A_A":   0x7F,
	
	// 8-bit arithmetic
	"ADD_A_B":  0x80, "ADD_A_C":  0x81, "ADD_A_D":  0x82, "ADD_A_E":  0x83,
	"ADD_A_H":  0x84, "ADD_A_L":  0x85, "ADD_A_HL": 0x86, "ADD_A_A":  0x87,
	"ADC_A_B":  0x88, "ADC_A_C":  0x89, "ADC_A_D":  0x8A, "ADC_A_E":  0x8B,
	"ADC_A_H":  0x8C, "ADC_A_L":  0x8D, "ADC_A_HL": 0x8E, "ADC_A_A":  0x8F,
	"SUB_B":    0x90, "SUB_C":    0x91, "SUB_D":    0x92, "SUB_E":    0x93,
	"SUB_H":    0x94, "SUB_L":    0x95, "SUB_HL":   0x96, "SUB_A":    0x97,
	"SBC_A_B":  0x98, "SBC_A_C":  0x99, "SBC_A_D":  0x9A, "SBC_A_E":  0x9B,
	"SBC_A_H":  0x9C, "SBC_A_L":  0x9D, "SBC_A_HL": 0x9E, "SBC_A_A":  0x9F,
	
	// 8-bit logic
	"AND_B":    0xA0, "AND_C":    0xA1, "AND_D":    0xA2, "AND_E":    0xA3,
	"AND_H":    0xA4, "AND_L":    0xA5, "AND_HL":   0xA6, "AND_A":    0xA7,
	"XOR_B":    0xA8, "XOR_C":    0xA9, "XOR_D":    0xAA, "XOR_E":    0xAB,
	"XOR_H":    0xAC, "XOR_L":    0xAD, "XOR_HL":   0xAE, "XOR_A":    0xAF,
	"OR_B":     0xB0, "OR_C":     0xB1, "OR_D":     0xB2, "OR_E":     0xB3,
	"OR_H":     0xB4, "OR_L":     0xB5, "OR_HL":    0xB6, "OR_A":     0xB7,
	"CP_B":     0xB8, "CP_C":     0xB9, "CP_D":     0xBA, "CP_E":     0xBB,
	"CP_H":     0xBC, "CP_L":     0xBD, "CP_HL":    0xBE, "CP_A":     0xBF,
	
	// Misc
	"NOP":      0x00,
	"RLCA":     0x07,
	"RRCA":     0x0F,
	"RLA":      0x17,
	"RRA":      0x1F,
	"DAA":      0x27,
	"CPL":      0x2F,
	"SCF":      0x37,
	"CCF":      0x3F,
	"EXX":      0xD9,
	"DI":       0xF3,
	"EI":       0xFB,
	
	// 16-bit loads
	"LD_BC_nn":  0x01, "LD_DE_nn":  0x11, "LD_HL_nn":  0x21, "LD_SP_nn":  0x31,
	"LD_nn_HL":  0x22, "LD_HL_nn_ind": 0x2A,
	"LD_nn_A":   0x32, "LD_A_nn_ind":  0x3A,
	
	// Stack operations
	"PUSH_BC":   0xC5, "PUSH_DE":   0xD5, "PUSH_HL":   0xE5, "PUSH_AF":   0xF5,
	"POP_BC":    0xC1, "POP_DE":    0xD1, "POP_HL":    0xE1, "POP_AF":    0xF1,
	
	// Jumps and calls
	"JP_nn":     0xC3, "JP_NZ_nn":  0xC2, "JP_Z_nn":   0xCA, "JP_NC_nn":  0xD2,
	"JP_C_nn":   0xDA, "JP_PO_nn":  0xE2, "JP_PE_nn":  0xEA, "JP_P_nn":   0xF2,
	"JP_M_nn":   0xFA, "JP_HL":     0xE9,
	"JR_e":      0x18, "JR_NZ_e":   0x20, "JR_Z_e":    0x28, "JR_NC_e":   0x30,
	"JR_C_e":    0x38,
	"DJNZ_e":    0x10,
	"CALL_nn":   0xCD, "CALL_NZ_nn":0xC4, "CALL_Z_nn": 0xCC, "CALL_NC_nn":0xD4,
	"CALL_C_nn": 0xDC, "CALL_PO_nn":0xE4, "CALL_PE_nn":0xEC, "CALL_P_nn": 0xF4,
	"CALL_M_nn": 0xFC,
	"RET":       0xC9, "RET_NZ":    0xC0, "RET_Z":     0xC8, "RET_NC":    0xD0,
	"RET_C":     0xD8, "RET_PO":    0xE0, "RET_PE":    0xE8, "RET_P":     0xF0,
	"RET_M":     0xF8,
	"RST_00":    0xC7, "RST_08":    0xCF, "RST_10":    0xD7, "RST_18":    0xDF,
	"RST_20":    0xE7, "RST_28":    0xEF, "RST_30":    0xF7, "RST_38":    0xFF,
	
	// I/O
	"IN_A_n":    0xDB, "OUT_n_A":   0xD3,
	
	// Arithmetic
	"INC_B":     0x04, "INC_C":     0x0C, "INC_D":     0x14, "INC_E":     0x1C,
	"INC_H":     0x24, "INC_L":     0x2C, "INC_HL_ind":0x34, "INC_A":     0x3C,
	"DEC_B":     0x05, "DEC_C":     0x0D, "DEC_D":     0x15, "DEC_E":     0x1D,
	"DEC_H":     0x25, "DEC_L":     0x2D, "DEC_HL_ind":0x35, "DEC_A":     0x3D,
	"INC_BC":    0x03, "INC_DE":    0x13, "INC_HL":    0x23, "INC_SP":    0x33,
	"DEC_BC":    0x0B, "DEC_DE":    0x1B, "DEC_HL":    0x2B, "DEC_SP":    0x3B,
	"ADD_HL_BC": 0x09, "ADD_HL_DE": 0x19, "ADD_HL_HL": 0x29, "ADD_HL_SP": 0x39,
	
	// Exchange
	"EX_DE_HL":  0xEB, "EX_AF_AF":  0x08, "EX_SP_HL":  0xE3,
	
	// Immediate operations
	"LD_A_n":    0x3E, "LD_B_n":    0x06, "LD_C_n":    0x0E, "LD_D_n":    0x16,
	"LD_E_n":    0x1E, "LD_H_n":    0x26, "LD_L_n":    0x2E, "LD_HL_n":   0x36,
	"ADD_A_n":   0xC6, "ADC_A_n":   0xCE, "SUB_n":     0xD6, "SBC_A_n":   0xDE,
	"AND_n":     0xE6, "XOR_n":     0xEE, "OR_n":      0xF6, "CP_n":      0xFE,
	
	// Special loads
	"LD_BC_A":   0x02, "LD_DE_A":   0x12, "LD_A_BC":   0x0A, "LD_A_DE":   0x1A,
	"LD_SP_HL":  0xF9,
}

// CB prefix instructions (bit operations)
var cbOpcodes = map[string]byte{
	// Rotates and shifts
	"RLC_B": 0x00, "RLC_C": 0x01, "RLC_D": 0x02, "RLC_E": 0x03,
	"RLC_H": 0x04, "RLC_L": 0x05, "RLC_HL": 0x06, "RLC_A": 0x07,
	"RRC_B": 0x08, "RRC_C": 0x09, "RRC_D": 0x0A, "RRC_E": 0x0B,
	"RRC_H": 0x0C, "RRC_L": 0x0D, "RRC_HL": 0x0E, "RRC_A": 0x0F,
	"RL_B":  0x10, "RL_C":  0x11, "RL_D":  0x12, "RL_E":  0x13,
	"RL_H":  0x14, "RL_L":  0x15, "RL_HL":  0x16, "RL_A":  0x17,
	"RR_B":  0x18, "RR_C":  0x19, "RR_D":  0x1A, "RR_E":  0x1B,
	"RR_H":  0x1C, "RR_L":  0x1D, "RR_HL":  0x1E, "RR_A":  0x1F,
	"SLA_B": 0x20, "SLA_C": 0x21, "SLA_D": 0x22, "SLA_E": 0x23,
	"SLA_H": 0x24, "SLA_L": 0x25, "SLA_HL": 0x26, "SLA_A": 0x27,
	"SRA_B": 0x28, "SRA_C": 0x29, "SRA_D": 0x2A, "SRA_E": 0x2B,
	"SRA_H": 0x2C, "SRA_L": 0x2D, "SRA_HL": 0x2E, "SRA_A": 0x2F,
	"SLL_B": 0x30, "SLL_C": 0x31, "SLL_D": 0x32, "SLL_E": 0x33, // Undocumented
	"SLL_H": 0x34, "SLL_L": 0x35, "SLL_HL": 0x36, "SLL_A": 0x37, // Undocumented
	"SRL_B": 0x38, "SRL_C": 0x39, "SRL_D": 0x3A, "SRL_E": 0x3B,
	"SRL_H": 0x3C, "SRL_L": 0x3D, "SRL_HL": 0x3E, "SRL_A": 0x3F,
	
	// Bit test - BIT n, r
	"BIT_0_B": 0x40, "BIT_0_C": 0x41, "BIT_0_D": 0x42, "BIT_0_E": 0x43,
	"BIT_0_H": 0x44, "BIT_0_L": 0x45, "BIT_0_HL": 0x46, "BIT_0_A": 0x47,
	"BIT_1_B": 0x48, "BIT_1_C": 0x49, "BIT_1_D": 0x4A, "BIT_1_E": 0x4B,
	"BIT_1_H": 0x4C, "BIT_1_L": 0x4D, "BIT_1_HL": 0x4E, "BIT_1_A": 0x4F,
	"BIT_2_B": 0x50, "BIT_2_C": 0x51, "BIT_2_D": 0x52, "BIT_2_E": 0x53,
	"BIT_2_H": 0x54, "BIT_2_L": 0x55, "BIT_2_HL": 0x56, "BIT_2_A": 0x57,
	"BIT_3_B": 0x58, "BIT_3_C": 0x59, "BIT_3_D": 0x5A, "BIT_3_E": 0x5B,
	"BIT_3_H": 0x5C, "BIT_3_L": 0x5D, "BIT_3_HL": 0x5E, "BIT_3_A": 0x5F,
	"BIT_4_B": 0x60, "BIT_4_C": 0x61, "BIT_4_D": 0x62, "BIT_4_E": 0x63,
	"BIT_4_H": 0x64, "BIT_4_L": 0x65, "BIT_4_HL": 0x66, "BIT_4_A": 0x67,
	"BIT_5_B": 0x68, "BIT_5_C": 0x69, "BIT_5_D": 0x6A, "BIT_5_E": 0x6B,
	"BIT_5_H": 0x6C, "BIT_5_L": 0x6D, "BIT_5_HL": 0x6E, "BIT_5_A": 0x6F,
	"BIT_6_B": 0x70, "BIT_6_C": 0x71, "BIT_6_D": 0x72, "BIT_6_E": 0x73,
	"BIT_6_H": 0x74, "BIT_6_L": 0x75, "BIT_6_HL": 0x76, "BIT_6_A": 0x77,
	"BIT_7_B": 0x78, "BIT_7_C": 0x79, "BIT_7_D": 0x7A, "BIT_7_E": 0x7B,
	"BIT_7_H": 0x7C, "BIT_7_L": 0x7D, "BIT_7_HL": 0x7E, "BIT_7_A": 0x7F,
	
	// Reset bit - RES n, r
	"RES_0_B": 0x80, "RES_0_C": 0x81, "RES_0_D": 0x82, "RES_0_E": 0x83,
	"RES_0_H": 0x84, "RES_0_L": 0x85, "RES_0_HL": 0x86, "RES_0_A": 0x87,
	"RES_1_B": 0x88, "RES_1_C": 0x89, "RES_1_D": 0x8A, "RES_1_E": 0x8B,
	"RES_1_H": 0x8C, "RES_1_L": 0x8D, "RES_1_HL": 0x8E, "RES_1_A": 0x8F,
	"RES_2_B": 0x90, "RES_2_C": 0x91, "RES_2_D": 0x92, "RES_2_E": 0x93,
	"RES_2_H": 0x94, "RES_2_L": 0x95, "RES_2_HL": 0x96, "RES_2_A": 0x97,
	"RES_3_B": 0x98, "RES_3_C": 0x99, "RES_3_D": 0x9A, "RES_3_E": 0x9B,
	"RES_3_H": 0x9C, "RES_3_L": 0x9D, "RES_3_HL": 0x9E, "RES_3_A": 0x9F,
	"RES_4_B": 0xA0, "RES_4_C": 0xA1, "RES_4_D": 0xA2, "RES_4_E": 0xA3,
	"RES_4_H": 0xA4, "RES_4_L": 0xA5, "RES_4_HL": 0xA6, "RES_4_A": 0xA7,
	"RES_5_B": 0xA8, "RES_5_C": 0xA9, "RES_5_D": 0xAA, "RES_5_E": 0xAB,
	"RES_5_H": 0xAC, "RES_5_L": 0xAD, "RES_5_HL": 0xAE, "RES_5_A": 0xAF,
	"RES_6_B": 0xB0, "RES_6_C": 0xB1, "RES_6_D": 0xB2, "RES_6_E": 0xB3,
	"RES_6_H": 0xB4, "RES_6_L": 0xB5, "RES_6_HL": 0xB6, "RES_6_A": 0xB7,
	"RES_7_B": 0xB8, "RES_7_C": 0xB9, "RES_7_D": 0xBA, "RES_7_E": 0xBB,
	"RES_7_H": 0xBC, "RES_7_L": 0xBD, "RES_7_HL": 0xBE, "RES_7_A": 0xBF,
	
	// Set bit - SET n, r
	"SET_0_B": 0xC0, "SET_0_C": 0xC1, "SET_0_D": 0xC2, "SET_0_E": 0xC3,
	"SET_0_H": 0xC4, "SET_0_L": 0xC5, "SET_0_HL": 0xC6, "SET_0_A": 0xC7,
	"SET_1_B": 0xC8, "SET_1_C": 0xC9, "SET_1_D": 0xCA, "SET_1_E": 0xCB,
	"SET_1_H": 0xCC, "SET_1_L": 0xCD, "SET_1_HL": 0xCE, "SET_1_A": 0xCF,
	"SET_2_B": 0xD0, "SET_2_C": 0xD1, "SET_2_D": 0xD2, "SET_2_E": 0xD3,
	"SET_2_H": 0xD4, "SET_2_L": 0xD5, "SET_2_HL": 0xD6, "SET_2_A": 0xD7,
	"SET_3_B": 0xD8, "SET_3_C": 0xD9, "SET_3_D": 0xDA, "SET_3_E": 0xDB,
	"SET_3_H": 0xDC, "SET_3_L": 0xDD, "SET_3_HL": 0xDE, "SET_3_A": 0xDF,
	"SET_4_B": 0xE0, "SET_4_C": 0xE1, "SET_4_D": 0xE2, "SET_4_E": 0xE3,
	"SET_4_H": 0xE4, "SET_4_L": 0xE5, "SET_4_HL": 0xE6, "SET_4_A": 0xE7,
	"SET_5_B": 0xE8, "SET_5_C": 0xE9, "SET_5_D": 0xEA, "SET_5_E": 0xEB,
	"SET_5_H": 0xEC, "SET_5_L": 0xED, "SET_5_HL": 0xEE, "SET_5_A": 0xEF,
	"SET_6_B": 0xF0, "SET_6_C": 0xF1, "SET_6_D": 0xF2, "SET_6_E": 0xF3,
	"SET_6_H": 0xF4, "SET_6_L": 0xF5, "SET_6_HL": 0xF6, "SET_6_A": 0xF7,
	"SET_7_B": 0xF8, "SET_7_C": 0xF9, "SET_7_D": 0xFA, "SET_7_E": 0xFB,
	"SET_7_H": 0xFC, "SET_7_L": 0xFD, "SET_7_HL": 0xFE, "SET_7_A": 0xFF,
}

// ED prefix instructions
var edOpcodes = map[string]byte{
	// Block operations
	"LDI":   0xA0, "LDIR":  0xB0, "LDD":   0xA8, "LDDR":  0xB8,
	"CPI":   0xA1, "CPIR":  0xB1, "CPD":   0xA9, "CPDR":  0xB9,
	"INI":   0xA2, "INIR":  0xB2, "IND":   0xAA, "INDR":  0xBA,
	"OUTI":  0xA3, "OTIR":  0xB3, "OUTD":  0xAB, "OTDR":  0xBB,
	
	// 16-bit arithmetic
	"SBC_HL_BC": 0x42, "SBC_HL_DE": 0x52, "SBC_HL_HL": 0x62, "SBC_HL_SP": 0x72,
	"ADC_HL_BC": 0x4A, "ADC_HL_DE": 0x5A, "ADC_HL_HL": 0x6A, "ADC_HL_SP": 0x7A,
	
	// Special loads
	"LD_I_A":    0x47, "LD_R_A":    0x4F, "LD_A_I":    0x57, "LD_A_R":    0x5F,
	"LD_nn_BC":  0x43, "LD_nn_DE":  0x53, "LD_nn_HL_ED": 0x63, "LD_nn_SP":  0x73,
	"LD_BC_nn":  0x4B, "LD_DE_nn":  0x5B, "LD_HL_nn_ED": 0x6B, "LD_SP_nn_ED": 0x7B,
	
	// I/O
	"IN_B_C":    0x40, "IN_C_C":    0x48, "IN_D_C":    0x50, "IN_E_C":    0x58,
	"IN_H_C":    0x60, "IN_L_C":    0x68, "IN_F_C":    0x70, "IN_A_C":    0x78,
	"OUT_C_B":   0x41, "OUT_C_C":   0x49, "OUT_C_D":   0x51, "OUT_C_E":   0x59,
	"OUT_C_H":   0x61, "OUT_C_L":   0x69, "OUT_C_0":   0x71, "OUT_C_A":   0x79,
	
	// Misc
	"NEG":       0x44, // Also at 0x4C, 0x54, 0x5C, 0x64, 0x6C, 0x74, 0x7C
	"RETN":      0x45, // Also at 0x4D, 0x55, 0x5D, 0x65, 0x6D, 0x75, 0x7D
	"RETI":      0x4D,
	"IM_0":      0x46,
	"IM_1":      0x56,
	"IM_2":      0x5E,
	"RRD":       0x67,
	"RLD":       0x6F,
	
	// Undocumented ED instructions
	"OUT_C_0_":  0x71, // Undocumented: OUT (C), 0
	"SLL_HL":    0x36, // Undocumented (though this is actually in CB space)
}

// DD prefix (IX) replacements
var ddReplacements = map[byte]byte{
	// Replace HL with IX in various instructions
	0x21: 0x21, // LD IX, nn
	0x22: 0x22, // LD (nn), IX
	0x23: 0x23, // INC IX
	0x29: 0x29, // ADD IX, IX
	0x2A: 0x2A, // LD IX, (nn)
	0x2B: 0x2B, // DEC IX
	0x34: 0x34, // INC (IX+d)
	0x35: 0x35, // DEC (IX+d)
	0x36: 0x36, // LD (IX+d), n
	0x39: 0x39, // ADD IX, SP
	0xE1: 0xE1, // POP IX
	0xE3: 0xE3, // EX (SP), IX
	0xE5: 0xE5, // PUSH IX
	0xE9: 0xE9, // JP (IX)
	0xF9: 0xF9, // LD SP, IX
}

// FD prefix (IY) replacements
var fdReplacements = map[byte]byte{
	// Replace HL with IY in various instructions
	0x21: 0x21, // LD IY, nn
	0x22: 0x22, // LD (nn), IY
	0x23: 0x23, // INC IY
	0x29: 0x29, // ADD IY, IY
	0x2A: 0x2A, // LD IY, (nn)
	0x2B: 0x2B, // DEC IY
	0x34: 0x34, // INC (IY+d)
	0x35: 0x35, // DEC (IY+d)
	0x36: 0x36, // LD (IY+d), n
	0x39: 0x39, // ADD IY, SP
	0xE1: 0xE1, // POP IY
	0xE3: 0xE3, // EX (SP), IY
	0xE5: 0xE5, // PUSH IY
	0xE9: 0xE9, // JP (IY)
	0xF9: 0xF9, // LD SP, IY
}