; MinZ Intermediate Representation (MIR)
; Module: main

Function ...examples.test_loop_into.main() -> void
  @smc
  Locals:
    r1 = total_score: u16
    r3 = active_count: u8
  Instructions:
      0: r2 = r2 ^ r2 ; XOR A,A (optimized from LD A,0)
      1: store , r2
      2: r4 = r4 ^ r4 ; XOR A,A (optimized from LD A,0)
      3: store , r4
      4: 57 ; Load table base address
      5: 57 ; Load table base for end calculation
      6: 62 ; Calculate table end (+ 5 elements * 4 bytes)
      7: 61 ; Load loop counter
      8: 43 ; Check if reached end of table
      9: 3 ; Exit if done
     10: 58 ; Copy element to buffer at $F000
     11: 17 ; Load person.active from buffer at $F003
     12: jump_if_not r10, else_3
     13: 17 ; Load person.score from buffer at $F001
     14: 18 ; Store to person.score at buffer $F001
     15: r14 = load total_score
     16: 17 ; Load person.score from buffer at $F001
     17: r16 = r14 + r15
     18: store total_score, r16
     19: 35 ; INC (optimized from ADD 1)
     20: store active_count, r19
     21: jump end_if_4
     22: else_3:
     23: end_if_4:
     24: 17 ; Load person.age from buffer at $F000
     25: 18 ; Store to person.age at buffer $F000
     26: 59 ; Copy buffer back to element at $F000
     27: 62 ; Advance to next element (+4 bytes)
     28: 60 ; Decrement counter and loop if not zero
     29: return

