; MinZ Intermediate Representation (MIR)
; Module: main

Function ...examples.fibonacci_tail.fib_tail(n: u8, a: u16, b: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: LOAD_PARAM
      1: r5 = 0
      2: r6 = r4 == r5
      3: jump_if_not r6, else_1
      4: LOAD_PARAM
      5: return r7
      6: jump end_if_2
      7: else_1:
      8: end_if_2:
      9: LOAD_PARAM
     10: r9 = 1
     11: r10 = r8 == r9
     12: jump_if_not r10, else_3
     13: LOAD_PARAM
     14: return r11
     15: jump end_if_4
     16: else_3:
     17: end_if_4:
     18: LOAD_PARAM
     19: r13 = 1
     20: r14 = r12 - r13
     21: LOAD_PARAM
     22: LOAD_PARAM
     23: LOAD_PARAM
     24: r18 = r16 + r17
     25: r19 = call fib_tail
     26: return r19

Function ...examples.fibonacci_tail.fibonacci(n: u8) -> u16
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 0
      2: r4 = 1
      3: r5 = call fib_tail
      4: return r5

Function ...examples.fibonacci_tail.main() -> void
  @smc
  Locals:
    r1 = result: u16
  Instructions:
      0: r2 = 10
      1: r3 = call fibonacci
      2: store , r3
      3: return

