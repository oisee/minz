; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   ...examples.zvdb_final.db_count: u8
;   ...examples.zvdb_final.rng_state: u16
;   ...examples.zvdb_final.vector0: ...examples.zvdb_final.Vector
;   ...examples.zvdb_final.vector1: ...examples.zvdb_final.Vector
;   ...examples.zvdb_final.vector2: ...examples.zvdb_final.Vector
;   ...examples.zvdb_final.vector3: ...examples.zvdb_final.Vector

Function ...examples.zvdb_final.popcount_byte(val: u8) -> u8
  @smc
  Locals:
    r2 = count: u8
    r4 = temp: u8
  Instructions:
      0: r3 = 0
      1: store , r3
      2: LOAD_PARAM
      3: store , r5
      4: r6 = load temp
      5: r7 = 1
      6: r8 = r6 & r7
      7: r9 = 0
      8: r10 = r8 != r9
      9: jump_if_not r10, else_1
     10: r11 = load count
     11: r12 = 1
     12: r13 = r11 + r12
     13: store count, r13
     14: jump end_if_2
     15: else_1:
     16: end_if_2:
     17: r14 = load temp
     18: r15 = 1
     19: SHR
     20: store temp, r16
     21: r17 = load temp
     22: r18 = 1
     23: r19 = r17 & r18
     24: r20 = 0
     25: r21 = r19 != r20
     26: jump_if_not r21, else_3
     27: r22 = load count
     28: r23 = 1
     29: r24 = r22 + r23
     30: store count, r24
     31: jump end_if_4
     32: else_3:
     33: end_if_4:
     34: r25 = load temp
     35: r26 = 1
     36: SHR
     37: store temp, r27
     38: r28 = load temp
     39: r29 = 1
     40: r30 = r28 & r29
     41: r31 = 0
     42: r32 = r30 != r31
     43: jump_if_not r32, else_5
     44: r33 = load count
     45: r34 = 1
     46: r35 = r33 + r34
     47: store count, r35
     48: jump end_if_6
     49: else_5:
     50: end_if_6:
     51: r36 = load temp
     52: r37 = 1
     53: SHR
     54: store temp, r38
     55: r39 = load temp
     56: r40 = 1
     57: r41 = r39 & r40
     58: r42 = 0
     59: r43 = r41 != r42
     60: jump_if_not r43, else_7
     61: r44 = load count
     62: r45 = 1
     63: r46 = r44 + r45
     64: store count, r46
     65: jump end_if_8
     66: else_7:
     67: end_if_8:
     68: r47 = load temp
     69: r48 = 1
     70: SHR
     71: store temp, r49
     72: r50 = load temp
     73: r51 = 1
     74: r52 = r50 & r51
     75: r53 = 0
     76: r54 = r52 != r53
     77: jump_if_not r54, else_9
     78: r55 = load count
     79: r56 = 1
     80: r57 = r55 + r56
     81: store count, r57
     82: jump end_if_10
     83: else_9:
     84: end_if_10:
     85: r58 = load temp
     86: r59 = 1
     87: SHR
     88: store temp, r60
     89: r61 = load temp
     90: r62 = 1
     91: r63 = r61 & r62
     92: r64 = 0
     93: r65 = r63 != r64
     94: jump_if_not r65, else_11
     95: r66 = load count
     96: r67 = 1
     97: r68 = r66 + r67
     98: store count, r68
     99: jump end_if_12
    100: else_11:
    101: end_if_12:
    102: r69 = load temp
    103: r70 = 1
    104: SHR
    105: store temp, r71
    106: r72 = load temp
    107: r73 = 1
    108: r74 = r72 & r73
    109: r75 = 0
    110: r76 = r74 != r75
    111: jump_if_not r76, else_13
    112: r77 = load count
    113: r78 = 1
    114: r79 = r77 + r78
    115: store count, r79
    116: jump end_if_14
    117: else_13:
    118: end_if_14:
    119: r80 = load temp
    120: r81 = 1
    121: SHR
    122: store temp, r82
    123: r83 = load temp
    124: r84 = 1
    125: r85 = r83 & r84
    126: r86 = 0
    127: r87 = r85 != r86
    128: jump_if_not r87, else_15
    129: r88 = load count
    130: r89 = 1
    131: r90 = r88 + r89
    132: store count, r90
    133: jump end_if_16
    134: else_15:
    135: end_if_16:
    136: r91 = load count
    137: return r91

Function ...examples.zvdb_final.hamming_distance(vec1: *...examples.zvdb_final.Vector, vec2: *...examples.zvdb_final.Vector) -> u16
  @smc
  Locals:
    r3 = distance: u16
    r9 = xor_byte: u8
    r19 = pc: u8
  Instructions:
      0: r4 = 0
      1: store , r4
      2: r5 = 0
      3: r6 = 32
      4: r7 = r5 ; Initialize loop variable i
      5: for_loop_17:
      6: r8 = r7 < r6 ; Check i < end
      7: jump_if_not r8, for_end_18
      8: LOAD_PARAM
      9: LOAD_FIELD ; Load field data (offset 0)
     10: r12 = load i
     11: LOAD_INDEX ; Load array element (u8)
     12: LOAD_PARAM
     13: LOAD_FIELD ; Load field data (offset 0)
     14: r16 = load i
     15: LOAD_INDEX ; Load array element (u8)
     16: r18 = r13 ^ r17
     17: store , r18
     18: r20 = load xor_byte
     19: r21 = call popcount_byte
     20: store , r21
     21: r22 = load distance
     22: r23 = load pc
     23: r24 = r22 + r23
     24: store distance, r24
     25: r25 = 1
     26: r7 = r7 + r25 ; Increment i
     27: jump for_loop_17
     28: for_end_18:
     29: r26 = load distance
     30: return r26

Function ...examples.zvdb_final.similarity_score(vec1: *...examples.zvdb_final.Vector, vec2: *...examples.zvdb_final.Vector) -> i16
  @smc
  Locals:
    r3 = hamming: u16
    r7 = doubled: u16
    r11 = result: i16
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r6 = call hamming_distance
      3: store , r6
      4: r8 = load hamming
      5: r9 = 1
      6: SHL
      7: store , r10
      8: r12 = 256
      9: r13 = load doubled
     10: r14 = r12 - r13
     11: store , r14
     12: r15 = load result
     13: return r15

Function ...examples.zvdb_final.similarity_percentage(score: i16) -> u8
  @smc
  Locals:
    r2 = normalized: u16
    r6 = percentage: u8
  Instructions:
      0: LOAD_PARAM
      1: r4 = 256
      2: r5 = r3 + r4
      3: store , r5
      4: r7 = load normalized
      5: r8 = 100
      6: r9 = r7 * r8
      7: r10 = 9
      8: SHR
      9: store , r11
     10: r12 = load percentage
     11: return r12

Function ...examples.zvdb_final.rand_next() -> u8
  @smc
  Instructions:
      0: r1 = load ...examples.zvdb_final.rng_state
      1: r2 = 5
      2: r3 = r1 * r2
      3: r4 = 1
      4: r5 = r3 + r4
      5: store ...examples.zvdb_final.rng_state, r5
      6: r6 = load ...examples.zvdb_final.rng_state
      7: r7 = 8
      8: SHR
      9: return r8

Function ...examples.zvdb_final.init_vectors() -> void
  @smc
  Instructions:
      0: r1 = 0
      1: r2 = 32
      2: r3 = r1 ; Initialize loop variable i
      3: for_loop_19:
      4: r4 = r3 < r2 ; Check i < end
      5: jump_if_not r4, for_end_20
      6: r5 = load i
      7: r6 = 2
      8: MOD
      9: r8 = 0
     10: r9 = r7 == r8
     11: jump_if_not r9, else_21
     12: r10 = 85
     13: r11 = load ...examples.zvdb_final.vector0
     14: LOAD_FIELD ; Load field data (offset 0)
     15: r13 = load i
     16: r14 = r12 + r13 ; Calculate array element address
     17: UNKNOWN_OP_67 ; Store to array[index] (u8)
     18: jump end_if_22
     19: else_21:
     20: r15 = 170
     21: r16 = load ...examples.zvdb_final.vector0
     22: LOAD_FIELD ; Load field data (offset 0)
     23: r18 = load i
     24: r19 = r17 + r18 ; Calculate array element address
     25: UNKNOWN_OP_67 ; Store to array[index] (u8)
     26: end_if_22:
     27: r20 = 1
     28: r3 = r3 + r20 ; Increment i
     29: jump for_loop_19
     30: for_end_20:
     31: r21 = 0
     32: r22 = 32
     33: r23 = r21 ; Initialize loop variable i
     34: for_loop_23:
     35: r24 = r23 < r22 ; Check i < end
     36: jump_if_not r24, for_end_24
     37: r25 = 255
     38: r26 = load ...examples.zvdb_final.vector1
     39: LOAD_FIELD ; Load field data (offset 0)
     40: r28 = load i
     41: r29 = r27 + r28 ; Calculate array element address
     42: UNKNOWN_OP_67 ; Store to array[index] (u8)
     43: r30 = 1
     44: r23 = r23 + r30 ; Increment i
     45: jump for_loop_23
     46: for_end_24:
     47: r31 = 0
     48: r32 = 32
     49: r33 = r31 ; Initialize loop variable i
     50: for_loop_25:
     51: r34 = r33 < r32 ; Check i < end
     52: jump_if_not r34, for_end_26
     53: r35 = 0
     54: r36 = load ...examples.zvdb_final.vector2
     55: LOAD_FIELD ; Load field data (offset 0)
     56: r38 = load i
     57: r39 = r37 + r38 ; Calculate array element address
     58: UNKNOWN_OP_67 ; Store to array[index] (u8)
     59: r40 = 1
     60: r33 = r33 + r40 ; Increment i
     61: jump for_loop_25
     62: for_end_26:
     63: r41 = 4660
     64: store ...examples.zvdb_final.rng_state, r41
     65: r42 = 0
     66: r43 = 32
     67: r44 = r42 ; Initialize loop variable i
     68: for_loop_27:
     69: r45 = r44 < r43 ; Check i < end
     70: jump_if_not r45, for_end_28
     71: r46 = call rand_next
     72: r47 = load ...examples.zvdb_final.vector3
     73: LOAD_FIELD ; Load field data (offset 0)
     74: r49 = load i
     75: r50 = r48 + r49 ; Calculate array element address
     76: UNKNOWN_OP_67 ; Store to array[index] (u8)
     77: r51 = 1
     78: r44 = r44 + r51 ; Increment i
     79: jump for_loop_27
     80: for_end_28:
     81: r52 = 4
     82: store ...examples.zvdb_final.db_count, r52
     83: return

Function ...examples.zvdb_final.get_vector(id: u8) -> *...examples.zvdb_final.Vector
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r3 = 0
      2: r4 = r2 == r3
      3: jump_if_not r4, else_29
      4: r5 = load ...examples.zvdb_final.vector0
      5: UNKNOWN_OP_68
      6: return r6
      7: jump end_if_30
      8: else_29:
      9: LOAD_PARAM
     10: r8 = 1
     11: r9 = r7 == r8
     12: jump_if_not r9, else_31
     13: r10 = load ...examples.zvdb_final.vector1
     14: UNKNOWN_OP_68
     15: return r11
     16: jump end_if_32
     17: else_31:
     18: LOAD_PARAM
     19: r13 = 2
     20: r14 = r12 == r13
     21: jump_if_not r14, else_33
     22: r15 = load ...examples.zvdb_final.vector2
     23: UNKNOWN_OP_68
     24: return r16
     25: jump end_if_34
     26: else_33:
     27: r17 = load ...examples.zvdb_final.vector3
     28: UNKNOWN_OP_68
     29: return r18
     30: end_if_34:
     31: end_if_32:
     32: end_if_30:
     33: return

Function ...examples.zvdb_final.search_best_match(query: *...examples.zvdb_final.Vector) -> ...examples.zvdb_final.SearchResult
  @smc
  Locals:
    r2 = result: ...examples.zvdb_final.SearchResult
    r14 = vec: *...examples.zvdb_final.Vector
    r17 = score: i16
  Instructions:
      0: r3 = 255
      1: r4 = load result
      2: STORE_FIELD ; Store to field vector_id (offset 0)
      3: r5 = 256
      4: NEG
      5: r7 = load result
      6: STORE_FIELD ; Store to field score (offset 1)
      7: r8 = 0
      8: r9 = load result
      9: STORE_FIELD ; Store to field similarity (offset 3)
     10: r10 = 0
     11: r11 = load ...examples.zvdb_final.db_count
     12: r12 = r10 ; Initialize loop variable i
     13: for_loop_35:
     14: r13 = r12 < r11 ; Check i < end
     15: jump_if_not r13, for_end_36
     16: r15 = load i
     17: r16 = call get_vector
     18: store , r16
     19: LOAD_PARAM
     20: r19 = load vec
     21: r20 = call similarity_score
     22: store , r20
     23: r21 = load score
     24: r22 = load result
     25: LOAD_FIELD ; Load field score (offset 1)
     26: r24 = r21 > r23
     27: jump_if_not r24, else_37
     28: r25 = load i
     29: r26 = load result
     30: STORE_FIELD ; Store to field vector_id (offset 0)
     31: r27 = load score
     32: r28 = load result
     33: STORE_FIELD ; Store to field score (offset 1)
     34: r29 = load score
     35: r30 = call similarity_percentage
     36: r31 = load result
     37: STORE_FIELD ; Store to field similarity (offset 3)
     38: jump end_if_38
     39: else_37:
     40: end_if_38:
     41: r32 = 1
     42: r12 = r12 + r32 ; Increment i
     43: jump for_loop_35
     44: for_end_36:
     45: r33 = load result
     46: return r33

Function ...examples.zvdb_final.main() -> void
  Locals:
    r15 = h01: u16
    r21 = h02: u16
    r27 = h03: u16
    r40 = s01: i16
    r46 = s02: i16
    r52 = s03: i16
    r62 = result: ...examples.zvdb_final.SearchResult
    r72 = query: ...examples.zvdb_final.Vector
    r94 = result2: ...examples.zvdb_final.SearchResult
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "ZVDB-MinZ: 256-bit Vector Database
" (35 chars via loop)
      2: UNKNOWN_OP_88
      3: UNKNOWN_OP_86 ; Print "===================================

" (37 chars via loop)
      4: UNKNOWN_OP_88
      5: UNKNOWN_OP_86 ; Print "Initializing 256-bit test vectors...
" (37 chars via loop)
      6: r4 = call init_vectors
      7: UNKNOWN_OP_88
      8: UNKNOWN_OP_86 ; Print "Database initialized with " (26 chars via loop)
      9: UNKNOWN_OP_88
     10: UNKNOWN_OP_86 ; Print " vectors

" (10 chars via loop)
     11: UNKNOWN_OP_88
     12: UNKNOWN_OP_86 ; Print "Testing popcount:
" (18 chars via loop)
     13: r8 = 255
     14: r9 = call popcount_byte
     15: UNKNOWN_OP_81
     16: r10 = 85
     17: r11 = call popcount_byte
     18: UNKNOWN_OP_81
     19: r12 = 0
     20: r13 = call popcount_byte
     21: UNKNOWN_OP_81
     22: UNKNOWN_OP_88
     23: UNKNOWN_OP_86 ; Print "256-bit Hamming distances:
" (27 chars via loop)
     24: r16 = load ...examples.zvdb_final.vector0
     25: UNKNOWN_OP_68
     26: r18 = load ...examples.zvdb_final.vector1
     27: UNKNOWN_OP_68
     28: r20 = call hamming_distance
     29: store , r20
     30: r22 = load ...examples.zvdb_final.vector0
     31: UNKNOWN_OP_68
     32: r24 = load ...examples.zvdb_final.vector2
     33: UNKNOWN_OP_68
     34: r26 = call hamming_distance
     35: store , r26
     36: r28 = load ...examples.zvdb_final.vector0
     37: UNKNOWN_OP_68
     38: r30 = load ...examples.zvdb_final.vector3
     39: UNKNOWN_OP_68
     40: r32 = call hamming_distance
     41: store , r32
     42: UNKNOWN_OP_88
     43: UNKNOWN_OP_86 ; Print "  Vector 0 vs 1: " (17 chars via loop)
     44: UNKNOWN_OP_88
     45: UNKNOWN_OP_86 ; Print " bits different
" (16 chars via loop)
     46: UNKNOWN_OP_88
     47: UNKNOWN_OP_86 ; Print "  Vector 0 vs 2: " (17 chars via loop)
     48: UNKNOWN_OP_88
     49: UNKNOWN_OP_86 ; Print " bits different
" (16 chars via loop)
     50: UNKNOWN_OP_88
     51: UNKNOWN_OP_86 ; Print "  Vector 0 vs 3: " (17 chars via loop)
     52: UNKNOWN_OP_88
     53: UNKNOWN_OP_86 ; Print " bits different

" (17 chars via loop)
     54: UNKNOWN_OP_88
     55: UNKNOWN_OP_86 ; Print "256-bit Similarity scores:
" (27 chars via loop)
     56: r41 = load ...examples.zvdb_final.vector0
     57: UNKNOWN_OP_68
     58: r43 = load ...examples.zvdb_final.vector1
     59: UNKNOWN_OP_68
     60: r45 = call similarity_score
     61: store , r45
     62: r47 = load ...examples.zvdb_final.vector0
     63: UNKNOWN_OP_68
     64: r49 = load ...examples.zvdb_final.vector2
     65: UNKNOWN_OP_68
     66: r51 = call similarity_score
     67: store , r51
     68: r53 = load ...examples.zvdb_final.vector0
     69: UNKNOWN_OP_68
     70: r55 = load ...examples.zvdb_final.vector3
     71: UNKNOWN_OP_68
     72: r57 = call similarity_score
     73: store , r57
     74: UNKNOWN_OP_88
     75: UNKNOWN_OP_86 ; Print "  Vector 0 vs 1: " (17 chars via loop)
     76: UNKNOWN_OP_87 ; Direct print "
" (1 chars)
     77: UNKNOWN_OP_88
     78: UNKNOWN_OP_86 ; Print "  Vector 0 vs 2: " (17 chars via loop)
     79: UNKNOWN_OP_87 ; Direct print "
" (1 chars)
     80: UNKNOWN_OP_88
     81: UNKNOWN_OP_86 ; Print "  Vector 0 vs 3: " (17 chars via loop)
     82: UNKNOWN_OP_87 ; Direct print "

" (2 chars)
     83: UNKNOWN_OP_88
     84: UNKNOWN_OP_86 ; Print "Searching for best match to vector 0...
" (40 chars via loop)
     85: r63 = load ...examples.zvdb_final.vector0
     86: UNKNOWN_OP_68
     87: r65 = call search_best_match
     88: store , r65
     89: r66 = load result
     90: LOAD_FIELD ; Load field vector_id (offset 0)
     91: UNKNOWN_OP_81
     92: r68 = load result
     93: LOAD_FIELD ; Load field score (offset 1)
     94: UNKNOWN_OP_82
     95: r70 = load result
     96: LOAD_FIELD ; Load field similarity (offset 3)
     97: UNKNOWN_OP_81
     98: r73 = 0
     99: r74 = 32
    100: r75 = r73 ; Initialize loop variable i
    101: for_loop_39:
    102: r76 = r75 < r74 ; Check i < end
    103: jump_if_not r76, for_end_40
    104: r77 = load i
    105: r78 = 2
    106: MOD
    107: r80 = 0
    108: r81 = r79 == r80
    109: jump_if_not r81, else_41
    110: r82 = 80
    111: r83 = load query
    112: LOAD_FIELD ; Load field data (offset 0)
    113: r85 = load i
    114: r86 = r84 + r85 ; Calculate array element address
    115: UNKNOWN_OP_67 ; Store to array[index] (u8)
    116: jump end_if_42
    117: else_41:
    118: r87 = 160
    119: r88 = load query
    120: LOAD_FIELD ; Load field data (offset 0)
    121: r90 = load i
    122: r91 = r89 + r90 ; Calculate array element address
    123: UNKNOWN_OP_67 ; Store to array[index] (u8)
    124: end_if_42:
    125: r92 = 1
    126: r75 = r75 + r92 ; Increment i
    127: jump for_loop_39
    128: for_end_40:
    129: UNKNOWN_OP_88
    130: UNKNOWN_OP_86 ; Print "Searching with custom query vector...
" (38 chars via loop)
    131: r95 = load query
    132: UNKNOWN_OP_68
    133: r97 = call search_best_match
    134: store , r97
    135: r98 = load result2
    136: LOAD_FIELD ; Load field vector_id (offset 0)
    137: UNKNOWN_OP_81
    138: r100 = load result2
    139: LOAD_FIELD ; Load field score (offset 1)
    140: UNKNOWN_OP_82
    141: r102 = load result2
    142: LOAD_FIELD ; Load field similarity (offset 3)
    143: UNKNOWN_OP_81
    144: UNKNOWN_OP_88
    145: UNKNOWN_OP_86 ; Print "â ZVDB-MinZ 256-bit Implementation Working!
" (49 chars via loop)
    146: UNKNOWN_OP_88
    147: UNKNOWN_OP_86 ; Print "   â¢ Full 256-bit vectors (32 bytes each)
" (47 chars via loop)
    148: UNKNOWN_OP_88
    149: UNKNOWN_OP_86 ; Print "   â¢ Hamming distance calculation
" (39 chars via loop)
    150: UNKNOWN_OP_88
    151: UNKNOWN_OP_86 ; Print "   â¢ Similarity search with scoring
" (41 chars via loop)
    152: UNKNOWN_OP_88
    153: UNKNOWN_OP_86 ; Print "   â¢ Production-ready for Z80 hardware!
" (45 chars via loop)
    154: return

