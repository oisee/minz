; MinZ generated code
; Generated: 2025-08-02 13:03:29


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.test_basic_math
.Users.alice.dev.minz-ts.examples.working_demo.test_basic_math:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = 20
    LD A, 20
    LD C, A         ; Store to physical register C
    ; store , r4
    LD A, C
    LD ($F006), A
    ; r6 = load a
    LD A, ($F002)
    LD E, A         ; Store to physical register E
    ; r7 = load b
    LD A, ($F006)
    LD H, A         ; Store to physical register H
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r8
    LD ($F00A), HL
    ; r9 = load sum
    LD HL, ($F00A)
    ; r10 = 30
    LD A, 30
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r11 = r9 == r10
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r11, else_1
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_1
    ; r12 = 0
    LD A, 0
    ; Register 12 already in A
    ; return r12
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; r13 = 1
    LD A, 1
    ; Register 13 already in A
    ; return r13
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.test_arrays
.Users.alice.dev.minz-ts.examples.working_demo.test_arrays:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load arr
    LD HL, ($F002)
    ; r4 = 2
    LD A, 2
    ; Register 4 already in A
    ; Load array element (u8)
    PUSH HL
    ; Register 4 already in A
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    ; Register 5 already in A
    ; r6 = &r5
    ; Address-of operation for register r5
    LD HL, $F00A  ; Variable address
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; store , r6
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD ($F004), HL
    ; r7 = load ptr
    LD HL, ($F004)
    ; r8 = *r7
    LD A, (HL)
    LD E, A         ; Store to physical register E
    ; r9 = 3
    LD A, 3
    LD E, A         ; Store to physical register E
    ; r10 = r8 == r9
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r10, else_3
    LD A, E
    OR A
    JP Z, else_3
    ; r11 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; return r11
    RET
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; r12 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; return r12
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.test_structs
.Users.alice.dev.minz-ts.examples.working_demo.test_structs:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Point
    LD HL, -2
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r3 = 10
    LD A, 10
    LD ($F006), A     ; Virtual register 3 to memory
    ; Store to Point.x
    PUSH HL
    LD HL, ($F006)    ; Virtual register 3 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r4 = 20
    LD A, 20
    LD L, A         ; Store to physical register L
    ; Store to Point.y
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store , r2
    LD ($F002), HL
    ; r5 = load p
    LD HL, ($F002)
    ; Load field x (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r7 = load p
    LD HL, ($F002)
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; Load field y (offset 1)
    LD HL, ($F00E)    ; Virtual register 7 from memory
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r9 = r6 + r8
    LD D, H
    LD E, L
    ADD HL, DE
    ; r10 = 30
    LD A, 30
    LD ($F014), A     ; Virtual register 10 to memory
    ; r11 = r9 == r10
    LD D, H
    LD E, L
    LD HL, ($F014)    ; Virtual register 10 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r11, else_5
    LD A, H
    OR A
    JP Z, else_5
    ; r12 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; return r12
    RET
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; r13 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; return r13
    ; Register 13 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.test_lambdas$add_0
.Users.alice.dev.minz-ts.examples.working_demo.test_lambdas$add_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.working_demo.test_lambdas$add_0_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
.Users.alice.dev.minz-ts.examples.working_demo.test_lambdas$add_0_param_y:
    LD DE, #0000   ; SMC parameter y (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.test_lambdas
.Users.alice.dev.minz-ts.examples.working_demo.test_lambdas:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 15
    LD A, 15
    LD L, A         ; Store to physical register L
    ; r3 = 25
    LD A, 25
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = call add
    ; Call to add (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL add
    ; store , r4
    LD ($F002), HL
    ; r5 = load result
    LD HL, ($F002)
    ; Register 5 already in HL
    ; r6 = 40
    LD A, 40
    LD H, A         ; Store to physical register H
    ; r7 = r5 == r6
    ; Register 5 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; jump_if_not r7, else_7
    LD A, ($F00E)     ; Virtual register 7 from memory
    OR A
    JP Z, else_7
    ; r8 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; return r8
    ; Register 8 already in HL
    RET
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; end_if_8:
end_if_8:
    ; r9 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; return r9
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.test_loops
.Users.alice.dev.minz-ts.examples.working_demo.test_loops:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r2
    LD A, L
    LD ($F002), A
    ; r3 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r4 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; Initialize loop variable i
    ; for_loop_9:
for_loop_9:
    ; Check i < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    ; jump_if_not r6, for_end_10
    LD A, H
    OR A
    JP Z, for_end_10
    ; r7 = load sum
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r8 = load i
    LD HL, ($F000)
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = r7 + r8
    LD D, H
    LD E, L
    LD HL, ($F010)    ; Virtual register 8 from memory
    ADD HL, DE
    ; store sum, r9
    LD A, H
    LD ($F002), A
    ; r10 = 1
    LD A, 1
    LD ($F014), A     ; Virtual register 10 to memory
    ; Increment i
    LD D, H
    LD E, L
    LD HL, ($F014)    ; Virtual register 10 from memory
    ADD HL, DE
    ; jump for_loop_9
    JP for_loop_9
    ; for_end_10:
for_end_10:
    ; r11 = load sum
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r12 = 10
    LD A, 10
    LD ($F018), A     ; Virtual register 12 to memory
    ; r13 = r11 == r12
    LD D, H
    LD E, L
    LD HL, ($F018)    ; Virtual register 12 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    ; jump_if_not r13, else_11
    LD A, H
    OR A
    JP Z, else_11
    ; r14 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; return r14
    RET
    ; jump end_if_12
    JP end_if_12
    ; else_11:
else_11:
    ; end_if_12:
end_if_12:
    ; r15 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; return r15
    ; Register 15 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.multiply
.Users.alice.dev.minz-ts.examples.working_demo.multiply:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.working_demo.multiply_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
.Users.alice.dev.minz-ts.examples.working_demo.multiply_param_b:
    LD DE, #0000   ; SMC parameter b (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 * r4
    ; 16-bit multiplication
    LD (mul_src1_12), HL  ; Save multiplicand
    LD (mul_src2_12), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_12)  ; DE = multiplicand
    LD BC, (mul_src2_12)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_12
.mul16_loop_12:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_12
.mul16_done_12:
mul_src1_12: DW 0
mul_src2_12: DW 0
    ; Register 5 already in HL
    ; return r5
    ; Register 5 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.test_function_calls
.Users.alice.dev.minz-ts.examples.working_demo.test_function_calls:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 12
    LD A, 12
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 11
    LD A, 11
    LD H, A         ; Store to physical register H
    ; r4 = call multiply
    ; Call to multiply (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.multiply
    ; store , r4
    LD ($F002), HL
    ; r5 = load result
    LD HL, ($F002)
    ; r6 = 132
    LD A, 132
    LD L, A         ; Store to physical register L
    ; r7 = r5 == r6
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L14
    LD HL, 0
    JP .L15
.L14:
    LD HL, 1
.L15:
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; jump_if_not r7, else_13
    LD A, ($F00E)     ; Virtual register 7 from memory
    OR A
    JP Z, else_13
    ; r8 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; return r8
    ; Register 8 already in HL
    RET
    ; jump end_if_14
    JP end_if_14
    ; else_13:
else_13:
    ; end_if_14:
end_if_14:
    ; r9 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; return r9
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.working_demo.main
.Users.alice.dev.minz-ts.examples.working_demo.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r2
    LD A, L
    LD ($F002), A
    ; r3 = load errors
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r4 = call test_basic_math
    ; Call to test_basic_math (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.test_basic_math
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; store errors, r5
    LD A, ($F00A)     ; Virtual register 5 from memory
    LD ($F002), A
    ; r6 = load errors
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r7 = call test_arrays
    ; Call to test_arrays (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.test_arrays
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    LD HL, ($F00E)    ; Virtual register 7 from memory
    ADD HL, DE
    ; store errors, r8
    LD A, H
    LD ($F002), A
    ; r9 = load errors
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r10 = call test_structs
    ; Call to test_structs (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.test_structs
    LD ($F014), HL    ; Virtual register 10 to memory
    ; r11 = r9 + r10
    LD D, H
    LD E, L
    LD HL, ($F014)    ; Virtual register 10 from memory
    ADD HL, DE
    ; store errors, r11
    LD A, H
    LD ($F002), A
    ; r12 = load errors
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r13 = call test_lambdas
    ; Call to test_lambdas (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.test_lambdas
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; r14 = r12 + r13
    LD D, H
    LD E, L
    LD HL, ($F01A)    ; Virtual register 13 from memory
    ADD HL, DE
    ; store errors, r14
    LD A, H
    LD ($F002), A
    ; r15 = load errors
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r16 = call test_loops
    ; Call to test_loops (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.test_loops
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = r15 + r16
    LD D, H
    LD E, L
    LD HL, ($F020)    ; Virtual register 16 from memory
    ADD HL, DE
    ; store errors, r17
    LD A, H
    LD ($F002), A
    ; r18 = load errors
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; r19 = call test_function_calls
    ; Call to test_function_calls (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.working_demo.test_function_calls
    ; Register 19 already in HL
    ; r20 = r18 + r19
    LD D, H
    LD E, L
    ; Register 19 already in HL
    ADD HL, DE
    ; store errors, r20
    LD A, H
    LD ($F002), A
    ; r21 = load errors
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; return r21
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
