; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.memory_operations.mem_set(dest: *u8, value: u8, count: u16) -> void
  @smc
  Instructions:
      0: loop_1:
      1: UNKNOWN_OP_33 ; Load from anchor count$imm0
      2: UNKNOWN_OP_57
      3: jump_if_not r6, end_loop_2
      4: UNKNOWN_OP_33 ; Load from anchor value$imm0
      5: UNKNOWN_OP_33 ; Load from anchor dest$imm0
      6: UNKNOWN_OP_70 ; Store through pointer
      7: UNKNOWN_OP_33 ; Load from anchor dest$imm0
      8: r10 = 1
      9: r11 = r9 + r10
     10: UNKNOWN_OP_33 ; Load from anchor count$imm0
     11: store dest, r11
     12: jump loop_1
     13: end_loop_2:
     14: return

Function .Users.alice.dev.minz-ts.examples.memory_operations.mem_copy(dest: *u8, src: *u8, count: u16) -> void
  @smc
  Instructions:
      0: loop_3:
      1: UNKNOWN_OP_33 ; Load from anchor count$imm0
      2: UNKNOWN_OP_57
      3: jump_if_not r6, end_loop_4
      4: UNKNOWN_OP_33 ; Load from anchor src$imm0
      5: UNKNOWN_OP_69
      6: UNKNOWN_OP_33 ; Load from anchor dest$imm0
      7: UNKNOWN_OP_70 ; Store through pointer
      8: UNKNOWN_OP_33 ; Load from anchor dest$imm0
      9: r11 = 1
     10: r12 = r10 + r11
     11: r15 = r13 + r14
     12: UNKNOWN_OP_33 ; Load from anchor src$imm0
     13: r14 = 1
     14: UNKNOWN_OP_33 ; Load from anchor count$imm0
     15: store src, r15
     16: store dest, r12
     17: jump loop_3
     18: end_loop_4:
     19: return

Function .Users.alice.dev.minz-ts.examples.memory_operations.mem_compare(ptr1: *u8, ptr2: *u8, count: u16) -> i8
  @smc
  Instructions:
      0: loop_5:
      1: UNKNOWN_OP_33 ; Load from anchor count$imm0
      2: UNKNOWN_OP_57
      3: jump_if_not r6, end_loop_6
      4: UNKNOWN_OP_33 ; Load from anchor ptr1$imm0
      5: UNKNOWN_OP_69
      6: UNKNOWN_OP_33 ; Load from anchor ptr2$imm0
      7: UNKNOWN_OP_69
      8: r11 = r8 != r10
      9: jump_if_not r11, else_7
     10: UNKNOWN_OP_33 ; Load from anchor ptr1$imm0
     11: UNKNOWN_OP_69
     12: UNKNOWN_OP_33 ; Load from anchor ptr2$imm0
     13: UNKNOWN_OP_69
     14: r16 = r13 < r15
     15: jump_if_not r16, else_9
     16: r18 = -1 ; Folded: 
     17: return r18
     18: else_9:
     19: r19 = 1
     20: return r19
     21: else_7:
     22: UNKNOWN_OP_33 ; Load from anchor ptr1$imm0
     23: r21 = 1
     24: r22 = r20 + r21
     25: r25 = r23 + r24
     26: UNKNOWN_OP_33 ; Load from anchor ptr2$imm0
     27: r24 = 1
     28: UNKNOWN_OP_33 ; Load from anchor count$imm0
     29: store ptr2, r25
     30: store ptr1, r22
     31: jump loop_5
     32: end_loop_6:
     33: r29 = 0
     34: return r29

