; MinZ generated code
; Generated: 2025-08-02 13:03:28


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.add_bytes
.Users.alice.dev.minz-ts.examples.test_register_params.add_bytes:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.test_register_params.add_bytes_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
.Users.alice.dev.minz-ts.examples.test_register_params.add_bytes_param_b:
    LD DE, #0000   ; SMC parameter b (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.add_words
.Users.alice.dev.minz-ts.examples.test_register_params.add_words:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.test_register_params.add_words_param_x:
    LD HL, #0000   ; SMC parameter x
    ; Register 3 already in HL
.Users.alice.dev.minz-ts.examples.test_register_params.add_words_param_y:
    LD DE, #0000   ; SMC parameter y
    EX DE, HL      ; Move to HL for storage
    LD D, H
    LD E, L
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.process
.Users.alice.dev.minz-ts.examples.test_register_params.process:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.test_register_params.process_param_value:
    LD HL, #0000   ; SMC parameter value (u8->u16)
    ; store , r5
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD ($F008), A
    ; r6 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
.Users.alice.dev.minz-ts.examples.test_register_params.process_param_count:
    LD BC, #0000   ; SMC parameter count
    LD H, B
    LD L, C        ; Move to HL for storage
    ; Initialize loop variable i
    ; for_loop_1:
for_loop_1:
    ; Check i < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r9, for_end_2
    LD A, L
    OR A
    JP Z, for_end_2
    ; r10 = load sum
    LD A, ($F008)
    LD L, A         ; Store to HL (low byte)
; TSMC reference parameter ptr
ptr$immOP:
    LD HL, 0000      ; TSMC ref address for ptr
ptr$imm0 EQU ptr$immOP+1
    ; r12 = *r11
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r13 = r10 + r12
    ; Register 10 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 13 already in HL
    ; store sum, r13
    LD A, L
    LD ($F008), A
    LD HL, (ptr$imm0) ; Reload TSMC ref address
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; r15 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r16 = r14 + r15
    LD HL, ($F01C)    ; Virtual register 14 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store ptr, r16
    LD ($F000), HL
    ; r17 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Increment i
    LD D, H
    LD E, L
    ; Register 17 already in HL
    ADD HL, DE
    ; jump for_loop_1
    JP for_loop_1
    ; for_end_2:
for_end_2:
    ; r18 = load sum
    LD A, ($F008)
    LD H, A         ; Store to physical register H
    ; return r18
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.many_params
.Users.alice.dev.minz-ts.examples.test_register_params.many_params:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Parameter a from stack
    LD L, (IX+4)
    LD H, (IX+5)
    ; Parameter b from stack
    LD L, (IX+6)
    LD H, (IX+7)
    ; Parameter c from stack
    LD L, (IX+8)
    LD H, (IX+9)
    ; Parameter d from stack
    LD L, (IX+10)
    LD H, (IX+11)
    ; Parameter e from stack
    LD L, (IX+12)
    LD H, (IX+13)
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; r6 = param a
    ; Load parameter a
    ; r7 = param b
    ; Load parameter b
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    LD HL, ($F00E)    ; Virtual register 7 from memory
    ADD HL, DE
    ; r9 = param c
    ; Load parameter c
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    LD HL, ($F012)    ; Virtual register 9 from memory
    ADD HL, DE
    ; r11 = param d
    ; Load parameter d
    ; r12 = r10 + r11
    LD D, H
    LD E, L
    LD HL, ($F016)    ; Virtual register 11 from memory
    ADD HL, DE
    ; r13 = param e
    ; Load parameter e
    ; r14 = r12 + r13
    LD D, H
    LD E, L
    ; Register 13 already in HL
    ADD HL, DE
    ; return r14
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum
.Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
.Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum_param_n:
    LD HL, #0000   ; SMC parameter n (u8->u16)
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r4 = r2 == r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r4, else_3
    LD A, L
    OR A
    JP Z, else_3
    ; r5 = 0
    LD A, 0
    LD ($F00A), A     ; Virtual register 5 to memory
    ; return r5
    LD HL, ($F00A)    ; Virtual register 5 from memory
    RET
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    LD A, (.Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum_param_n)
    LD H, A         ; Store to physical register H
    LD A, (.Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum_param_n)
    LD L, A         ; Store to physical register L
    ; r8 = 1
    LD A, 1
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = r7 - r8
    LD D, H
    LD E, L
    LD HL, ($F010)    ; Virtual register 8 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; r10 = call recursive_sum
    ; Call to recursive_sum (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum
    ; r11 = r6 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 11 already in HL
    ; return r11
    ; Register 11 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.main
.Users.alice.dev.minz-ts.examples.test_register_params.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; r3 = 20
    LD A, 20
    LD L, A         ; Store to physical register L
    ; r4 = call add_bytes
    ; Call to add_bytes (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.add_bytes
    ; Register 4 already in HL
    ; store , r4
    ; Register 4 already in HL
    LD ($F002), HL
    ; r6 = 1000
    LD HL, 1000
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; r7 = 2000
    LD HL, 2000
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = call add_words
    ; Call to add_words (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.add_words
    ; store , r8
    LD ($F00A), HL
    ; r11 = 100
    LD A, 100
    LD ($F016), A     ; Virtual register 11 to memory
    ; r12 = load data
    LD HL, ($F012)
    ; r13 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F01C), A     ; Virtual register 14 to memory
    ; r15 = &r14
    ; Address-of operation for register r14
    LD HL, $F01C  ; Variable address
    ; r16 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r17 = call process
    ; Call to process (args: 3)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    LD HL, ($F016)    ; Virtual register 11 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.process
    LD ($F022), HL    ; Virtual register 17 to memory
    ; store , r17
    LD HL, ($F022)    ; Virtual register 17 from memory
    LD ($F014), HL
    ; r19 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r20 = 2
    LD A, 2
    LD ($F028), A     ; Virtual register 20 to memory
    ; r21 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r22 = 4
    LD A, 4
    LD L, A         ; Store to physical register L
    ; r23 = 5
    LD A, 5
    LD ($F02E), A     ; Virtual register 23 to memory
    ; r24 = call many_params
    ; Call to many_params (args: 5)
    ; Stack-based parameter passing
    LD HL, ($F02E)    ; Virtual register 23 from memory
    PUSH HL       ; Argument 4
    PUSH HL       ; Argument 3
    PUSH HL       ; Argument 2
    LD HL, ($F028)    ; Virtual register 20 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.many_params
    ; store , r24
    LD ($F024), HL
    ; r26 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; r27 = call recursive_sum
    ; Call to recursive_sum (args: 1)
    ; Stack-based parameter passing
    ; Register 26 already in HL
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum
    ; store , r27
    LD ($F032), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
