; MinZ generated code
; Generated: 2025-08-02 09:30:03


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.register_test.simple_add
.Users.alice.dev.minz-ts.examples.register_test.simple_add:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.register_test.simple_add_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
.Users.alice.dev.minz-ts.examples.register_test.simple_add_param_b:
    LD DE, #0000   ; SMC parameter b (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.register_test.complex_calc
.Users.alice.dev.minz-ts.examples.register_test.complex_calc:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.register_test.complex_calc_param_x:
    LD HL, #0000   ; SMC parameter x
    LD ($F00A), HL    ; Virtual register 5 to memory
.Users.alice.dev.minz-ts.examples.register_test.complex_calc_param_y:
    LD DE, #0000   ; SMC parameter y
    EX DE, HL      ; Move to HL for storage
    LD D, H
    LD E, L
    ; r7 = r5 + r6
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; store , r7
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD ($F008), HL
    LD HL, (.Users.alice.dev.minz-ts.examples.register_test.complex_calc_param_y)
.Users.alice.dev.minz-ts.examples.register_test.complex_calc_param_z:
    LD BC, #0000   ; SMC parameter z
    LD H, B
    LD L, C        ; Move to HL for storage
    ; r11 = r9 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 11 already in HL
    ; store , r11
    ; Register 11 already in HL
    LD ($F010), HL
    LD HL, (.Users.alice.dev.minz-ts.examples.register_test.complex_calc_param_x)
    LD ($F01A), HL    ; Virtual register 13 to memory
    LD HL, (.Users.alice.dev.minz-ts.examples.register_test.complex_calc_param_z)
    ; Register 14 already in HL
    ; r15 = r13 + r14
    LD HL, ($F01A)    ; Virtual register 13 from memory
    LD D, H
    LD E, L
    ; Register 14 already in HL
    ADD HL, DE
    ; store , r15
    LD ($F018), HL
    ; r16 = load t1
    LD HL, ($F008)
    ; Register 16 already in HL
    ; r17 = load t2
    LD HL, ($F010)
    ; r18 = r16 + r17
    ; Register 16 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 18 already in HL
    ; r19 = load t3
    LD HL, ($F018)
    ; Register 19 already in HL
    ; r20 = r18 + r19
    ; Register 18 already in HL
    LD D, H
    LD E, L
    ; Register 19 already in HL
    ADD HL, DE
    ; return r20
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.register_test.timer_isr
.Users.alice.dev.minz-ts.examples.register_test.timer_isr:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r2
    LD A, L
    LD ($F002), A
    ; r3 = load counter
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r4 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 5 already in HL
    ; store counter, r5
    LD A, L
    LD ($F002), A
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.register_test.main
.Users.alice.dev.minz-ts.examples.register_test.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r3 = 10
    LD A, 10
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = call simple_add
    ; Call to simple_add (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.register_test.simple_add
    ; store , r4
    LD ($F002), HL
    ; r6 = 100
    LD A, 100
    LD L, A         ; Store to HL (low byte)
    ; r7 = 200
    LD A, 200
    LD H, A         ; Store to physical register H
    ; r8 = 300
    LD HL, 300
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = call complex_calc
    ; Call to complex_calc (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    ; Register 6 already in HL
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.register_test.complex_calc
    ; Register 9 already in HL
    ; store , r9
    ; Register 9 already in HL
    LD ($F00A), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
