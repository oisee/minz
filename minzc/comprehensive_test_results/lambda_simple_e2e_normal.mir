; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.add_trad(x: u8, y: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r5 = r3 + r4
      3: return

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.test_lambda$add_0(x: u8, y: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r4 = r2 + r3
      3: return

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.test_lambda() -> u8
  @smc
  Instructions:
      0: r1 = 5
      1: r2 = 3
      2: r3 = call add
      3: return

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.test_double$double_1(x: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r3 = r1 + r2
      3: return

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.test_double() -> u8
  @smc
  Instructions:
      0: r1 = 7
      1: r2 = call double
      2: return

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.test_chain$inc_2(x: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: r2 = 1
      2: r3 = r1 + r2
      3: return

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.test_chain$double_3(x: u8) -> u8
  @smc
  Instructions:
      0: LOAD_PARAM
      1: LOAD_PARAM
      2: r3 = r1 + r2
      3: return

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.test_chain() -> u8
  @smc
  Locals:
    r1 = x: u8
    r3 = y: u16
    r6 = z: u16
  Instructions:
      0: r2 = 5
      1: store , r2
      2: r4 = load x
      3: r5 = call inc
      4: store , r5
      5: r7 = load y
      6: r8 = call double
      7: store , r8
      8: r9 = load z
      9: return

Function .Users.alice.dev.minz-ts.examples.lambda_simple_e2e.main() -> void
  @smc
  Locals:
    r1 = r1: u16
    r5 = r2: u16
    r7 = r3: u16
    r9 = r4: u16
  Instructions:
      0: r2 = 5
      1: r3 = 3
      2: r4 = call add_trad
      3: store , r4
      4: r6 = call test_lambda
      5: store , r6
      6: r8 = call test_double
      7: store , r8
      8: r10 = call test_chain
      9: store , r10
     10: return

