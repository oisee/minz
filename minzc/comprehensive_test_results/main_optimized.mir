; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.main.main() -> void
  @smc
  Locals:
    r4 = x: u8
    r6 = y: u8
    r8 = counter: u16
  Instructions:
      0: r1 = call clear_screen
      1: r3 = call set_border
      2: loop_1:
      3: r10 = load counter
      4: r11 = 1000
      5: r12 = r10 < r11
      6: jump_if_not r12, end_loop_2
      7: r16 = load x
      8: r17 = 20
      9: r18 = r16 > r17
     10: jump_if_not r18, else_3
     11: r23 = load y
     12: r24 = 20
     13: r25 = r23 > r24
     14: jump_if_not r25, else_5
     15: jump end_if_6
     16: else_5:
     17: end_if_6:
     18: jump end_if_4
     19: else_3:
     20: end_if_4:
     21: r29 = call draw_pixel
     22: r31 = call delay
     23: jump loop_1
     24: end_loop_2:
     25: return

Function .Users.alice.dev.minz-ts.examples.main.clear_screen() -> void
  @smc
  Locals:
    r1 = addr: u16
  Instructions:
      0: loop_7:
      1: r3 = load addr
      2: r6 = 22528 ; Folded: 
      3: r7 = r3 < r6
      4: jump_if_not r7, end_loop_8
      5: jump loop_7
      6: end_loop_8:
      7: return

Function .Users.alice.dev.minz-ts.examples.main.set_border(color: u8) -> void
  @smc
  Instructions:
      0: return

Function .Users.alice.dev.minz-ts.examples.main.draw_pixel(x: u8, y: u8) -> void
  @smc
  Locals:
    r3 = addr: u16
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor y$imm0
      1: UNKNOWN_OP_33 ; Load from anchor x$imm0
      2: return

Function .Users.alice.dev.minz-ts.examples.main.delay(count: u16) -> void
  @smc
  Locals:
    r2 = i: u16
  Instructions:
      0: loop_9:
      1: r4 = load i
      2: UNKNOWN_OP_33 ; Load from anchor count$imm0
      3: r6 = r4 < r5
      4: jump_if_not r6, end_loop_10
      5: jump loop_9
      6: end_loop_10:
      7: return

