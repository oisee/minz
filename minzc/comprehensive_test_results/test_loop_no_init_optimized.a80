; MinZ generated code
; Generated: 2025-08-02 13:03:28


; Data section
    ORG $F000

.Users.alice.dev.minz-ts.examples.test_loop_no_init.items:
    DS 3

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_loop_no_init.main
.Users.alice.dev.minz-ts.examples.test_loop_no_init.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = addr(.Users.alice.dev.minz-ts.examples.test_loop_no_init.items)
    LD HL, .Users.alice.dev.minz-ts.examples.test_loop_no_init.items
    ; Register 1 already in HL
    ; Load table base address
    ; Register 1 already in HL
    ; Load table base for end calculation
    ; Register 1 already in HL
    ; Calculate table end (+ 3 elements * 1 bytes)
    LD DE, 3
    ADD HL, DE
    ; Load loop counter
    LD A, 3
    LD C, A         ; Store to physical register C
    ; Check if reached end of table
    LD D, H
    LD E, L
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, D
    OR A
    JP NZ, loop_end_2
    ; Copy element to buffer at $F000
    LD DE, $F000    ; Buffer address
    LD BC, 1       ; Size
    LDIR            ; Copy to buffer
    ; Copy buffer back to element at $F000
    EX DE, HL       ; DE = destination
    LD HL, $F000    ; Buffer address
    LD BC, 1       ; Size
    LDIR            ; Copy from buffer
    ; Advance to next element (+1 bytes)
    LD DE, 1
    ADD HL, DE
    ; Decrement counter and loop if not zero
    LD A, C
    LD B, A
    DJNZ loop_start_1
    LD A, B
    LD C, A         ; Store to physical register C
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
