; MinZ generated code
; Generated: 2025-08-02 13:03:25


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.control_flow.test_if
.Users.alice.dev.minz-ts.examples.control_flow.test_if:
; TRUE SMC function with immediate anchors
x$immOP:
    LD A, 0        ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    ; r3 = 10
    LD A, 10
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 > r3
    LD D, H
    LD E, L
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L2
    JP P, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    LD A, (x$imm0)    ; Reuse from anchor
    LD D, A         ; Store to physical register D
    ; r7 = r5 << r0
    ; Shift left
    LD A, D
    LD B, A       ; B = value to shift
    LD A, ($F000)     ; Virtual register 0 from memory
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_2
    LD B, C       ; B = counter
.shl_loop_2:
    DEC B
    JP M, .shl_done_2
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_2
.shl_done_2:
    LD L, A
    LD H, 0
    ; return r7
    RET
    ; else_1:
else_1:
    LD A, (x$imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r9 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r10 = r8 > r9
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    JP P, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    ; jump_if_not r10, else_3
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_3
    LD A, (x$imm0)    ; Reuse from anchor
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r12 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r13 = r11 + r12
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r13
    RET
    ; else_3:
else_3:
    LD A, (x$imm0)    ; Reuse from anchor
    LD B, A         ; Store to physical register B
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.control_flow.test_while
.Users.alice.dev.minz-ts.examples.control_flow.test_while:
; TRUE SMC function with immediate anchors
    ; loop_5:
loop_5:
    ; r6 = load i
    LD A, ($F008)
    LD B, A         ; Store to physical register B
n$immOP:
    LD B, 0        ; n anchor (will be patched)
n$imm0 EQU n$immOP+1
    ; r8 = r6 < r7
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L6
    LD HL, 0
    JP .L7
.L6:
    LD HL, 1
.L7:
    ; jump_if_not r8, end_loop_6
    LD A, B
    OR A
    JP Z, end_loop_6
    ; jump loop_5
    JP loop_5
    ; end_loop_6:
end_loop_6:
    ; r15 = load sum
    LD A, ($F004)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; return r15
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.control_flow.test_if.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW n$imm0           ; .Users.alice.dev.minz-ts.examples.control_flow.test_while.n
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
