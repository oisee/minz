; MinZ generated code
; Generated: 2025-08-02 13:03:28


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_compound_assignment.test_compound_ops
.Users.alice.dev.minz-ts.examples.test_compound_assignment.test_compound_ops:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = 100
    LD A, 100
    LD C, A         ; Store to physical register C
    ; store , r4
    LD ($F006), HL
    ; r5 = 5
    LD A, 5
    LD E, A         ; Store to physical register E
    ; r6 = load x
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; Compound assignment x +=
    LD D, H
    LD E, L
    ADD HL, DE
    ; store x, r7
    LD A, L
    LD ($F002), A
    ; r8 = 3
    LD A, 3
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = load x
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; Compound assignment x -=
    LD D, H
    LD E, L
    LD HL, ($F010)    ; Virtual register 8 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; store x, r10
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; r11 = 2
    LD A, 2
    LD ($F016), A     ; Virtual register 11 to memory
    ; r12 = load x
    LD A, ($F002)
    LD B, A         ; Store to physical register B
    ; Compound assignment x *=
    ; 8-bit multiplication
    LD A, B
    LD B, A       ; B = multiplicand
    LD A, ($F016)     ; Virtual register 11 from memory
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; store x, r13
    LD A, ($F01A)     ; Virtual register 13 from memory
    LD ($F002), A
    ; r14 = 4
    LD A, 4
    ; Register 14 already in A
    ; r15 = load x
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Compound assignment x /=
    ; 8-bit division
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD D, A       ; D = dividend
    ; Register 14 already in A
    LD E, A       ; E = divisor
    OR A          ; Check for divide by zero
    JR Z, .div_by_zero_1
    LD B, 0       ; B = quotient
    LD A, D       ; A = remainder
.div_loop_1:
    CP E          ; Compare remainder with divisor
    JR C, .div_done_1
    SUB E         ; Subtract divisor
    INC B         ; Increment quotient
    JR .div_loop_1
.div_by_zero_1:
    LD B, 0       ; Return 0 for divide by zero
.div_done_1:
    LD L, B       ; Result in L
    LD H, 0
    ; store x, r16
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; r17 = 4
    LD A, 4
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r18 = load x
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; Compound assignment x %=
    ; 8-bit modulo
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD D, A       ; D = dividend
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD E, A       ; E = divisor
    OR A          ; Check for divide by zero
    JR Z, .mod_by_zero_2
    LD A, D       ; A = dividend
.mod_loop_2:
    CP E          ; Compare with divisor
    JR C, .mod_done_2
    SUB E         ; Subtract divisor
    JR .mod_loop_2
.mod_by_zero_2:
    LD A, 0       ; Return 0 for modulo by zero
.mod_done_2:
    LD L, A       ; Result (remainder) in L
    LD H, 0
    ; store x, r19
    LD A, B
    LD ($F002), A
    ; r20 = 50
    LD A, 50
    LD E, A         ; Store to DE (low byte)
    ; r21 = load y
    LD HL, ($F006)
    ; Compound assignment y +=
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    LD ($F02C), HL    ; Virtual register 22 to memory
    ; store y, r22
    LD HL, ($F02C)    ; Virtual register 22 from memory
    LD ($F006), HL
    ; r23 = 25
    LD A, 25
    LD B, A         ; Store to physical register B
    ; r24 = load y
    LD HL, ($F006)
    ; Register 24 already in HL
    ; Compound assignment y -=
    ; Register 24 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    LD ($F032), HL    ; Virtual register 25 to memory
    ; store y, r25
    LD HL, ($F032)    ; Virtual register 25 from memory
    LD ($F006), HL
    ; r26 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; r27 = load y
    LD HL, ($F006)
    ; Compound assignment y *=
    ; 16-bit multiplication
    LD (mul_src1_3), HL  ; Save multiplicand
    ; Register 26 already in HL
    LD (mul_src2_3), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_3)  ; DE = multiplicand
    LD BC, (mul_src2_3)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_3
.mul16_loop_3:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_3
.mul16_done_3:
mul_src1_3: DW 0
mul_src2_3: DW 0
    LD ($F038), HL    ; Virtual register 28 to memory
    ; store y, r28
    LD HL, ($F038)    ; Virtual register 28 from memory
    LD ($F006), HL
    ; r29 = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; r30 = load y
    LD HL, ($F006)
    ; Compound assignment y /=
    ; 8-bit division
    LD A, H
    LD D, A       ; D = dividend
    LD A, L
    LD E, A       ; E = divisor
    OR A          ; Check for divide by zero
    JR Z, .div_by_zero_4
    LD B, 0       ; B = quotient
    LD A, D       ; A = remainder
.div_loop_4:
    CP E          ; Compare remainder with divisor
    JR C, .div_done_4
    SUB E         ; Subtract divisor
    INC B         ; Increment quotient
    JR .div_loop_4
.div_by_zero_4:
    LD B, 0       ; Return 0 for divide by zero
.div_done_4:
    LD L, B       ; Result in L
    LD H, 0
    LD ($F03E), HL    ; Virtual register 31 to memory
    ; store y, r31
    LD HL, ($F03E)    ; Virtual register 31 from memory
    LD ($F006), HL
    ; r32 = load y
    LD HL, ($F006)
    ; Register 32 already in HL
    ; r33 = load x
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r34 = r32 + r33
    ; Register 32 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 34 already in HL
    ; return r34
    ; Register 34 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_compound_assignment.test_compound_in_expressions
.Users.alice.dev.minz-ts.examples.test_compound_assignment.test_compound_in_expressions:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; store , r4
    LD A, L
    LD ($F006), A
    ; r6 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r7 = load a
    LD A, ($F002)
    LD L, A         ; Store to physical register L
    ; Compound assignment a +=
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F010), HL    ; Virtual register 8 to memory
    ; store a, r8
    LD A, ($F010)     ; Virtual register 8 from memory
    LD ($F002), A
    ; r9 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r10 = load b
    LD A, ($F006)
    LD L, A         ; Store to physical register L
    ; Compound assignment b *=
    ; 8-bit multiplication
    LD A, L
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_5
.mul_loop_5:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_5
.mul_done_5:
    ; store b, r11
    LD A, H
    LD ($F006), A
    ; r12 = r8 + r11
    LD HL, ($F010)    ; Virtual register 8 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r12
    LD A, L
    LD ($F00A), A
    ; r13 = load result
    LD A, ($F00A)
    LD L, A         ; Store to HL (low byte)
    ; return r13
    ; Register 13 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_compound_assignment.main
.Users.alice.dev.minz-ts.examples.test_compound_assignment.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = call test_compound_ops
    ; Call to test_compound_ops (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.test_compound_assignment.test_compound_ops
    ; store , r2
    LD ($F002), HL
    ; r4 = call test_compound_in_expressions
    ; Call to test_compound_in_expressions (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.test_compound_assignment.test_compound_in_expressions
    LD ($F008), HL    ; Virtual register 4 to memory
    ; store , r4
    LD A, ($F008)     ; Virtual register 4 from memory
    LD ($F006), A
    ; r5 = load basic
    LD HL, ($F002)
    ; r6 = load expr
    LD A, ($F006)
    LD L, A         ; Store to HL (low byte)
    ; r7 = r5 + r6
    LD D, H
    LD E, L
    ; Register 6 already in HL
    ADD HL, DE
    ; Register 7 already in HL
    ; return r7
    ; Register 7 already in HL
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
