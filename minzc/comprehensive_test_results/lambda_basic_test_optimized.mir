; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.lambda_basic_test.add_five_traditional(x: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: return

Function .Users.alice.dev.minz-ts.examples.lambda_basic_test.test_lambda_basic$add_five_0(x: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: return

Function .Users.alice.dev.minz-ts.examples.lambda_basic_test.test_lambda_basic() -> u8
  @smc
  Instructions:
      0: r2 = call add_five
      1: return

Function .Users.alice.dev.minz-ts.examples.lambda_basic_test.test_lambda_direct$f_1(x: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: return

Function .Users.alice.dev.minz-ts.examples.lambda_basic_test.test_lambda_direct() -> u8
  @smc
  Instructions:
      0: r2 = call f
      1: return

Function .Users.alice.dev.minz-ts.examples.lambda_basic_test.test_lambda_multiple$add_2(x: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor x$imm0
      1: return

Function .Users.alice.dev.minz-ts.examples.lambda_basic_test.test_lambda_multiple() -> u8
  @smc
  Locals:
    r1 = a: u16
    r4 = b: u16
  Instructions:
      0: r3 = call add
      1: r6 = call add
      2: return

Function .Users.alice.dev.minz-ts.examples.lambda_basic_test.main() -> void
  @smc
  Locals:
    r1 = t1: u16
    r4 = t2: u16
    r6 = t3: u16
    r8 = t4: u16
  Instructions:
      0: r3 = call add_five_traditional
      1: r5 = call test_lambda_basic
      2: r7 = call test_lambda_direct
      3: r9 = call test_lambda_multiple
      4: return

