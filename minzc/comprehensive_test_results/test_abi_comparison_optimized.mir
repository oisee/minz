; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_auto(a: u8, b: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor a$imm0
      1: UNKNOWN_OP_33 ; Load from anchor b$imm0
      2: r5 = r3 + r4
      3: return r5

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_register(a: u8, b: u8) -> u8
  @smc
  Instructions:
      0: r3 = load a
      1: r4 = load b
      2: r5 = r3 + r4
      3: return r5

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_stack(a: u8, b: u8) -> u8
  @smc
  Instructions:
      0: r3 = load a
      1: r4 = load b
      2: r5 = r3 + r4
      3: return r5

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_smc(a: u8, b: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor a$imm0
      1: UNKNOWN_OP_33 ; Load from anchor b$imm0
      2: r5 = r3 + r4
      3: return r5

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_virtual(a: u8, b: u8) -> u8
  @smc
  Instructions:
      0: r3 = load a
      1: r4 = load b
      2: r5 = r3 + r4
      3: return r5

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.complex_calc(a: u8, b: u8, c: u16, d: u16, e: u8, f: u8) -> u16
  @smc
  Locals:
    r7 = sum1: u16
    r15 = sum2: u16
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor a$imm0
      1: UNKNOWN_OP_33 ; Load from anchor b$imm0
      2: UNKNOWN_OP_33 ; Load from anchor e$imm0
      3: UNKNOWN_OP_33 ; Load from anchor f$imm0
      4: UNKNOWN_OP_33 ; Load from anchor c$imm0
      5: UNKNOWN_OP_33 ; Load from anchor d$imm0
      6: r19 = load sum1
      7: r20 = load sum2
      8: r21 = r19 + r20
      9: return r21

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.factorial(n: u8) -> u16
  @smc
  @recursive
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor n$imm0
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_1
      4: r5 = 1
      5: return r5
      6: else_1:
      7: UNKNOWN_OP_33 ; Load from anchor n$imm0
      8: UNKNOWN_OP_33 ; Load from anchor n$imm0
      9: r10 = call factorial
     10: r11 = r6 * r10
     11: return r11

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.timer_interrupt() -> void
  @smc
  Locals:
    r1 = counter: u8
  Instructions:
      0: return

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.memcpy(dst: *u8, src: *u8, count: u16) -> void
  @smc
  Instructions:
      0: loop_3:
      1: UNKNOWN_OP_33 ; Load from anchor count$imm0
      2: UNKNOWN_OP_57
      3: jump_if_not r6, end_loop_4
      4: UNKNOWN_OP_33 ; Load from anchor src$imm0
      5: UNKNOWN_OP_69
      6: UNKNOWN_OP_33 ; Load from anchor dst$imm0
      7: UNKNOWN_OP_70 ; Store through pointer
      8: UNKNOWN_OP_33 ; Load from anchor dst$imm0
      9: r11 = 1
     10: r12 = r10 + r11
     11: r15 = r13 + r14
     12: UNKNOWN_OP_33 ; Load from anchor src$imm0
     13: r14 = 1
     14: UNKNOWN_OP_33 ; Load from anchor count$imm0
     15: store src, r15
     16: store dst, r12
     17: jump loop_3
     18: end_loop_4:
     19: return

Function .Users.alice.dev.minz-ts.examples.test_abi_comparison.main() -> void
  @smc
  @recursive
  Locals:
    r1 = r1: u16
    r5 = r2: u16
    r9 = r3: u16
    r13 = r4: u16
    r17 = r5: u16
    r21 = r6: u16
    r29 = r7: u16
    r32 = src: [10]u8
    r33 = dst: [10]u8
  Instructions:
      0: r4 = call add_auto
      1: r8 = call add_register
      2: r12 = call add_stack
      3: r16 = call add_smc
      4: r20 = call add_virtual
      5: r28 = call complex_calc
      6: r31 = call factorial
      7: LOAD_INDEX ; Load array element (u8)
      8: UNKNOWN_OP_68
      9: LOAD_INDEX ; Load array element (u8)
     10: UNKNOWN_OP_68
     11: r43 = call memcpy
     12: return

