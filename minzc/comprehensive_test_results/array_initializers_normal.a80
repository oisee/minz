; MinZ generated code
; Generated: 2025-08-02 09:30:02


; Data section
    ORG $F000

str_0:
    DB 5    ; Length
    DB "RGB: "
    DB 0               ; Null terminator
str_1:
    DB 2    ; Length
    DB ", "
    DB 0               ; Null terminator
str_2:
    DB 2    ; Length
    DB ", "
    DB 0               ; Null terminator
str_3:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_4:
    DB 9    ; Length
    DB "Matrix:"
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_5:
    DB 1    ; Length
    DB " "
    DB 0               ; Null terminator
str_6:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_7:
    DB 1    ; Length
    DB " "
    DB 0               ; Null terminator
str_8:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_9:
    DB 5    ; Length
    DB "Sum: "
    DB 0               ; Null terminator

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.array_initializers.main
.Users.alice.dev.minz-ts.examples.array_initializers.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r5 = string(str_0)
    LD HL, str_0
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; print_string(r5)
    LD HL, ($F00A)    ; Virtual register 5 from memory
    CALL print_string
    ; r6 = load colors
    LD HL, ($F002)
    ; r7 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; Load array element (u8)
    PUSH HL
    LD A, C
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F010), A     ; Virtual register 8 to memory
    ; print_u8(r8)
    LD A, ($F010)     ; Virtual register 8 from memory
    CALL print_u8_decimal
    ; r9 = string(str_1)
    LD HL, str_1
    ; print_string(r9)
    CALL print_string
    ; r10 = load colors
    LD HL, ($F002)
    ; r11 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; print_u8(r12)
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    CALL print_u8_decimal
    ; r13 = string(str_2)
    LD HL, str_2
    ; print_string(r13)
    CALL print_string
    ; r14 = load colors
    LD HL, ($F002)
    ; r15 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; Load array element (u8)
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD D, A         ; Store to physical register D
    ; print_u8(r16)
    LD A, D
    CALL print_u8_decimal
    ; r17 = string(str_3)
    LD HL, str_3
    ; print_string(r17)
    CALL print_string
    ; r18 = string(str_4)
    LD HL, str_4
    ; print_string(r18)
    CALL print_string
    ; r19 = load matrix
    LD HL, ($F004)
    LD D, H
    LD E, L
    ; r20 = 0
    LD A, 0
    ; Register 20 already in A
    ; Load array element ([2]u8)
    LD H, D
    LD L, E
    PUSH HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r22 = 0
    LD A, 0
    ; Register 22 already in A
    ; Load array element (u8)
    PUSH HL
    ; Register 22 already in A
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F02E), A     ; Virtual register 23 to memory
    ; print_u8(r23)
    LD A, ($F02E)     ; Virtual register 23 from memory
    CALL print_u8_decimal
    ; r24 = string(str_5)
    LD HL, str_5
    ; print_string(r24)
    CALL print_string
    ; r25 = load matrix
    LD HL, ($F004)
    ; Register 25 already in HL
    ; r26 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; Load array element ([2]u8)
    ; Register 25 already in HL
    PUSH HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r28 = 1
    LD A, 1
    LD ($F038), A     ; Virtual register 28 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F038)     ; Virtual register 28 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; print_u8(r29)
    LD A, H
    CALL print_u8_decimal
    ; r30 = string(str_6)
    LD HL, str_6
    ; Register 30 already in HL
    ; print_string(r30)
    ; Register 30 already in HL
    CALL print_string
    ; r31 = load matrix
    LD HL, ($F004)
    ; r32 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Load array element ([2]u8)
    PUSH HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r34 = 0
    LD A, 0
    LD ($F044), A     ; Virtual register 34 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F044)     ; Virtual register 34 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; print_u8(r35)
    LD A, H
    CALL print_u8_decimal
    ; r36 = string(str_7)
    LD HL, str_7
    ; Register 36 already in HL
    ; print_string(r36)
    ; Register 36 already in HL
    CALL print_string
    ; r37 = load matrix
    LD HL, ($F004)
    ; r38 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Load array element ([2]u8)
    PUSH HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r40 = 1
    LD A, 1
    LD ($F050), A     ; Virtual register 40 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F050)     ; Virtual register 40 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; print_u8(r41)
    LD A, H
    CALL print_u8_decimal
    ; r42 = string(str_8)
    LD HL, str_8
    ; Register 42 already in HL
    ; print_string(r42)
    ; Register 42 already in HL
    CALL print_string
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.array_initializers.sum_array
.Users.alice.dev.minz-ts.examples.array_initializers.sum_array:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r3
    LD A, H
    LD ($F004), A
    ; r4 = 0
    LD A, 0
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = 4
    LD A, 4
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    LD HL, ($F008)    ; Virtual register 4 from memory
    ; for_loop_1:
for_loop_1:
    ; Check i < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; Register 7 already in HL
    ; jump_if_not r7, for_end_2
    LD A, L
    OR A
    JP Z, for_end_2
    ; r8 = load sum
    LD A, ($F004)
    LD H, A         ; Store to physical register H
; TSMC reference parameter arr
arr$immOP:
    LD HL, 0000      ; TSMC ref address for arr
arr$imm0 EQU arr$immOP+1
    ; r10 = load i
    LD HL, ($F000)
    LD ($F014), HL    ; Virtual register 10 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F014)     ; Virtual register 10 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r12 = r8 + r11
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 12 already in HL
    ; store sum, r12
    LD A, L
    LD ($F004), A
    ; r13 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_1
    JP for_loop_1
    ; for_end_2:
for_end_2:
    ; r14 = load sum
    LD A, ($F004)
    LD L, A         ; Store to physical register L
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.array_initializers.test_sum
.Users.alice.dev.minz-ts.examples.array_initializers.test_sum:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load numbers
    LD HL, ($F002)
    LD ($F006), HL    ; Virtual register 3 to memory
    ; r4 = &r3
    ; Address-of operation for register r3
    LD HL, $F006  ; Variable address
    ; r5 = call sum_array
    ; Call to sum_array (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.array_initializers.sum_array
    ; store , r5
    LD ($F004), HL
    ; r6 = string(str_9)
    LD HL, str_9
    ; print_string(r6)
    CALL print_string
    ; r7 = load total
    LD HL, ($F004)
    ; print_u16(r7)
    CALL print_u16_decimal
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
