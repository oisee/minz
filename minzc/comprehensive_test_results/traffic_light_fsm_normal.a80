; MinZ generated code
; Generated: 2025-08-02 13:03:29


; Data section
    ORG $F000

str_0:
    DB 38    ; Length
    DB "Traffic Light Simulation Starting..."
    DB 92
    DB "n"
str_1:
    DB 6    ; Length
    DB "Cycle "
str_2:
    DB 8    ; Length
    DB ": State "
str_3:
    DB 5    ; Length
    DB " for "
str_4:
    DB 10    ; Length
    DB " seconds"
    DB 92
    DB "n"
str_5:
    DB 39    ; Length
    DB 92
    DB "nEMERGENCY! Switching to flashing..."
    DB 92
    DB "n"
str_6:
    DB 17    ; Length
    DB "Emergency state: "
str_7:
    DB 2    ; Length
    DB 92
    DB "n"
str_8:
    DB 30    ; Length
    DB "Emergency over, resetting..."
    DB 92
    DB "n"
str_9:
    DB 16    ; Length
    DB "Reset to state: "
str_10:
    DB 2    ; Length
    DB 92
    DB "n"

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition
.Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition_param_current:
    LD HL, #0000   ; SMC parameter current (u8->u16)
    ; r4 = r3 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if r4, case_arm_0_2
    LD A, B
    OR A
    JP NZ, case_arm_0_2
    ; jump case_arm_1_3
    JP case_arm_1_3
    ; r5 = r3 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if r5, case_arm_1_3
    LD A, C
    OR A
    JP NZ, case_arm_1_3
    ; jump case_arm_2_4
    JP case_arm_2_4
    ; r6 = r3 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if r6, case_arm_2_4
    LD A, D
    OR A
    JP NZ, case_arm_2_4
    ; jump case_arm_3_5
    JP case_arm_3_5
    ; r7 = r3 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; jump_if r7, case_arm_3_5
    LD A, E
    OR A
    JP NZ, case_arm_3_5
    ; jump case_end_1
    JP case_end_1
    ; case_arm_0_2:
case_arm_0_2:
    ; jump case_end_1
    JP case_end_1
    ; case_arm_1_3:
case_arm_1_3:
    ; jump case_end_1
    JP case_end_1
    ; case_arm_2_4:
case_arm_2_4:
    ; jump case_end_1
    JP case_end_1
    ; case_arm_3_5:
case_arm_3_5:
    ; case_end_1:
case_end_1:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_timing
.Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_timing:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_timing_param_state:
    LD HL, #0000   ; SMC parameter state (u8->u16)
    ; r3 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    ; jump_if r3, case_arm_0_7
    LD A, L
    OR A
    JP NZ, case_arm_0_7
    ; jump case_arm_1_8
    JP case_arm_1_8
    ; r4 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    LD ($F008), HL    ; Virtual register 4 to memory
    ; jump_if r4, case_arm_1_8
    LD A, ($F008)     ; Virtual register 4 from memory
    OR A
    JP NZ, case_arm_1_8
    ; jump case_arm_2_9
    JP case_arm_2_9
    ; r5 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L13
    LD HL, 0
    JP .L14
.L13:
    LD HL, 1
.L14:
    ; jump_if r5, case_arm_2_9
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    OR A
    JP NZ, case_arm_2_9
    ; jump case_arm_3_10
    JP case_arm_3_10
    ; r6 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L15
    LD HL, 0
    JP .L16
.L15:
    LD HL, 1
.L16:
    ; jump_if r6, case_arm_3_10
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP NZ, case_arm_3_10
    ; jump case_end_6
    JP case_end_6
    ; case_arm_0_7:
case_arm_0_7:
    ; r7 = 30
    LD A, 30
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; jump case_end_6
    JP case_end_6
    ; case_arm_1_8:
case_arm_1_8:
    ; r8 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; jump case_end_6
    JP case_end_6
    ; case_arm_2_9:
case_arm_2_9:
    ; r9 = 25
    LD A, 25
    LD ($F012), A     ; Virtual register 9 to memory
    ; jump case_end_6
    JP case_end_6
    ; case_arm_3_10:
case_arm_3_10:
    ; r10 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; case_end_6:
case_end_6:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code
.Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code_param_state:
    LD HL, #0000   ; SMC parameter state (u8->u16)
    ; r3 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L17
    LD HL, 0
    JP .L18
.L17:
    LD HL, 1
.L18:
    LD ($F006), HL    ; Virtual register 3 to memory
    ; jump_if r3, case_arm_0_12
    LD A, ($F006)     ; Virtual register 3 from memory
    OR A
    JP NZ, case_arm_0_12
    ; jump case_arm_1_13
    JP case_arm_1_13
    ; r4 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L19
    LD HL, 0
    JP .L20
.L19:
    LD HL, 1
.L20:
    LD ($F008), HL    ; Virtual register 4 to memory
    ; jump_if r4, case_arm_1_13
    LD A, ($F008)     ; Virtual register 4 from memory
    OR A
    JP NZ, case_arm_1_13
    ; jump case_arm_2_14
    JP case_arm_2_14
    ; r5 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L21
    LD HL, 0
    JP .L22
.L21:
    LD HL, 1
.L22:
    ; jump_if r5, case_arm_2_14
    ; Register 5 already in A
    OR A
    JP NZ, case_arm_2_14
    ; jump case_arm_3_15
    JP case_arm_3_15
    ; r6 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L23
    LD HL, 0
    JP .L24
.L23:
    LD HL, 1
.L24:
    ; jump_if r6, case_arm_3_15
    ; Register 6 already in A
    OR A
    JP NZ, case_arm_3_15
    ; jump case_end_11
    JP case_end_11
    ; case_arm_0_12:
case_arm_0_12:
    ; r7 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; jump case_end_11
    JP case_end_11
    ; case_arm_1_13:
case_arm_1_13:
    ; r8 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; jump case_end_11
    JP case_end_11
    ; case_arm_2_14:
case_arm_2_14:
    ; r9 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; jump case_end_11
    JP case_end_11
    ; case_arm_3_15:
case_arm_3_15:
    ; r10 = 4
    LD A, 4
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; case_end_11:
case_end_11:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.simulate_traffic_light
.Users.alice.dev.minz-ts.examples.traffic_light_fsm.simulate_traffic_light:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD ($F002), HL
    ; r4 = 0
    LD A, 0
    LD ($F008), A     ; Virtual register 4 to memory
    ; store , r4
    LD A, ($F008)     ; Virtual register 4 from memory
    LD ($F006), A
    ; r5 = string(str_0)
    LD HL, str_0
    ; print_string(r5)
    CALL print_string
    ; loop_16:
loop_16:
    ; r6 = load cycle_count
    LD A, ($F006)
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = 10
    LD A, 10
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = r6 < r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD D, H
    LD E, L
    LD HL, ($F00E)    ; Virtual register 7 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L25
    LD HL, 0
    JP .L26
.L25:
    LD HL, 1
.L26:
    LD ($F010), HL    ; Virtual register 8 to memory
    ; jump_if_not r8, end_loop_17
    LD A, ($F010)     ; Virtual register 8 from memory
    OR A
    JP Z, end_loop_17
    ; r9 = string(str_1)
    LD HL, str_1
    LD ($F012), HL    ; Virtual register 9 to memory
    ; print_string(r9)
    LD HL, ($F012)    ; Virtual register 9 from memory
    CALL print_string
    ; r10 = load cycle_count
    LD A, ($F006)
    ; Register 10 already in A
    ; print_u8(r10)
    ; Register 10 already in A
    CALL print_u8_decimal
    ; r11 = string(str_2)
    LD HL, str_2
    LD ($F016), HL    ; Virtual register 11 to memory
    ; print_string(r11)
    LD HL, ($F016)    ; Virtual register 11 from memory
    CALL print_string
    ; r12 = load state
    LD HL, ($F002)
    ; r13 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; print_u8(r13)
    LD A, ($F01A)     ; Virtual register 13 from memory
    CALL print_u8_decimal
    ; r14 = string(str_3)
    LD HL, str_3
    ; print_string(r14)
    CALL print_string
    ; r15 = load state
    LD HL, ($F002)
    ; r16 = call get_timing
    ; Call to get_timing (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_timing
    ; print_u8(r16)
    ; Register 16 already in A
    CALL print_u8_decimal
    ; r17 = string(str_4)
    LD HL, str_4
    LD ($F022), HL    ; Virtual register 17 to memory
    ; print_string(r17)
    LD HL, ($F022)    ; Virtual register 17 from memory
    CALL print_string
    ; r18 = load state
    LD HL, ($F002)
    ; r19 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r20 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition
    ; store state, r20
    LD ($F002), HL
    ; r21 = load cycle_count
    LD A, ($F006)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r22 = 1
    LD A, 1
    ; Register 22 already in A
    ; r23 = r21 + r22
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F02E), HL    ; Virtual register 23 to memory
    ; store cycle_count, r23
    LD A, ($F02E)     ; Virtual register 23 from memory
    LD ($F006), A
    ; jump loop_16
    JP loop_16
    ; end_loop_17:
end_loop_17:
    ; r24 = string(str_5)
    LD HL, str_5
    ; print_string(r24)
    CALL print_string
    ; r25 = load state
    LD HL, ($F002)
    LD ($F032), HL    ; Virtual register 25 to memory
    ; r26 = 1
    LD A, 1
    LD E, A         ; Store to physical register E
    ; r27 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    LD HL, ($F032)    ; Virtual register 25 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition
    LD ($F036), HL    ; Virtual register 27 to memory
    ; store state, r27
    LD HL, ($F036)    ; Virtual register 27 from memory
    LD ($F002), HL
    ; r28 = string(str_6)
    LD HL, str_6
    ; print_string(r28)
    CALL print_string
    ; r29 = load state
    LD HL, ($F002)
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; r30 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F03A)    ; Virtual register 29 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code
    ; print_u8(r30)
    LD A, H
    CALL print_u8_decimal
    ; r31 = string(str_7)
    LD HL, str_7
    ; print_string(r31)
    CALL print_string
    ; r32 = string(str_8)
    LD HL, str_8
    ; print_string(r32)
    CALL print_string
    ; r33 = load state
    LD HL, ($F002)
    ; r34 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r35 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition
    ; store state, r35
    LD ($F002), HL
    ; r36 = string(str_9)
    LD HL, str_9
    ; print_string(r36)
    CALL print_string
    ; r37 = load state
    LD HL, ($F002)
    ; r38 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code
    ; print_u8(r38)
    LD A, E
    CALL print_u8_decimal
    ; r39 = string(str_10)
    LD HL, str_10
    ; print_string(r39)
    CALL print_string
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.main
.Users.alice.dev.minz-ts.examples.traffic_light_fsm.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call simulate_traffic_light
    ; Call to simulate_traffic_light (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.traffic_light_fsm.simulate_traffic_light
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
