; MinZ generated code
; Generated: 2025-08-02 13:03:26


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_arrays
.Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_arrays:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Load array element (u8)
    PUSH HL
    LD A, C
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; r6 = r4 != r5
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; jump_if_not r6, else_1
    LD A, ($F00C)     ; Virtual register 6 from memory
    OR A
    JP Z, else_1
    ; return
    RET
    ; else_1:
else_1:
    ; Load array element (u8)
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F012), A     ; Virtual register 9 to memory
    ; r10 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r11 = r9 != r10
    LD HL, ($F012)    ; Virtual register 9 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r11, else_3
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_3
    ; return
    RET
    ; else_3:
else_3:
    ; Store to array[index] (u8)
    PUSH HL
    ; Register 12 already in A
    POP HL
    LD (HL), A
    ; Load array element (u8)
    PUSH HL
    LD A, ($F022)     ; Virtual register 17 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r19 = 10
    LD A, 10
    LD E, A         ; Store to physical register E
    ; r20 = r18 != r19
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r20, else_5
    LD A, E
    OR A
    JP Z, else_5
    ; return
    RET
    ; else_5:
else_5:
    ; Built-in len function
    DEC HL
    DEC HL         ; Point to length field
    LD E, (HL)
    INC HL
    LD D, (HL)     ; Load 16-bit length
    EX DE, HL      ; Result in HL
    ; r23 = 5
    LD A, 5
    ; Register 23 already in A
    ; r24 = r22 != r23
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; jump_if_not r24, else_7
    ; Register 24 already in A
    OR A
    JP Z, else_7
    ; return
    RET
    ; else_7:
else_7:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_pointers
.Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_pointers:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r5 = &r4
    ; Address-of operation for register r4
    LD HL, $F008  ; Variable address
    ; r7 = *r6
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD A, (HL)
    ; Register 7 already in A
    ; r8 = 42
    LD A, 42
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r9 = r7 != r8
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    ; jump_if_not r9, else_9
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_9
    ; return
    RET
    ; else_9:
else_9:
    ; Store through pointer
    PUSH HL
    LD A, B
    POP HL
    LD (HL), A
    ; r12 = load val
    LD A, ($F002)
    ; Register 12 already in A
    ; r13 = 100
    LD A, 100
    ; Register 13 already in A
    ; r14 = r12 != r13
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    ; jump_if_not r14, else_11
    ; Register 14 already in A
    OR A
    JP Z, else_11
    ; return
    RET
    ; else_11:
else_11:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_array_pointers
.Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_array_pointers:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r4 = &r3
    ; Address-of operation for register r3
    LD HL, $F006  ; Variable address
    ; r6 = *r5
    LD H, D
    LD L, E
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r9 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; r10 = r8 != r9
    LD D, H
    LD E, L
    ; Register 9 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L13
    LD HL, 0
    JP .L14
.L13:
    LD HL, 1
.L14:
    ; jump_if_not r10, else_13
    LD A, H
    OR A
    JP Z, else_13
    ; return
    RET
    ; else_13:
else_13:
    ; r12 = *r11
    LD H, B
    LD L, C
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r15 = 30
    LD A, 30
    LD ($F01E), A     ; Virtual register 15 to memory
    ; r16 = r14 != r15
    LD D, H
    LD E, L
    LD HL, ($F01E)    ; Virtual register 15 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L15
    LD HL, 0
    JP .L16
.L15:
    LD HL, 1
.L16:
    ; jump_if_not r16, else_15
    LD A, H
    OR A
    JP Z, else_15
    ; return
    RET
    ; else_15:
else_15:
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r21 = &r20
    ; Address-of operation for register r20
    LD HL, $F028  ; Variable address
    LD ($F02A), HL    ; Virtual register 21 to memory
    ; r23 = *r22
    LD HL, ($F02C)    ; Virtual register 22 from memory
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r24 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; r25 = r23 != r24
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L17
    LD HL, 0
    JP .L18
.L17:
    LD HL, 1
.L18:
    ; jump_if_not r25, else_17
    LD A, L
    OR A
    JP Z, else_17
    ; return
    RET
    ; else_17:
else_17:
    ; Store through pointer
    LD HL, ($F036)    ; Virtual register 27 from memory
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    ; Load array element (u8)
    LD HL, ($F038)    ; Virtual register 28 from memory
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r31 = 25
    LD A, 25
    LD L, A         ; Store to physical register L
    ; r32 = r30 != r31
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L19
    LD HL, 0
    JP .L20
.L19:
    LD HL, 1
.L20:
    ; Register 32 already in HL
    ; jump_if_not r32, else_19
    LD A, L
    OR A
    JP Z, else_19
    ; return
    RET
    ; else_19:
else_19:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_pointer_arithmetic
.Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_pointer_arithmetic:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r6 = &r5
    ; Address-of operation for register r5
    LD HL, $F00A  ; Variable address
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_multidimensional_arrays
.Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_multidimensional_arrays:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Load array element ([3]u8)
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    PUSH HL
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r7 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r8 = r6 != r7
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L21
    LD HL, 0
    JP .L22
.L21:
    LD HL, 1
.L22:
    ; jump_if_not r8, else_21
    LD A, L
    OR A
    JP Z, else_21
    ; return
    RET
    ; else_21:
else_21:
    ; Load array element ([3]u8)
    ; Register 9 already in HL
    PUSH HL
    LD HL, ($F014)    ; Virtual register 10 from memory
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r14 = 6
    LD A, 6
    LD L, A         ; Store to HL (low byte)
    ; r15 = r13 != r14
    LD D, H
    LD E, L
    ; Register 14 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L23
    LD HL, 0
    JP .L24
.L23:
    LD HL, 1
.L24:
    ; jump_if_not r15, else_23
    LD A, H
    OR A
    JP Z, else_23
    ; return
    RET
    ; else_23:
else_23:
    ; Load array element ([3]u8)
    ; Register 17 already in HL
    PUSH HL
    LD HL, ($F024)    ; Virtual register 18 from memory
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F026), A     ; Virtual register 19 to memory
    ; Store to array[index] (u8)
    ; Register 21 already in HL
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    ; Load array element ([3]u8)
    ; Register 22 already in HL
    PUSH HL
    LD HL, ($F02E)    ; Virtual register 23 from memory
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r27 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; r28 = r26 != r27
    LD D, H
    LD E, L
    ; Register 27 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L25
    LD HL, 0
    JP .L26
.L25:
    LD HL, 1
.L26:
    ; jump_if_not r28, else_25
    LD A, H
    OR A
    JP Z, else_25
    ; return
    RET
    ; else_25:
else_25:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.main
.Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r1 = call test_arrays
    ; Call to test_arrays (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_arrays
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r2 = ~r1
    LD A, ($F002)     ; Virtual register 1 from memory
    CPL           ; Complement A
    LD H, A         ; Store to physical register H
    ; jump_if_not r2, else_27
    LD A, H
    OR A
    JP Z, else_27
    ; r3 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; return r3
    POP DE
    POP BC
    RET
    ; else_27:
else_27:
    ; r4 = call test_pointers
    ; Call to test_pointers (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_pointers
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = ~r4
    LD A, ($F008)     ; Virtual register 4 from memory
    CPL           ; Complement A
    LD H, A         ; Store to physical register H
    ; jump_if_not r5, else_29
    LD A, H
    OR A
    JP Z, else_29
    ; r6 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; return r6
    POP DE
    POP BC
    RET
    ; else_29:
else_29:
    ; r7 = call test_array_pointers
    ; Call to test_array_pointers (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_array_pointers
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = ~r7
    LD A, ($F00E)     ; Virtual register 7 from memory
    CPL           ; Complement A
    LD H, A         ; Store to physical register H
    ; jump_if_not r8, else_31
    LD A, H
    OR A
    JP Z, else_31
    ; r9 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; return r9
    POP DE
    POP BC
    RET
    ; else_31:
else_31:
    ; r10 = call test_pointer_arithmetic
    ; Call to test_pointer_arithmetic (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_pointer_arithmetic
    LD ($F014), HL    ; Virtual register 10 to memory
    ; r11 = ~r10
    LD A, ($F014)     ; Virtual register 10 from memory
    CPL           ; Complement A
    LD H, A         ; Store to physical register H
    ; jump_if_not r11, else_33
    LD A, H
    OR A
    JP Z, else_33
    ; r12 = 4
    LD A, 4
    LD L, A         ; Store to physical register L
    ; return r12
    POP DE
    POP BC
    RET
    ; else_33:
else_33:
    ; r13 = call test_multidimensional_arrays
    ; Call to test_multidimensional_arrays (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.minz-ts.examples.feature_tests.02_arrays_pointers.test_multidimensional_arrays
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; r14 = ~r13
    LD A, ($F01A)     ; Virtual register 13 from memory
    CPL           ; Complement A
    LD H, A         ; Store to physical register H
    ; jump_if_not r14, else_35
    LD A, H
    OR A
    JP Z, else_35
    ; r15 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; return r15
    POP DE
    POP BC
    RET
    ; else_35:
else_35:
    ; r16 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; return r16
    ; Register 16 already in HL
    POP DE
    POP BC
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
