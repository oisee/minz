; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.bit_manipulation.set_bit(value: u8, bit: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor value$imm0
      1: r4 = 1
      2: UNKNOWN_OP_33 ; Load from anchor bit$imm0
      3: SHL
      4: r7 = r3 | r6
      5: return r7

Function .Users.alice.dev.minz-ts.examples.bit_manipulation.clear_bit(value: u8, bit: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor value$imm0
      1: r4 = 1
      2: UNKNOWN_OP_33 ; Load from anchor bit$imm0
      3: SHL
      4: r7 = ~r6
      5: r8 = r3 & r7
      6: return r8

Function .Users.alice.dev.minz-ts.examples.bit_manipulation.toggle_bit(value: u8, bit: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor value$imm0
      1: r4 = 1
      2: UNKNOWN_OP_33 ; Load from anchor bit$imm0
      3: SHL
      4: r7 = r3 ^ r6
      5: return r7

Function .Users.alice.dev.minz-ts.examples.bit_manipulation.test_bit(value: u8, bit: u8) -> bool
  @smc
  Instructions:
      0: UNKNOWN_OP_33 ; Load from anchor value$imm0
      1: UNKNOWN_OP_33 ; Load from anchor bit$imm0
      2: UNKNOWN_OP_57
      3: return r9

Function .Users.alice.dev.minz-ts.examples.bit_manipulation.count_bits(value: u8) -> u8
  @smc
  Locals:
    r2 = count: u8
  Instructions:
      0: loop_1:
      1: UNKNOWN_OP_33 ; Load from anchor value$imm0
      2: UNKNOWN_OP_57
      3: jump_if_not r6, end_loop_2
      4: UNKNOWN_OP_33 ; Load from anchor value$imm0
      5: UNKNOWN_OP_33 ; Load from anchor value$imm0
      6: jump loop_1
      7: end_loop_2:
      8: r15 = load count
      9: return r15

