; MinZ generated code
; Generated: 2025-08-02 13:03:28


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_registers.add_numbers
.Users.alice.dev.minz-ts.examples.test_registers.add_numbers:
; TRUE SMC function with immediate anchors
a$immOP:
    LD HL, 0       ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
    ; Register 3 already in HL
b$immOP:
    LD HL, 0       ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    LD D, H
    LD E, L
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_registers.complex_calc
.Users.alice.dev.minz-ts.examples.test_registers.complex_calc:
; TRUE SMC function with immediate anchors
x$immOP:
    LD HL, 0       ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
y$immOP:
    LD HL, 0       ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    LD HL, (y$imm0)   ; Reuse from anchor
z$immOP:
    LD HL, 0       ; z anchor (will be patched)
z$imm0 EQU z$immOP+1
    ; r20 = load c
    LD HL, ($F018)
    ; r21 = load d
    LD HL, ($F020)
    ; r22 = r20 + r21
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 22 already in HL
    ; return r22
    ; Register 22 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_registers.timer_interrupt
.Users.alice.dev.minz-ts.examples.test_registers.timer_interrupt:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_registers.process_array
.Users.alice.dev.minz-ts.examples.test_registers.process_array:
; TRUE SMC function with immediate anchors
    ; loop_1:
loop_1:
    ; r7 = load i
    LD HL, ($F00A)
    ; Register 7 already in HL
len$immOP:
    LD HL, 0       ; len anchor (will be patched)
len$imm0 EQU len$immOP+1
    ; Register 8 already in HL
    ; r9 = r7 < r8
    ; Register 7 already in HL
    LD D, H
    LD E, L
    ; Register 8 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r9, end_loop_2
    LD A, H
    OR A
    JP Z, end_loop_2
data$immOP:
    LD HL, 0       ; data anchor (will be patched)
data$imm0 EQU data$immOP+1
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F01A), A     ; Virtual register 13 to memory
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r18 = load sum
    LD HL, ($F006)
    ; Register 18 already in HL
    ; return r18
    ; Register 18 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_registers.main
.Users.alice.dev.minz-ts.examples.test_registers.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r4 = call add_numbers
    ; Call to add_numbers (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_registers.add_numbers
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD (a$imm0), HL       ; Patch a (atomic)
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD (b$imm0), HL       ; Patch b (atomic)
    CALL .Users.alice.dev.minz-ts.examples.test_registers.add_numbers
    ; r9 = call complex_calc
    ; Call to complex_calc (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_registers.complex_calc
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD (x$imm0), HL       ; Patch x (atomic)
    LD HL, ($F00E)    ; Virtual register 7 from memory
    LD (y$imm0), HL       ; Patch y (atomic)
    LD HL, ($F010)    ; Virtual register 8 from memory
    LD (z$imm0), HL       ; Patch z (atomic)
    CALL .Users.alice.dev.minz-ts.examples.test_registers.complex_calc
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW a$imm0           ; .Users.alice.dev.minz-ts.examples.test_registers.add_numbers.a
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; .Users.alice.dev.minz-ts.examples.test_registers.add_numbers.b
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.test_registers.complex_calc.x
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; .Users.alice.dev.minz-ts.examples.test_registers.complex_calc.y
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW z$imm0           ; .Users.alice.dev.minz-ts.examples.test_registers.complex_calc.z
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW data$imm0           ; .Users.alice.dev.minz-ts.examples.test_registers.process_array.data
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW len$imm0           ; .Users.alice.dev.minz-ts.examples.test_registers.process_array.len
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
