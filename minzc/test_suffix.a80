; MinZ generated code
; Generated: 2025-08-04 07:41:31


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_function_call_with_suffix.test_function
...test_function_call_with_suffix.test_function:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...test_function_call_with_suffix.test_function_param_input:
    LD HL, #0000   ; SMC parameter input (u8->u16)
    ; r3 = 0
    LD A, 0
    LD B, A         ; Store to physical register B
    ; r4 = r2 == r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 0
    LD A, 0
    LD D, A         ; Store to physical register D
    ; r-10 = 1
    LD A, 1
    LD E, A         ; Store to physical register E
    ; unknown op 22
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    LD A, (...test_function_call_with_suffix.test_function_param_input)
    LD H, A         ; Store to physical register H
    ; r7 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; r8 = r6 * r7
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; return r8
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_function_call_with_suffix.caller_function
...test_function_call_with_suffix.caller_function:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 42
    LD A, 42
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r4 = call test_function
    ; Call to test_function (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...test_function_call_with_suffix.test_function
    LD HL, 0       ; Assume success
    JR NC, .no_err_3
    INC HL         ; Error detected
.no_err_3:
    LD ($F000), HL    ; Virtual register 0 to memory
    ; Jump to error handler if CY flag set
    LD A, ($F000)     ; Virtual register 0 from memory
    OR A
    JP NZ, nil_coalescing_else_3
    ; r6 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; cmp r4, r6
    LD D, H
    LD E, L
    OR A      ; Clear carry
    SBC HL, DE
    ; unknown op 5
    LD A, ($F000)     ; Virtual register 0 from memory
    OR A
    JP Z, 
    ; unknown op 22
    ; jump nil_coalescing_end_4
    JP nil_coalescing_end_4
    ; nil_coalescing_else_3:
nil_coalescing_else_3:
    ; r7 = 99
    LD A, 99
    LD ($F00E), A     ; Virtual register 7 to memory
    ; unknown op 22
    LD HL, ($F00E)    ; Virtual register 7 from memory
    ; nil_coalescing_end_4:
nil_coalescing_end_4:
    ; store , r5
    LD ($F004), HL
    ; r8 = load result
    LD HL, ($F004)
    ; return r8
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
