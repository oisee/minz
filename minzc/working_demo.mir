; MinZ Intermediate Representation (MIR)
; Module: main

Function ...examples.working_demo.test_basic_math() -> u8
  @smc
  Locals:
    r1 = a: u8
    r3 = b: u8
    r5 = sum: u16
  Instructions:
      0: r2 = 10
      1: store , r2
      2: r4 = 20
      3: store , r4
      4: r6 = load a
      5: r7 = load b
      6: r8 = r6 + r7
      7: store , r8
      8: r9 = load sum
      9: r10 = 30
     10: r11 = r9 == r10
     11: jump_if_not r11, else_1
     12: r12 = 0
     13: return r12
     14: else_1:
     15: r13 = 1
     16: return r13

Function ...examples.working_demo.test_arrays() -> u8
  @smc
  Locals:
    r1 = arr: [5]u8
    r2 = ptr: *u8
  Instructions:
      0: LOAD_INDEX ; Load array element (u8)
      1: UNKNOWN_OP_65
      2: store , r6
      3: UNKNOWN_OP_66
      4: r9 = 3
      5: r10 = r8 == r9
      6: jump_if_not r10, else_3
      7: r11 = 0
      8: return r11
      9: else_3:
     10: r12 = 1
     11: return r12

Function ...examples.working_demo.test_structs() -> u8
  @smc
  Locals:
    r1 = p: u16
  Instructions:
      0: UNKNOWN_OP_61 ; Allocate struct Point
      1: r3 = 10
      2: STORE_FIELD ; Store to Point.x
      3: r4 = 20
      4: STORE_FIELD ; Store to Point.y
      5: store , r2
      6: r5 = load p
      7: LOAD_FIELD ; Load field x (offset 0)
      8: r7 = load p
      9: LOAD_FIELD ; Load field y (offset 1)
     10: r9 = r6 + r8
     11: r10 = 30
     12: r11 = r9 == r10
     13: jump_if_not r11, else_5
     14: r12 = 0
     15: return r12
     16: else_5:
     17: r13 = 1
     18: return r13

Function ...examples.working_demo.test_lambdas$add_0(x: u8, y: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_31 ; Load from anchor x$imm0
      1: UNKNOWN_OP_31 ; Load from anchor y$imm0
      2: return

Function ...examples.working_demo.test_lambdas() -> u8
  @smc
  Locals:
    r1 = result: u16
  Instructions:
      0: r4 = call add
      1: store , r4
      2: r5 = load result
      3: r6 = 40
      4: r7 = r5 == r6
      5: jump_if_not r7, else_7
      6: r8 = 0
      7: return r8
      8: else_7:
      9: r9 = 1
     10: return r9

Function ...examples.working_demo.test_loops() -> u8
  @smc
  Locals:
    r1 = sum: u8
  Instructions:
      0: r2 = 0
      1: store , r2
      2: r4 = 5
      3: r5 = r3 ; Initialize loop variable i
      4: for_loop_9:
      5: r6 = r5 < r4 ; Check i < end
      6: jump_if_not r6, for_end_10
      7: r7 = load sum
      8: r8 = load i
      9: r9 = r7 + r8
     10: store sum, r9
     11: r10 = 1
     12: r5 = r5 + r10 ; Increment i
     13: jump for_loop_9
     14: for_end_10:
     15: r11 = load sum
     16: r12 = 10
     17: r13 = r11 == r12
     18: jump_if_not r13, else_11
     19: r14 = 0
     20: return r14
     21: else_11:
     22: r15 = 1
     23: return r15

Function ...examples.working_demo.multiply(a: u8, b: u8) -> u16
  @smc
  Instructions:
      0: UNKNOWN_OP_31 ; Load from anchor a$imm0
      1: UNKNOWN_OP_31 ; Load from anchor b$imm0
      2: r5 = r3 * r4
      3: return r5

Function ...examples.working_demo.test_function_calls() -> u8
  @smc
  Locals:
    r1 = result: u16
  Instructions:
      0: r4 = call multiply
      1: store , r4
      2: r5 = load result
      3: r6 = 132
      4: r7 = r5 == r6
      5: jump_if_not r7, else_13
      6: r8 = 0
      7: return r8
      8: else_13:
      9: r9 = 1
     10: return r9

Function ...examples.working_demo.main() -> u8
  @smc
  Locals:
    r1 = errors: u8
  Instructions:
      0: r2 = 0
      1: store , r2
      2: r3 = load errors
      3: r4 = call test_basic_math
      4: r5 = r3 + r4
      5: store errors, r5
      6: r6 = load errors
      7: r7 = call test_arrays
      8: r8 = r6 + r7
      9: store errors, r8
     10: r9 = load errors
     11: r10 = call test_structs
     12: r11 = r9 + r10
     13: store errors, r11
     14: r12 = load errors
     15: r13 = call test_lambdas
     16: r14 = r12 + r13
     17: store errors, r14
     18: r15 = load errors
     19: r16 = call test_loops
     20: r17 = r15 + r16
     21: store errors, r17
     22: r18 = load errors
     23: r19 = call test_function_calls
     24: r20 = r18 + r19
     25: store errors, r20
     26: r21 = load errors
     27: return r21

