; MinZ generated code
; Generated: 2025-07-26 12:08:38


; Code section
    ORG $8000


; Function: ...examples.fibonacci.fibonacci
...examples.fibonacci.fibonacci:
; TRUE SMC function with immediate anchors
n$imm0:
    LD A, 0        ; n anchor (will be patched)
    LD ($F000), A
    LD A, (n$imm0)    ; Reuse from anchor
    LD ($F004), A
    ; r3 = 1
    LD A, 1
    LD ($F006), A
    ; r4 = r2 <= r3
    LD HL, ($F004)
    LD D, H
    LD E, L
    LD HL, ($F006)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F008), HL
    ; jump_if_not r4, else_1
    LD A, ($F008)
    OR A
    JP Z, else_1
    LD A, (n$imm0)    ; Reuse from anchor
    LD ($F00A), A
    ; return r5
    LD HL, ($F00A)
    LD (), HL    ; Direct return optimization
    RET
    ; else_1:
else_1:
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F00E), A
    ; store , r7
    LD HL, ($F00E)
    LD ($F00C), HL
    ; r9 = 1
    LD A, 1
    LD ($F012), A
    ; store , r9
    LD HL, ($F012)
    LD ($F010), HL
    ; r11 = 2
    LD A, 2
    LD ($F016), A
    ; store , r11
    LD HL, ($F016)
    LD ($F014), HL
    ; loop_3:
loop_3:
    ; r12 = load i
    LD HL, ($F000)
    LD ($F018), HL
    LD A, (n$imm0)    ; Reuse from anchor
    LD ($F01A), A
    ; r14 = r12 <= r13
    LD HL, ($F018)
    LD D, H
    LD E, L
    LD HL, ($F01A)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD ($F01C), HL
    ; jump_if_not r14, end_loop_4
    LD A, ($F01C)
    OR A
    JP Z, end_loop_4
    ; r16 = load a
    LD HL, ($F000)
    LD ($F020), HL
    ; r17 = load b
    LD HL, ($F000)
    LD ($F022), HL
    ; r18 = r16 + r17
    LD HL, ($F020)
    LD D, H
    LD E, L
    LD HL, ($F022)
    ADD HL, DE
    LD ($F024), HL
    ; store , r18
    LD HL, ($F024)
    LD ($F01E), HL
    ; r19 = load b
    LD HL, ($F000)
    LD ($F026), HL
    ; store a, r19
    LD HL, ($F026)
    LD ($F00C), HL
    ; r20 = load temp
    LD HL, ($F000)
    LD ($F028), HL
    ; store b, r20
    LD HL, ($F028)
    LD ($F010), HL
    ; INC (optimized from ADD 1)
    LD HL, ($F02A)
    INC HL
    LD ($F02E), HL
    ; store i, r23
    LD HL, ($F02E)
    LD ($F014), HL
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r24 = load b
    LD HL, ($F000)
    LD ($F030), HL
    ; return r24
    LD HL, ($F030)
    LD (), HL    ; Direct return optimization
    RET
    RET

; Function: ...examples.fibonacci.main
...examples.fibonacci.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; Optimized: return value directly stored to 
    CALL fibonacci
    LD ($F006), HL
    ; return
    POP DE
    POP BC
    RET

    END main
