; MinZ generated code
; Generated: 2025-07-27 08:45:00


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_simple_tsmc.factorial
test_simple_tsmc.factorial:
; TRUE SMC function with immediate anchors
n$immOP:
    LD A, 0        ; n anchor (will be patched)
n$imm0 EQU n$immOP+1
    ; Register 2 already in A
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; else_1:
else_1:
    LD A, (n$imm0)    ; Reuse from anchor
    LD E, A         ; Store to physical register E
    LD A, (n$imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r10 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to test_simple_tsmc.factorial
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (n$imm0), A        ; Patch n
    CALL test_simple_tsmc.factorial
    ; r11 = r6 * r10
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    EXX               ; Switch to shadow registers
    ; return r11
    EXX               ; Switch to shadow registers
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_simple_tsmc.main
test_simple_tsmc.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r3 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to test_simple_tsmc.factorial
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (n$imm0), A        ; Patch n
    CALL test_simple_tsmc.factorial
    EXX               ; Switch to shadow registers
    ; store , r3
    EXX               ; Switch to shadow registers
    LD ($F002), HL
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW n$imm0           ; test_simple_tsmc.factorial.n
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

    END main
