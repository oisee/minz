; MinZ generated code
; Generated: 2025-07-30 12:49:00


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.02_bit_structs_test.test_single_bit_fields
tests.02_bit_structs_test.test_single_bit_fields:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 181
    LD A, 181
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = load flags
    LD A, ($F002)
    LD C, A         ; Store to physical register C
    ; store , r4
    LD ($F006), HL
    ; r6 = load status
    LD HL, ($F006)
    ; Load bit field carry (offset 0, width 1)
    LD A, E
    AND 1
    LD ($F00E), A     ; Virtual register 7 to memory
    ; store , r7
    LD A, ($F00E)     ; Virtual register 7 from memory
    LD ($F00A), A
    ; r9 = load status
    LD HL, ($F006)
    ; Load bit field zero (offset 1, width 1)
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    SRL A
    AND 1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store , r10
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD ($F010), A
    ; r12 = load status
    LD HL, ($F006)
    ; Load bit field negative (offset 7, width 1)
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 1
    ; Register 13 already in A
    ; store , r13
    ; Register 13 already in A
    LD ($F016), A
    ; r14 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r15 = load status
    LD HL, ($F006)
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; Store bit field interrupt (offset 2, width 1)
    LD A, ($F01E)     ; Virtual register 15 from memory
    LD B, A        ; Save original value
    AND 251         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, B
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD ($F01E), A     ; Virtual register 15 to memory
    ; r16 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r17 = load status
    LD HL, ($F006)
    ; Store bit field decimal (offset 3, width 1)
    LD A, H
    LD B, A        ; Save original value
    AND 247         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, H
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD H, A         ; Store to physical register H
    ; r18 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r19 = load status
    LD HL, ($F006)
    ; Store bit field overflow (offset 6, width 1)
    LD A, B
    LD B, A        ; Save original value
    AND 191         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, B
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD B, A         ; Store to physical register B
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.02_bit_structs_test.test_multi_bit_fields
tests.02_bit_structs_test.test_multi_bit_fields:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r2
    LD A, L
    LD ($F002), A
    ; r4 = load packed
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; store , r4
    LD ($F006), HL
    ; r5 = 3
    LD A, 3
    LD B, A         ; Store to physical register B
    ; r6 = load color
    LD HL, ($F006)
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; Store bit field red (offset 0, width 2)
    LD A, ($F00C)     ; Virtual register 6 from memory
    LD B, A        ; Save original value
    AND 252         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, B
    AND 3         ; Mask to field width
    OR C           ; Combine with cleared original
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = 7
    LD A, 7
    ; Register 7 already in A
    ; r8 = load color
    LD HL, ($F006)
    LD ($F010), HL    ; Virtual register 8 to memory
    ; Store bit field green (offset 2, width 3)
    LD A, ($F010)     ; Virtual register 8 from memory
    LD B, A        ; Save original value
    AND 227         ; Clear field bits
    LD C, A        ; Save cleared value
    ; Register 7 already in A
    AND 7         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = 4
    LD A, 4
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r10 = load color
    LD HL, ($F006)
    LD ($F014), HL    ; Virtual register 10 to memory
    ; Store bit field blue (offset 5, width 3)
    LD A, ($F014)     ; Virtual register 10 from memory
    LD B, A        ; Save original value
    AND 31         ; Clear field bits
    LD C, A        ; Save cleared value
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    AND 7         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD ($F014), A     ; Virtual register 10 to memory
    ; r12 = load color
    LD HL, ($F006)
    ; Load bit field red (offset 0, width 2)
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    AND 3
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r13
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD ($F016), A
    ; r15 = load color
    LD HL, ($F006)
    ; Load bit field green (offset 2, width 3)
    LD A, E
    SRL A
    SRL A
    AND 7
    ; Register 16 already in A
    ; store , r16
    ; Register 16 already in A
    LD ($F01C), A
    ; r18 = load color
    LD HL, ($F006)
    ; Load bit field blue (offset 5, width 3)
    LD A, B
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 7
    LD B, A         ; Store to physical register B
    ; store , r19
    LD A, B
    LD ($F022), A
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.02_bit_structs_test.test_mixed_fields
tests.02_bit_structs_test.test_mixed_fields:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    ; Register 2 already in A
    ; store , r2
    ; Register 2 already in A
    LD ($F002), A
    ; r4 = load state_byte
    LD A, ($F002)
    LD ($F008), A     ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD ($F006), HL
    ; r5 = 3
    LD A, 3
    ; Register 5 already in A
    ; r6 = load game
    LD HL, ($F006)
    ; Store bit field lives (offset 0, width 3)
    ; Register 6 already in A
    LD B, A        ; Save original value
    AND 248         ; Clear field bits
    LD C, A        ; Save cleared value
    ; Register 5 already in A
    AND 7         ; Mask to field width
    OR C           ; Combine with cleared original
    ; Register 6 already in A
    ; r7 = 10
    LD A, 10
    LD B, A         ; Store to physical register B
    ; r8 = load game
    LD HL, ($F006)
    LD ($F010), HL    ; Virtual register 8 to memory
    ; Store bit field level (offset 3, width 4)
    LD A, ($F010)     ; Virtual register 8 from memory
    LD B, A        ; Save original value
    AND 135         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, B
    AND 15         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = 1
    LD A, 1
    LD ($F012), A     ; Virtual register 9 to memory
    ; r10 = load game
    LD HL, ($F006)
    ; Store bit field has_powerup (offset 7, width 1)
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD B, A        ; Save original value
    AND 127         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, ($F012)     ; Virtual register 9 from memory
    AND 1         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r11 = load game
    LD HL, ($F006)
    ; Load bit field lives (offset 0, width 3)
    LD A, C
    AND 7
    LD C, A         ; Store to physical register C
    ; r13 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r14 = r12 - r13
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; r15 = load game
    LD HL, ($F006)
    ; Store bit field lives (offset 0, width 3)
    LD A, H
    LD B, A        ; Save original value
    AND 248         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, ($F01C)     ; Virtual register 14 from memory
    AND 7         ; Mask to field width
    OR C           ; Combine with cleared original
    LD H, A         ; Store to physical register H
    ; r16 = load game
    LD HL, ($F006)
    ; Load bit field level (offset 3, width 4)
    LD A, H
    SRL A
    SRL A
    SRL A
    AND 15
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r18 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r19 = r17 + r18
    LD D, H
    LD E, L
    ADD HL, DE
    ; r20 = load game
    LD HL, ($F006)
    ; Store bit field level (offset 3, width 4)
    LD A, B
    LD B, A        ; Save original value
    AND 135         ; Clear field bits
    LD C, A        ; Save cleared value
    LD A, B
    AND 15         ; Mask to field width
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    SLA A          ; Shift to bit position
    OR C           ; Combine with cleared original
    LD B, A         ; Store to physical register B
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: tests.02_bit_structs_test.main
tests.02_bit_structs_test.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call test_single_bit_fields
    ; Call to test_single_bit_fields (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_single_bit_fields
    ; r2 = call test_multi_bit_fields
    ; Call to test_multi_bit_fields (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_multi_bit_fields
    ; r3 = call test_mixed_fields
    ; Call to test_mixed_fields (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL test_mixed_fields
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
