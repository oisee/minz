; MinZ generated code
; Generated: 2025-08-02 20:48:15


; Data section
    ORG $F000

...examples.zvdb_lut_simple.popcount_lut:
    DS 256
str_0:
    DB 18    ; Length
    DB "Popcount LUT Demo"
    DB 10
str_1:
    DB 19    ; Length
    DB "================="
    DB 10
    DB 10
str_2:
    DB 22    ; Length
    DB "Testing known values:"
    DB 10
str_3:
    DB 24    ; Length
    DB 10
    DB "LUT Contents (sample):"
    DB 10
str_4:
    DB 23    ; Length
    DB "======================"
    DB 10
str_5:
    DB 25    ; Length
    DB 10
    DB "Vector Similarity Test:"
    DB 10
str_6:
    DB 23    ; Length
    DB "======================"
    DB 10
str_7:
    DB 18    ; Length
    DB "Hamming distance: "
str_8:
    DB 18    ; Length
    DB "Similarity score: "
str_9:
    DB 23    ; Length
    DB "ZVDB with Popcount LUT"
    DB 10
str_10:
    DB 24    ; Length
    DB "======================"
    DB 10
    DB 10
str_11:
    DB 25    ; Length
    DB "Building lookup table..."
    DB 10
str_12:
    DB 26    ; Length
    DB "LUT ready (256 entries)!"
    DB 10
    DB 10
str_13:
    DB 30    ; Length
    DB 10
    DB 226
    DB 156
    DB 133
    DB " Performance Analysis:"
    DB 10
str_14:
    DB 35    ; Length
    DB "   "
    DB 226
    DB 128
    DB 162
    DB " LUT lookup: ~15 T-states"
    DB 10
str_15:
    DB 33    ; Length
    DB "   "
    DB 226
    DB 128
    DB 162
    DB " Bit loop: ~50 T-states"
    DB 10
str_16:
    DB 32    ; Length
    DB "   "
    DB 226
    DB 128
    DB 162
    DB " Speedup: 3.3x faster!"
    DB 10
str_17:
    DB 29    ; Length
    DB "   "
    DB 226
    DB 128
    DB 162
    DB " Memory: 256 bytes"
    DB 10
    DB 10
str_18:
    DB 32    ; Length
    DB "Perfect for ZVDB vector search!"
    DB 10

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.zvdb_lut_simple.init_lut_demo
...examples.zvdb_lut_simple.init_lut_demo:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 0
    LD A, 0
    ; Register 1 already in A
    ; r2 = load popcount_lut
    LD HL, ($F000)
    ; r3 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F008), HL    ; Virtual register 4 to memory
    ; Store to array[index] (u8)
    LD HL, ($F008)    ; Virtual register 4 from memory
    PUSH HL
    ; Register 1 already in A
    POP HL
    LD (HL), A
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; r6 = load popcount_lut
    LD HL, ($F000)
    ; r7 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD D, H
    LD E, L
    ; Store to array[index] (u8)
    LD H, D
    LD L, E
    PUSH HL
    LD A, D
    POP HL
    LD (HL), A
    ; r9 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r10 = load popcount_lut
    LD HL, ($F000)
    ; r11 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD B, H
    LD C, L
    ; Store to array[index] (u8)
    LD H, B
    LD L, C
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    POP HL
    LD (HL), A
    ; r13 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; r14 = load popcount_lut
    LD HL, ($F000)
    ; r15 = 7
    LD A, 7
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F020), HL    ; Virtual register 16 to memory
    ; Store to array[index] (u8)
    LD HL, ($F020)    ; Virtual register 16 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r17 = 4
    LD A, 4
    LD L, A         ; Store to HL (low byte)
    ; r18 = load popcount_lut
    LD HL, ($F000)
    ; r19 = 15
    LD A, 15
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F028), HL    ; Virtual register 20 to memory
    ; Store to array[index] (u8)
    LD HL, ($F028)    ; Virtual register 20 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r21 = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; r22 = load popcount_lut
    LD HL, ($F000)
    ; r23 = 31
    LD A, 31
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F030), HL    ; Virtual register 24 to memory
    ; Store to array[index] (u8)
    LD HL, ($F030)    ; Virtual register 24 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r25 = 6
    LD A, 6
    LD L, A         ; Store to HL (low byte)
    ; r26 = load popcount_lut
    LD HL, ($F000)
    ; r27 = 63
    LD A, 63
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F038), HL    ; Virtual register 28 to memory
    ; Store to array[index] (u8)
    LD HL, ($F038)    ; Virtual register 28 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r29 = 7
    LD A, 7
    LD L, A         ; Store to HL (low byte)
    ; r30 = load popcount_lut
    LD HL, ($F000)
    ; r31 = 127
    LD A, 127
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F040), HL    ; Virtual register 32 to memory
    ; Store to array[index] (u8)
    LD HL, ($F040)    ; Virtual register 32 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r33 = 8
    LD A, 8
    LD L, A         ; Store to HL (low byte)
    ; r34 = load popcount_lut
    LD HL, ($F000)
    ; r35 = 255
    LD A, 255
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F048), HL    ; Virtual register 36 to memory
    ; Store to array[index] (u8)
    LD HL, ($F048)    ; Virtual register 36 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r37 = 4
    LD A, 4
    LD L, A         ; Store to HL (low byte)
    ; r38 = load popcount_lut
    LD HL, ($F000)
    ; r39 = 85
    LD A, 85
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F050), HL    ; Virtual register 40 to memory
    ; Store to array[index] (u8)
    LD HL, ($F050)    ; Virtual register 40 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r41 = 4
    LD A, 4
    LD L, A         ; Store to HL (low byte)
    ; r42 = load popcount_lut
    LD HL, ($F000)
    ; r43 = 170
    LD A, 170
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F058), HL    ; Virtual register 44 to memory
    ; Store to array[index] (u8)
    LD HL, ($F058)    ; Virtual register 44 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r45 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r46 = load popcount_lut
    LD HL, ($F000)
    ; r47 = 128
    LD A, 128
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F060), HL    ; Virtual register 48 to memory
    ; Store to array[index] (u8)
    LD HL, ($F060)    ; Virtual register 48 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r49 = 4
    LD A, 4
    LD L, A         ; Store to HL (low byte)
    ; r50 = load popcount_lut
    LD HL, ($F000)
    ; r51 = 240
    LD A, 240
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F068), HL    ; Virtual register 52 to memory
    ; Store to array[index] (u8)
    LD HL, ($F068)    ; Virtual register 52 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r53 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; r54 = load popcount_lut
    LD HL, ($F000)
    ; r55 = 14
    LD A, 14
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 56 already in HL
    ; Store to array[index] (u8)
    ; Register 56 already in HL
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.zvdb_lut_simple.build_full_lut
...examples.zvdb_lut_simple.build_full_lut:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; r2 = 256
    LD HL, 256
    ; Initialize loop variable i
    ; Register 1 already in HL
    ; for_loop_1:
for_loop_1:
    ; Check i < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, for_end_2
    LD A, H
    OR A
    JP Z, for_end_2
    ; r6 = load i
    LD HL, ($F000)
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; store , r6
    LD A, ($F00C)     ; Virtual register 6 from memory
    LD ($F00A), A
    ; r8 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r8
    LD A, L
    LD ($F00E), A
    ; r10 = load val
    LD A, ($F00A)
    LD H, A         ; Store to physical register H
    ; store , r10
    LD A, H
    LD ($F012), A
    ; r11 = 0
    LD A, 0
    LD ($F016), A     ; Virtual register 11 to memory
    ; r12 = 8
    LD A, 8
    LD H, A         ; Store to physical register H
    ; Initialize loop variable bit
    LD HL, ($F016)    ; Virtual register 11 from memory
    ; for_loop_3:
for_loop_3:
    ; Check bit < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; jump_if_not r14, for_end_4
    LD A, ($F01C)     ; Virtual register 14 from memory
    OR A
    JP Z, for_end_4
    ; r15 = load temp
    LD A, ($F012)
    LD H, A         ; Store to physical register H
    ; r16 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r17 = r15 & r16
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    LD ($F022), HL    ; Virtual register 17 to memory
    ; r18 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r19 = r17 != r18
    LD HL, ($F022)    ; Virtual register 17 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r19, else_5
    LD A, L
    OR A
    JP Z, else_5
    ; r20 = load count
    LD A, ($F00E)
    LD ($F028), A     ; Virtual register 20 to memory
    ; r21 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r22 = r20 + r21
    LD HL, ($F028)    ; Virtual register 20 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store count, r22
    LD A, L
    LD ($F00E), A
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; r23 = load temp
    LD A, ($F012)
    LD H, A         ; Store to physical register H
    ; r24 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r25 = r23 >> r24
    ; Shift right
    LD A, H
    LD B, A       ; B = value to shift
    LD A, L
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shr_done_6
    LD B, C       ; B = counter
.shr_loop_6:
    DEC B
    JP M, .shr_done_6
    SRL A         ; Shift right, 0 into bit 7
    JR .shr_loop_6
.shr_done_6:
    LD L, A
    LD H, 0
    LD ($F032), HL    ; Virtual register 25 to memory
    ; store temp, r25
    LD A, ($F032)     ; Virtual register 25 from memory
    LD ($F012), A
    ; r26 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; Increment bit
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_3
    JP for_loop_3
    ; for_end_4:
for_end_4:
    ; r27 = load count
    LD A, ($F00E)
    LD L, A         ; Store to physical register L
    ; r28 = load popcount_lut
    LD HL, ($F000)
    ; Register 28 already in HL
    ; r29 = load i
    LD HL, ($F000)
    ; Calculate array element address
    ; Register 28 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F03C), HL    ; Virtual register 30 to memory
    ; Store to array[index] (u8)
    LD HL, ($F03C)    ; Virtual register 30 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r31 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Increment i
    LD D, H
    LD E, L
    ; Register 31 already in HL
    ADD HL, DE
    ; jump for_loop_1
    JP for_loop_1
    ; for_end_2:
for_end_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.zvdb_lut_simple.popcount_lut_lookup
...examples.zvdb_lut_simple.popcount_lut_lookup:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = load popcount_lut
    LD HL, ($F000)
...examples.zvdb_lut_simple.popcount_lut_lookup_param_val:
    LD HL, #0000   ; SMC parameter val (u8->u16)
    ; Register 3 already in HL
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.zvdb_lut_simple.hamming_with_lut
...examples.zvdb_lut_simple.hamming_with_lut:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r5 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r5
    LD ($F008), HL
    ; r6 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
...examples.zvdb_lut_simple.hamming_with_lut_param_bytes:
    LD BC, #0000   ; SMC parameter bytes (u8->u16)
    LD H, B
    LD L, C        ; Move to HL for storage
    ; Initialize loop variable i
    ; for_loop_7:
for_loop_7:
    ; Check i < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L8
    LD HL, 0
    JP .L9
.L8:
    LD HL, 1
.L9:
    ; jump_if_not r9, for_end_8
    LD A, L
    OR A
    JP Z, for_end_8
; TSMC reference parameter vec1
vec1$immOP:
    LD HL, 0000      ; TSMC ref address for vec1
vec1$imm0 EQU vec1$immOP+1
    ; r12 = load i
    LD HL, ($F000)
    ; Register 12 already in HL
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
; TSMC reference parameter vec2
vec2$immOP:
    LD HL, 0000      ; TSMC ref address for vec2
vec2$imm0 EQU vec2$immOP+1
    ; r15 = load i
    LD HL, ($F000)
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F01E)     ; Virtual register 15 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r17 = r13 ^ r16
    LD D, H
    LD E, L
    LD A, L
    XOR E
    LD L, A
    LD A, H
    XOR D
    LD H, A
    LD ($F022), HL    ; Virtual register 17 to memory
    ; store , r17
    LD A, ($F022)     ; Virtual register 17 from memory
    LD ($F014), A
    ; r19 = load xor_val
    LD A, ($F014)
    LD L, A         ; Store to physical register L
    ; r20 = call popcount_lut_lookup
    ; Call to popcount_lut_lookup (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.popcount_lut_lookup
    LD ($F028), HL    ; Virtual register 20 to memory
    ; store , r20
    LD A, ($F028)     ; Virtual register 20 from memory
    LD ($F024), A
    ; r21 = load distance
    LD HL, ($F008)
    ; r22 = load bits
    LD A, ($F024)
    LD L, A         ; Store to HL (low byte)
    ; r23 = r21 + r22
    LD D, H
    LD E, L
    ; Register 22 already in HL
    ADD HL, DE
    ; store distance, r23
    LD ($F008), HL
    ; r24 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_7
    JP for_loop_7
    ; for_end_8:
for_end_8:
    ; r25 = load distance
    LD HL, ($F008)
    ; Register 25 already in HL
    ; return r25
    ; Register 25 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.zvdb_lut_simple.demo_lut
...examples.zvdb_lut_simple.demo_lut:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = string(str_0)
    LD HL, str_0
    ; Print "Popcount LUT Demo
" (18 chars via loop)
    CALL print_string
    ; r2 = string(str_1)
    LD HL, str_1
    ; Print "=================

" (19 chars via loop)
    CALL print_string
    ; r3 = string(str_2)
    LD HL, str_2
    LD ($F006), HL    ; Virtual register 3 to memory
    ; Print "Testing known values:
" (22 chars via loop)
    LD HL, ($F006)    ; Virtual register 3 from memory
    CALL print_string
    ; r4 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r5 = call popcount_lut_lookup
    ; Call to popcount_lut_lookup (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.popcount_lut_lookup
    ; print_u8(r5)
    LD A, L
    CALL print_u8_decimal
    ; r6 = 15
    LD A, 15
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = call popcount_lut_lookup
    ; Call to popcount_lut_lookup (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.popcount_lut_lookup
    ; print_u8(r7)
    LD A, H
    CALL print_u8_decimal
    ; r8 = 85
    LD A, 85
    LD L, A         ; Store to physical register L
    ; r9 = call popcount_lut_lookup
    ; Call to popcount_lut_lookup (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.popcount_lut_lookup
    LD ($F012), HL    ; Virtual register 9 to memory
    ; print_u8(r9)
    LD A, ($F012)     ; Virtual register 9 from memory
    CALL print_u8_decimal
    ; r10 = 170
    LD A, 170
    LD H, A         ; Store to physical register H
    ; r11 = call popcount_lut_lookup
    ; Call to popcount_lut_lookup (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.popcount_lut_lookup
    ; print_u8(r11)
    LD A, L
    CALL print_u8_decimal
    ; r12 = 255
    LD A, 255
    LD L, A         ; Store to HL (low byte)
    ; r13 = call popcount_lut_lookup
    ; Call to popcount_lut_lookup (args: 1)
    ; Stack-based parameter passing
    ; Register 12 already in HL
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.popcount_lut_lookup
    ; print_u8(r13)
    LD A, H
    CALL print_u8_decimal
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.zvdb_lut_simple.show_lut
...examples.zvdb_lut_simple.show_lut:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = string(str_3)
    LD HL, str_3
    ; Print "
LUT Contents (sample):
" (24 chars via loop)
    CALL print_string
    ; r2 = string(str_4)
    LD HL, str_4
    LD ($F004), HL    ; Virtual register 2 to memory
    ; Print "======================
" (23 chars via loop)
    LD HL, ($F004)    ; Virtual register 2 from memory
    CALL print_string
    ; r3 = load popcount_lut
    LD HL, ($F000)
    ; r4 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F00A), A     ; Virtual register 5 to memory
    ; print_u8(r5)
    LD A, ($F00A)     ; Virtual register 5 from memory
    CALL print_u8_decimal
    ; r6 = load popcount_lut
    LD HL, ($F000)
    ; r7 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F010), A     ; Virtual register 8 to memory
    ; print_u8(r8)
    LD A, ($F010)     ; Virtual register 8 from memory
    CALL print_u8_decimal
    ; r9 = load popcount_lut
    LD HL, ($F000)
    ; r10 = 3
    LD A, 3
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F016), A     ; Virtual register 11 to memory
    ; print_u8(r11)
    LD A, ($F016)     ; Virtual register 11 from memory
    CALL print_u8_decimal
    ; r12 = load popcount_lut
    LD HL, ($F000)
    ; r13 = 7
    LD A, 7
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F01C), A     ; Virtual register 14 to memory
    ; print_u8(r14)
    LD A, ($F01C)     ; Virtual register 14 from memory
    CALL print_u8_decimal
    ; r15 = load popcount_lut
    LD HL, ($F000)
    ; r16 = 15
    LD A, 15
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F022), A     ; Virtual register 17 to memory
    ; print_u8(r17)
    LD A, ($F022)     ; Virtual register 17 from memory
    CALL print_u8_decimal
    ; r18 = load popcount_lut
    LD HL, ($F000)
    ; r19 = 31
    LD A, 31
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F028), A     ; Virtual register 20 to memory
    ; print_u8(r20)
    LD A, ($F028)     ; Virtual register 20 from memory
    CALL print_u8_decimal
    ; r21 = load popcount_lut
    LD HL, ($F000)
    ; r22 = 63
    LD A, 63
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F02E), A     ; Virtual register 23 to memory
    ; print_u8(r23)
    LD A, ($F02E)     ; Virtual register 23 from memory
    CALL print_u8_decimal
    ; r24 = load popcount_lut
    LD HL, ($F000)
    ; r25 = 127
    LD A, 127
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; print_u8(r26)
    LD A, L
    CALL print_u8_decimal
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.zvdb_lut_simple.test_vectors
...examples.zvdb_lut_simple.test_vectors:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = string(str_5)
    LD HL, str_5
    ; Print "
Vector Similarity Test:
" (25 chars via loop)
    CALL print_string
    ; r2 = string(str_6)
    LD HL, str_6
    ; Print "======================
" (23 chars via loop)
    CALL print_string
    ; r5 = 0
    LD A, 0
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = 32
    LD A, 32
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    LD HL, ($F00A)    ; Virtual register 5 from memory
    ; for_loop_9:
for_loop_9:
    ; Check i < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L10
    LD HL, 0
    JP .L11
.L10:
    LD HL, 1
.L11:
    LD ($F010), HL    ; Virtual register 8 to memory
    ; jump_if_not r8, for_end_10
    LD A, ($F010)     ; Virtual register 8 from memory
    OR A
    JP Z, for_end_10
    ; r9 = load i
    LD HL, ($F000)
    ; r10 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r11 = r9 & r10
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    LD ($F016), HL    ; Virtual register 11 to memory
    ; r12 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r13 = r11 == r12
    LD HL, ($F016)    ; Virtual register 11 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L12
    LD HL, 0
    JP .L13
.L12:
    LD HL, 1
.L13:
    ; jump_if_not r13, else_11
    LD A, L
    OR A
    JP Z, else_11
    ; r14 = 85
    LD A, 85
    LD L, A         ; Store to HL (low byte)
    ; r15 = load vec1
    LD HL, ($F006)
    ; r16 = load i
    LD HL, ($F000)
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F022), HL    ; Virtual register 17 to memory
    ; Store to array[index] (u8)
    LD HL, ($F022)    ; Virtual register 17 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r18 = 170
    LD A, 170
    LD L, A         ; Store to HL (low byte)
    ; r19 = load vec2
    LD HL, ($F008)
    ; r20 = load i
    LD HL, ($F000)
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F02A), HL    ; Virtual register 21 to memory
    ; Store to array[index] (u8)
    LD HL, ($F02A)    ; Virtual register 21 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; jump end_if_12
    JP end_if_12
    ; else_11:
else_11:
    ; r22 = 255
    LD A, 255
    LD L, A         ; Store to HL (low byte)
    ; r23 = load vec1
    LD HL, ($F006)
    ; r24 = load i
    LD HL, ($F000)
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F032), HL    ; Virtual register 25 to memory
    ; Store to array[index] (u8)
    LD HL, ($F032)    ; Virtual register 25 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r26 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; r27 = load vec2
    LD HL, ($F008)
    ; r28 = load i
    LD HL, ($F000)
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; Store to array[index] (u8)
    LD HL, ($F03A)    ; Virtual register 29 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; end_if_12:
end_if_12:
    ; r30 = 1
    LD A, 1
    LD ($F03C), A     ; Virtual register 30 to memory
    ; Increment i
    LD D, H
    LD E, L
    LD HL, ($F03C)    ; Virtual register 30 from memory
    ADD HL, DE
    ; jump for_loop_9
    JP for_loop_9
    ; for_end_10:
for_end_10:
    ; r32 = load vec1
    LD HL, ($F006)
    ; r33 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F044), A     ; Virtual register 34 to memory
    ; r35 = &r34
    ; Address-of operation for register r34
    LD HL, $F044  ; Variable address
    ; r36 = load vec2
    LD HL, ($F008)
    ; r37 = 0
    LD A, 0
    LD ($F04A), A     ; Virtual register 37 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F04A)     ; Virtual register 37 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r39 = &r38
    ; Address-of operation for register r38
    LD HL, $F04C  ; Variable address
    ; r40 = 32
    LD A, 32
    LD ($F050), A     ; Virtual register 40 to memory
    ; r41 = call hamming_with_lut
    ; Call to hamming_with_lut (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F050)    ; Virtual register 40 from memory
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.hamming_with_lut
    ; store , r41
    LD ($F03E), HL
    ; r42 = string(str_7)
    LD HL, str_7
    ; Register 42 already in HL
    ; Print "Hamming distance: " (18 chars via loop)
    ; Register 42 already in HL
    CALL print_string
    ; Direct print " bits
" (6 chars)
    ; Direct print " bits
" (6 chars)
    LD A, 32
    RST 16             ; Print character
    LD A, 98
    RST 16             ; Print character
    LD A, 105
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 115
    RST 16             ; Print character
    LD A, 10
    RST 16             ; Print character
    ; r44 = 256
    LD HL, 256
    LD ($F058), HL    ; Virtual register 44 to memory
    ; r45 = load dist
    LD HL, ($F03E)
    ; Register 45 already in HL
    ; r46 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r47 = r45 << r46
    ; 16-bit shift left
    ; Register 45 already in HL
    LD A, H
    LD B, A       ; B = shift count
    OR A
    JR Z, .shl16_done_13
.shl16_loop_13:
    ADD HL, HL    ; Shift left by 1
    DJNZ .shl16_loop_13
.shl16_done_13:
    ; Register 47 already in HL
    ; r48 = r44 - r47
    LD HL, ($F058)    ; Virtual register 44 from memory
    LD D, H
    LD E, L
    ; Register 47 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; Register 48 already in HL
    ; store , r48
    ; Register 48 already in HL
    LD ($F056), HL
    ; r49 = string(str_8)
    LD HL, str_8
    ; Print "Similarity score: " (18 chars via loop)
    CALL print_string
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.zvdb_lut_simple.main
...examples.zvdb_lut_simple.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = string(str_9)
    LD HL, str_9
    LD ($F002), HL    ; Virtual register 1 to memory
    ; Print "ZVDB with Popcount LUT
" (23 chars via loop)
    LD HL, ($F002)    ; Virtual register 1 from memory
    CALL print_string
    ; r2 = string(str_10)
    LD HL, str_10
    ; Print "======================

" (24 chars via loop)
    CALL print_string
    ; r3 = string(str_11)
    LD HL, str_11
    ; Print "Building lookup table...
" (25 chars via loop)
    CALL print_string
    ; r4 = call build_full_lut
    ; Call to build_full_lut (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.build_full_lut
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = string(str_12)
    LD HL, str_12
    ; Print "LUT ready (256 entries)!

" (26 chars via loop)
    CALL print_string
    ; r6 = call demo_lut
    ; Call to demo_lut (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.demo_lut
    ; r7 = call show_lut
    ; Call to show_lut (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.show_lut
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = call test_vectors
    ; Call to test_vectors (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...examples.zvdb_lut_simple.test_vectors
    ; r9 = string(str_13)
    LD HL, str_13
    ; Print "
â Performance Analysis:
" (30 chars via loop)
    CALL print_string
    ; r10 = string(str_14)
    LD HL, str_14
    LD ($F014), HL    ; Virtual register 10 to memory
    ; Print "   â¢ LUT lookup: ~15 T-states
" (35 chars via loop)
    LD HL, ($F014)    ; Virtual register 10 from memory
    CALL print_string
    ; r11 = string(str_15)
    LD HL, str_15
    ; Print "   â¢ Bit loop: ~50 T-states
" (33 chars via loop)
    CALL print_string
    ; r12 = string(str_16)
    LD HL, str_16
    ; Print "   â¢ Speedup: 3.3x faster!
" (32 chars via loop)
    CALL print_string
    ; r13 = string(str_17)
    LD HL, str_17
    ; Register 13 already in HL
    ; Print "   â¢ Memory: 256 bytes

" (29 chars via loop)
    ; Register 13 already in HL
    CALL print_string
    ; r14 = string(str_18)
    LD HL, str_18
    ; Print "Perfect for ZVDB vector search!
" (32 chars via loop)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
