; MinZ Intermediate Representation (MIR)
; Module: main

Function simple_tail_test.countdown$u8(n: u8) -> u8
  @smc
  @recursive
  Instructions:
      0: TRUE_SMC_LOAD ; Load from anchor n$imm0
      1: simple_tail_test.countdown$u8_tail_loop: ; Tail recursion loop start
      2: TEST
      3: jump_if_not r4, else_1
      4: r5 = 0
      5: return r5
      6: else_1:
      7: TRUE_SMC_LOAD ; Load from anchor n$imm0
      8: TRUE_SMC_LOAD ; Load from anchor n$imm0
      9: jump simple_tail_test.countdown$u8_tail_loop ; Tail recursion optimized to loop

Function simple_tail_test.main() -> void
  @smc
  @recursive
  Locals:
    r1 = result: u16
  Instructions:
      0: TRUE_SMC_LOAD ; Inlined: Load from anchor n$imm0
      1: simple_tail_test.countdown$u8_tail_loop: ; Inlined: Tail recursion loop start
      2: TEST ; Inlined from simple_tail_test.countdown$u8
      3: jump_if_not r2, else_1 ; Inlined from simple_tail_test.countdown$u8
      4: r4 = r3 ; Inlined return value
      5: else_1: ; Inlined from simple_tail_test.countdown$u8
      6: TRUE_SMC_LOAD ; Inlined: Load from anchor n$imm0
      7: TRUE_SMC_LOAD ; Inlined: Load from anchor n$imm0
      8: jump simple_tail_test.countdown$u8_tail_loop ; Inlined: Tail recursion optimized to loop

