; MinZ generated code
; Generated: 2025-08-06 21:11:44


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: iter_lambda_lambda_test_demo.main_0
iter_lambda_lambda_test_demo.main_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = r0 << r0
    ; Shift left
    LD A, ($F000)     ; Virtual register 0 from memory
    LD B, A       ; B = value to shift
    LD A, ($F000)     ; Virtual register 0 from memory
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, iter_lambda_lambda_test_demo_main_0_shl_done_0
    LD B, C       ; B = counter
iter_lambda_lambda_test_demo_main_0_shl_loop_0:
    DEC B
    JP M, iter_lambda_lambda_test_demo_main_0_shl_done_0
    SLA A         ; Shift left, 0 into bit 0
    JR iter_lambda_lambda_test_demo_main_0_shl_loop_0
iter_lambda_lambda_test_demo_main_0_shl_done_0:
    LD L, A
    XOR H, H    ; Optimized: was LD H, 0
    ; Return lambda result
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: iter_lambda_lambda_test_demo.main_1
iter_lambda_lambda_test_demo.main_1:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; r2 = r0 > r1
    LD HL, ($F000)    ; Virtual register 0 from memory
    LD E, B        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, iter_lambda_lambda_test_demo_main_1_gt_check_zero_1
    LD HL, 0       ; False (negative)
    JP iter_lambda_lambda_test_demo_main_1_gt_done_1
iter_lambda_lambda_test_demo_main_1_gt_check_zero_1:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, iter_lambda_lambda_test_demo_main_1_gt_false_1
    LD HL, 1       ; True (positive and non-zero)
    JP iter_lambda_lambda_test_demo_main_1_gt_done_1
iter_lambda_lambda_test_demo_main_1_gt_false_1:
    LD HL, 0       ; False (zero)
iter_lambda_lambda_test_demo_main_1_gt_done_1:
    ; Return lambda result
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: iter_lambda_lambda_test_demo.main_2
iter_lambda_lambda_test_demo.main_2:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F000)    ; Virtual register 0 from memory
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; Return lambda result
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: lambda_test_demo.main
lambda_test_demo.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; Pointer to array start
    ; Could optimize: LD H,D / LD L,E
    ; Could optimize: LD H,D / LD L,E
    ; Could optimize: LD H,D / LD L,E
    ; Could optimize: LD H,D / LD L,E
    ; Could optimize: LD H,D / LD L,E
    LD H, D
    LD L, E
    LD ($F008), HL    ; Virtual register 4 to memory
    ; Load element via pointer
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Inlined return value
    ; Inlined return value
    ; Register 3 already in HL
    ; Skip if filter predicate is false
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, lambda_test_demo_main_filter_continue_2   ; Test for zero
    ; Inlined: Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F000)    ; Virtual register 0 from memory
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; filter_continue_2:
lambda_test_demo_main_filter_continue_2:
    ; Advance to next element
    LD HL, ($F008)    ; Virtual register 4 from memory
    INC HL
    LD ($F008), HL    ; Virtual register 4 to memory
    ; DJNZ - decrement and loop
    LD A, L
    LD B, A
    DJNZ djnz_loop_1
    LD A, B
    LD L, A         ; Store to HL (low byte)
    ; r9 = 42
    LD A, 42
    LD L, A         ; Store to HL (low byte)
    ; return r9
    ; Register 9 already in HL
    POP DE
    POP BC
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main


; Assembly peephole optimization: 7 patterns applied