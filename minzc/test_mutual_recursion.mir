; MinZ Intermediate Representation (MIR)
; Module: main

Function test_mutual_recursion.factorial_direct(n: u8) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_1
      4: r5 = 1
      5: return r5
      6: else_1:
      7: 29 ; Load from anchor n$imm0
      8: 29 ; Load from anchor n$imm0
      9: r10 = call factorial_direct
     10: r11 = r6 * r10
     11: return r11

Function test_mutual_recursion.is_even_mutual(n: u8) -> bool
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_3
      4: r5 = 1
      5: return r5
      6: else_3:
      7: 12
      8: r9 = call is_odd_mutual
      9: return r9

Function test_mutual_recursion.is_odd_mutual(n: u8) -> bool
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_5
      4: r5 = r5 ^ r5 ; XOR A,A (optimized from LD A,0)
      5: return r5
      6: else_5:
      7: 12
      8: r9 = call is_even_mutual
      9: return r9

Function test_mutual_recursion.func_a(n: u8) -> u16
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_7
      4: r5 = 1
      5: return r5
      6: else_7:
      7: 12
      8: r9 = call func_b
      9: 39 ; INC (optimized from ADD 1)
     10: return r11

Function test_mutual_recursion.func_b(n: u8) -> u16
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_9
      4: r5 = 2
      5: return r5
      6: else_9:
      7: 12
      8: r9 = call func_c
      9: r10 = 2
     10: r11 = r9 + r10
     11: return r11

Function test_mutual_recursion.func_c(n: u8) -> u16
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_11
      4: r5 = 3
      5: return r5
      6: else_11:
      7: 12
      8: r9 = call func_a
      9: r10 = 3
     10: r11 = r9 + r10
     11: return r11

Function test_mutual_recursion.deep_a(n: u8) -> u8
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_13
      4: r5 = 1
      5: return r5
      6: else_13:
      7: 12
      8: r9 = call deep_b
      9: return r9

Function test_mutual_recursion.deep_b(n: u8) -> u8
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_15
      4: r5 = 2
      5: return r5
      6: else_15:
      7: 12
      8: r9 = call deep_c
      9: return r9

Function test_mutual_recursion.deep_c(n: u8) -> u8
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_17
      4: r5 = 3
      5: return r5
      6: else_17:
      7: 12
      8: r9 = call deep_d
      9: return r9

Function test_mutual_recursion.deep_d(n: u8) -> u8
  @recursive
  Instructions:
      0: 12
      1: r3 = r3 ^ r3 ; XOR A,A (optimized from LD A,0)
      2: r4 = r2 == r3
      3: jump_if_not r4, else_19
      4: r5 = 4
      5: return r5
      6: else_19:
      7: 12
      8: r9 = call deep_a
      9: return r9

Function test_mutual_recursion.simple_add(a: u8, b: u8) -> u8
  Instructions:
      0: 12
      1: 12
      2: r5 = r3 + r4
      3: return r5

Function test_mutual_recursion.chain_caller(n: u8) -> u8
  Instructions:
      0: 12
      1: r4 = call simple_add
      2: return r4

Function test_mutual_recursion.mixed_recursive(n: u8) -> u16
  @smc
  @recursive
  Instructions:
      0: 29 ; Load from anchor n$imm0
      1: r3 = 1
      2: r4 = r2 <= r3
      3: jump_if_not r4, else_21
      4: 29 ; Load from anchor n$imm0
      5: r7 = call simple_add
      6: return r7
      7: else_21:
      8: 29 ; Load from anchor n$imm0
      9: r9 = call is_even_mutual
     10: 29 ; Load from anchor n$imm0
     11: r13 = call mixed_recursive
     12: r14 = r9 + r13
     13: return r14

Function test_mutual_recursion.main() -> void
  @recursive
  Locals:
    r1 = direct: u16
    r4 = mutual1: bool
    r7 = mutual2: bool
    r10 = indirect: u16
    r13 = deep_indirect: u8
    r16 = mixed: u16
    r19 = simple: u8
  Instructions:
      0: r3 = call factorial_direct
      1: store , r3
      2: r6 = call is_even_mutual
      3: store , r6
      4: r9 = call is_odd_mutual
      5: store , r9
      6: r12 = call func_a
      7: store , r12
      8: r15 = call deep_a
      9: store , r15
     10: r18 = call mixed_recursive
     11: store , r18
     12: r22 = call simple_add
     13: store , r22
     14: return

