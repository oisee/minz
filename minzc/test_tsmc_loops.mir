; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   i: u16

Function ...examples.tsmc_loops.sum_array_tsmc(arr: *u8, count: u16) -> u16
  @smc
  Locals:
    r3 = sum: u16
    r5 = i: u16
  Instructions:
      0: r4 = r4 ^ r4 ; XOR A,A (optimized from LD A,0)
      1: store , r4
      2: r6 = r6 ^ r6 ; XOR A,A (optimized from LD A,0)
      3: store , r6
      4: loop_1:
      5: r7 = load i
      6: 30 ; Load from anchor count$imm0
      7: r9 = r7 < r8
      8: jump_if_not r9, end_loop_2
      9: r10 = load sum
     10: 30 ; Load from anchor arr$imm0
     11: 63
     12: r13 = r10 + r12
     13: store sum, r13
     14: 30 ; Load from anchor arr$imm0
     15: 29 ; Update TSMC reference arr
     16: 43 ; INC (optimized from ADD 1)
     17: store i, r19
     18: jump loop_1
     19: end_loop_2:
     20: r20 = load sum
     21: return r20

Function ...examples.tsmc_loops.find_max_tsmc(arr: *u8, count: u16) -> u8
  @smc
  Locals:
    r7 = max: u8
    r13 = i: u16
  Instructions:
      0: 30 ; Load from anchor count$imm0
      1: r4 = r4 ^ r4 ; XOR A,A (optimized from LD A,0)
      2: r5 = r3 == r4
      3: jump_if_not r5, else_3
      4: r6 = r6 ^ r6 ; XOR A,A (optimized from LD A,0)
      5: return r6
      6: else_3:
      7: 30 ; Load from anchor arr$imm0
      8: 63
      9: store , r9
     10: 30 ; Load from anchor arr$imm0
     11: 29 ; Update TSMC reference arr
     12: r14 = 1
     13: store , r14
     14: loop_5:
     15: r15 = load i
     16: 30 ; Load from anchor count$imm0
     17: r17 = r15 < r16
     18: jump_if_not r17, end_loop_6
     19: 30 ; Load from anchor arr$imm0
     20: 63
     21: r20 = load max
     22: r21 = r19 > r20
     23: jump_if_not r21, else_7
     24: 30 ; Load from anchor arr$imm0
     25: 63
     26: store max, r23
     27: jump end_if_8
     28: else_7:
     29: end_if_8:
     30: 30 ; Load from anchor arr$imm0
     31: 29 ; Update TSMC reference arr
     32: 43 ; INC (optimized from ADD 1)
     33: store i, r29
     34: jump loop_5
     35: end_loop_6:
     36: r30 = load max
     37: return r30

Function ...examples.tsmc_loops.strcmp_tsmc(s1: *u8, s2: *u8) -> i8
  @smc
  Instructions:
      0: loop_9:
      1: 30 ; Load from anchor s1$imm0
      2: 63
      3: r5 = r5 ^ r5 ; XOR A,A (optimized from LD A,0)
      4: 30 ; Load from anchor s1$imm0
      5: 63
      6: 62
      7: r9 = r5 & r8
      8: r10 = r4 != r9
      9: 30 ; Load from anchor s2$imm0
     10: 63
     11: r13 = r10 == r12
     12: jump_if_not r13, end_loop_10
     13: 30 ; Load from anchor s1$imm0
     14: 29 ; Update TSMC reference s1
     15: 30 ; Load from anchor s2$imm0
     16: 29 ; Update TSMC reference s2
     17: jump loop_9
     18: end_loop_10:
     19: 30 ; Load from anchor s1$imm0
     20: 63
     21: 30 ; Load from anchor s2$imm0
     22: 63
     23: r24 = r21 < r23
     24: jump_if_not r24, else_11
     25: r26 = -1 ; Folded: 
     26: return r26
     27: else_11:
     28: 30 ; Load from anchor s1$imm0
     29: 63
     30: 30 ; Load from anchor s2$imm0
     31: 63
     32: r31 = r28 > r30
     33: jump_if_not r31, else_13
     34: r32 = 1
     35: return r32
     36: else_13:
     37: r33 = r33 ^ r33 ; XOR A,A (optimized from LD A,0)
     38: return r33

Function ...examples.tsmc_loops.count_char_tsmc(str: *u8, ch: u8) -> u16
  @smc
  Locals:
    r3 = count: u16
  Instructions:
      0: r4 = r4 ^ r4 ; XOR A,A (optimized from LD A,0)
      1: store , r4
      2: loop_15:
      3: 30 ; Load from anchor str$imm0
      4: 63
      5: r7 = r7 ^ r7 ; XOR A,A (optimized from LD A,0)
      6: r8 = r6 != r7
      7: jump_if_not r8, end_loop_16
      8: 30 ; Load from anchor str$imm0
      9: 63
     10: 30 ; Load from anchor ch$imm0
     11: r12 = r10 == r11
     12: jump_if_not r12, else_17
     13: 43 ; INC (optimized from ADD 1)
     14: store count, r15
     15: jump end_if_18
     16: else_17:
     17: end_if_18:
     18: 30 ; Load from anchor str$imm0
     19: 29 ; Update TSMC reference str
     20: jump loop_15
     21: end_loop_16:
     22: r19 = load count
     23: return r19

