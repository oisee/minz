; MinZ generated code
; Generated: 2025-07-31 20:43:59


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_struct_literal.make_point
test_struct_literal.make_point:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD C, A         ; Store to physical register C
    LD A, E       ; Get parameter y
    LD ($F004), A     ; Virtual register 2 to memory
    ; Allocate struct Point
    LD HL, -2
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; Register 3 already in HL
    ; r4 = param x
    ; Load parameter x
    ; Store to Point.x
    ; Register 3 already in HL
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r5 = param y
    ; Load parameter y
    ; Store to Point.y
    ; Register 3 already in HL
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return r3
    ; Register 3 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_struct_literal.offset_point
test_struct_literal.offset_point:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD A, E       ; Get parameter dx
    LD L, A         ; Store to physical register L
    LD A, D       ; Get parameter dy
    LD ($F006), A     ; Virtual register 3 to memory
    ; Allocate struct Point
    LD HL, -2
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    LD D, H
    LD E, L
    ; r5 = param p
    ; Load parameter p
    ; Load field x (offset 0)
    LD H, B
    LD L, C
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r7 = param dx
    ; Load parameter dx
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    ADD HL, DE
    ; Store to Point.x
    LD H, D
    LD L, E
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r9 = param p
    ; Load parameter p
    ; Load field y (offset 1)
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r11 = param dy
    ; Load parameter dy
    ; r12 = r10 + r11
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 12 already in HL
    ; Store to Point.y
    LD H, D
    LD L, E
    LD DE, 1
    ADD HL, DE
    PUSH HL
    ; Register 12 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return r4
    LD H, D
    LD L, E
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
