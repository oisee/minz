; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   .Users.alice.dev.zvdb-minz.zvdb_test.tests_passed: u8
;   .Users.alice.dev.zvdb-minz.zvdb_test.tests_failed: u8

Function .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8(actual: u16, expected: u16, test_id: u8) -> void
  @smc
  Instructions:
      0: TRUE_SMC_LOAD ; Load from anchor actual$imm0
      1: TRUE_SMC_LOAD ; Load from anchor expected$imm0
      2: r6 = r4 == r5
      3: jump_if_not r6, else_1
      4: LOAD_STRING
      5: PRINT_STRING ; Print "Ã¢ÂÂ Test " (18 chars via loop)
      6: PRINT_STRING_DIRECT ; Direct print ": PASS (" (8 chars)
      7: PRINT_STRING_DIRECT ; Direct print ")
" (2 chars)
      8: jump end_if_2
      9: else_1:
     10: LOAD_STRING
     11: PRINT_STRING ; Print "Ã¢ÂÂ Test " (18 chars via loop)
     12: LOAD_STRING
     13: PRINT_STRING ; Print ": FAIL (got " (12 chars via loop)
     14: LOAD_STRING
     15: PRINT_STRING ; Print ", expected " (11 chars via loop)
     16: PRINT_STRING_DIRECT ; Direct print ")
" (2 chars)
     17: end_if_2:
     18: return

Function .Users.alice.dev.zvdb-minz.zvdb_test.test_popcount() -> void
  @smc
  Locals:
    r2 = pc0: u8
    r13 = pc1: u8
    r24 = pc3: u8
    r35 = pcF: u8
    r46 = pc55: u8
    r57 = pcAA: u8
    r68 = pcFF: u8
  Instructions:
      0: LOAD_STRING
      1: PRINT_STRING ; Print "
=== Popcount Tests ===
" (24 chars via loop)
      2: r5 = call .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8
      3: r12 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
      4: r16 = call .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8
      5: r23 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
      6: r27 = call .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8
      7: r34 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
      8: r38 = call .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8
      9: r45 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     10: r49 = call .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8
     11: r56 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     12: r60 = call .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8
     13: r67 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     14: r71 = call .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8
     15: r78 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     16: return

Function .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8(val: u8) -> u8
  @smc
  Locals:
    r2 = count: u8
    r4 = v: u8
  Instructions:
      0: TRUE_SMC_LOAD ; Load from anchor val$imm0
      1: r7 = 8
      2: r8 = r6 ; Initialize loop variable i
      3: for_loop_3:
      4: r9 = r8 < r7 ; Check i < end
      5: jump_if_not r9, for_end_4
      6: TEST
      7: jump_if_not r14, else_5
      8: jump end_if_6
      9: else_5:
     10: end_if_6:
     11: INC
     12: jump for_loop_3
     13: for_end_4:
     14: r22 = load count
     15: return r22

Function .Users.alice.dev.zvdb-minz.zvdb_test.test_hamming() -> void
  @smc
  Locals:
    r2 = v1: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256
    r3 = v2: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256
    r19 = dist1: u16
    r47 = dist2: u16
    r75 = dist3: u16
    r108 = dist4: u16
  Instructions:
      0: LOAD_STRING
      1: PRINT_STRING ; Print "
=== Hamming Distance Tests ===
" (32 chars via loop)
      2: r5 = 32
      3: r6 = r4 ; Initialize loop variable i
      4: for_loop_7:
      5: r7 = r6 < r5 ; Check i < end
      6: jump_if_not r7, for_end_8
      7: STORE_PTR ; Store to array[index] (u8)
      8: STORE_PTR ; Store to array[index] (u8)
      9: INC
     10: jump for_loop_7
     11: for_end_8:
     12: r24 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
     13: r31 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     14: r33 = 32
     15: r34 = r32 ; Initialize loop variable i
     16: for_loop_9:
     17: r35 = r34 < r33 ; Check i < end
     18: jump_if_not r35, for_end_10
     19: STORE_PTR ; Store to array[index] (u8)
     20: STORE_PTR ; Store to array[index] (u8)
     21: INC
     22: jump for_loop_9
     23: for_end_10:
     24: r52 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
     25: r59 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     26: r61 = 32
     27: r62 = r60 ; Initialize loop variable i
     28: for_loop_11:
     29: r63 = r62 < r61 ; Check i < end
     30: jump_if_not r63, for_end_12
     31: STORE_PTR ; Store to array[index] (u8)
     32: STORE_PTR ; Store to array[index] (u8)
     33: INC
     34: jump for_loop_11
     35: for_end_12:
     36: r80 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
     37: r87 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     38: r89 = 32
     39: r90 = r88 ; Initialize loop variable i
     40: for_loop_13:
     41: r91 = r90 < r89 ; Check i < end
     42: jump_if_not r91, for_end_14
     43: STORE_PTR ; Store to array[index] (u8)
     44: STORE_PTR ; Store to array[index] (u8)
     45: INC
     46: jump for_loop_13
     47: for_end_14:
     48: STORE_PTR ; Store to array[index] (u8)
     49: r113 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
     50: r120 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     51: return

Function .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256(v1: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256, v2: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256) -> u16
  @smc
  Locals:
    r3 = distance: u16
    r9 = xor_val: u8
    r19 = bits: u8
  Instructions:
      0: r6 = 32
      1: r7 = r5 ; Initialize loop variable i
      2: for_loop_15:
      3: r8 = r7 < r6 ; Check i < end
      4: jump_if_not r8, for_end_16
      5: TRUE_SMC_LOAD ; Load from anchor v1$imm0
      6: LOAD_INDEX ; Load array element (u8)
      7: TRUE_SMC_LOAD ; Load from anchor v2$imm0
      8: LOAD_INDEX ; Load array element (u8)
      9: r22 = call .Users.alice.dev.zvdb-minz.zvdb_test.popcount_bits$u8
     10: r7 = r7 + r26 ; Increment i
     11: r26 = 1
     12: jump for_loop_15
     13: for_end_16:
     14: r27 = load distance
     15: return r27

Function .Users.alice.dev.zvdb-minz.zvdb_test.test_similarity() -> void
  @smc
  Locals:
    r2 = v1: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256
    r3 = v2: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256
    r19 = sim1: i16
    r25 = sim1_u: u16
    r49 = sim2: i16
    r82 = sim3: i16
    r88 = sim3_u: u16
  Instructions:
      0: LOAD_STRING
      1: PRINT_STRING ; Print "
=== Similarity Score Tests ===
" (32 chars via loop)
      2: r5 = 32
      3: r6 = r4 ; Initialize loop variable i
      4: for_loop_17:
      5: r7 = r6 < r5 ; Check i < end
      6: jump_if_not r7, for_end_18
      7: STORE_PTR ; Store to array[index] (u8)
      8: STORE_PTR ; Store to array[index] (u8)
      9: INC
     10: jump for_loop_17
     11: for_end_18:
     12: TRUE_SMC_LOAD ; Inlined: Load from anchor v1$imm0
     13: TRUE_SMC_LOAD ; Inlined: Load from anchor v2$imm0
     14: TRUE_SMC_LOAD ; Inlined: Load from anchor v1$imm0
     15: TRUE_SMC_LOAD ; Inlined: Load from anchor v2$imm0
     16: r5 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256 ; Inlined from .Users.alice.dev.zvdb-minz.zvdb_test.calc_similarity$Vector256$Vector256
     17: r6 = load doubled ; Inlined from .Users.alice.dev.zvdb-minz.zvdb_test.calc_similarity$Vector256$Vector256
     18: r7 = 256 ; Inlined from .Users.alice.dev.zvdb-minz.zvdb_test.calc_similarity$Vector256$Vector256
     19: r24 = r8 ; Inlined return value
     20: r33 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     21: r35 = 32
     22: r36 = r34 ; Initialize loop variable i
     23: for_loop_19:
     24: r37 = r36 < r35 ; Check i < end
     25: jump_if_not r37, for_end_20
     26: STORE_PTR ; Store to array[index] (u8)
     27: STORE_PTR ; Store to array[index] (u8)
     28: INC
     29: jump for_loop_19
     30: for_end_20:
     31: TRUE_SMC_LOAD ; Inlined: Load from anchor v1$imm0
     32: TRUE_SMC_LOAD ; Inlined: Load from anchor v2$imm0
     33: TRUE_SMC_LOAD ; Inlined: Load from anchor v1$imm0
     34: TRUE_SMC_LOAD ; Inlined: Load from anchor v2$imm0
     35: r13 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256 ; Inlined from .Users.alice.dev.zvdb-minz.zvdb_test.calc_similarity$Vector256$Vector256
     36: r55 = load sim2
     37: r54 = r16 ; Inlined return value
     38: r57 = -256 ; Folded: 
     39: r58 = r55 == r57
     40: jump_if_not r58, else_21
     41: LOAD_STRING
     42: PRINT_STRING ; Print "â Test 13: Opposite similarity PASS
" (41 chars via loop)
     43: jump end_if_22
     44: else_21:
     45: LOAD_STRING
     46: PRINT_STRING ; Print "â Test 13: Opposite similarity FAIL
" (41 chars via loop)
     47: end_if_22:
     48: r68 = 32
     49: r69 = r67 ; Initialize loop variable i
     50: for_loop_23:
     51: r70 = r69 < r68 ; Check i < end
     52: jump_if_not r70, for_end_24
     53: STORE_PTR ; Store to array[index] (u8)
     54: STORE_PTR ; Store to array[index] (u8)
     55: INC
     56: jump for_loop_23
     57: for_end_24:
     58: TRUE_SMC_LOAD ; Inlined: Load from anchor v1$imm0
     59: TRUE_SMC_LOAD ; Inlined: Load from anchor v2$imm0
     60: TRUE_SMC_LOAD ; Inlined: Load from anchor v1$imm0
     61: TRUE_SMC_LOAD ; Inlined: Load from anchor v2$imm0
     62: r21 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256 ; Inlined from .Users.alice.dev.zvdb-minz.zvdb_test.calc_similarity$Vector256$Vector256
     63: r87 = r24 ; Inlined return value
     64: r96 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     65: return

Function .Users.alice.dev.zvdb-minz.zvdb_test.calc_similarity$Vector256$Vector256(v1: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256, v2: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256) -> i16
  @smc
  Locals:
    r3 = hamming: u16
    r9 = doubled: u16
  Instructions:
      0: TRUE_SMC_LOAD ; Load from anchor v1$imm0
      1: TRUE_SMC_LOAD ; Load from anchor v2$imm0
      2: TRUE_SMC_LOAD ; Load from anchor v1$imm0
      3: TRUE_SMC_LOAD ; Load from anchor v2$imm0
      4: r8 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
      5: r14 = load doubled
      6: r13 = 256
      7: r15 = r13 - r14
      8: return r15

Function .Users.alice.dev.zvdb-minz.zvdb_test.test_search() -> void
  @smc
  Locals:
    r2 = db: [4].Users.alice.dev.zvdb-minz.zvdb_test.Vector256
    r51 = query1: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256
    r62 = best1: u8
    r92 = best1_u: u16
    r101 = query2: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256
    r112 = best2: u8
    r142 = best2_u: u16
  Instructions:
      0: LOAD_STRING
      1: PRINT_STRING ; Print "
=== Vector Search Tests ===
" (29 chars via loop)
      2: r4 = 32
      3: r5 = r3 ; Initialize loop variable i
      4: for_loop_25:
      5: r6 = r5 < r4 ; Check i < end
      6: jump_if_not r6, for_end_26
      7: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
      8: STORE_PTR ; Store to array[index] (u8)
      9: INC
     10: jump for_loop_25
     11: for_end_26:
     12: r16 = 32
     13: r17 = r15 ; Initialize loop variable i
     14: for_loop_27:
     15: r18 = r17 < r16 ; Check i < end
     16: jump_if_not r18, for_end_28
     17: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     18: STORE_PTR ; Store to array[index] (u8)
     19: INC
     20: jump for_loop_27
     21: for_end_28:
     22: r28 = 32
     23: r29 = r27 ; Initialize loop variable i
     24: for_loop_29:
     25: r30 = r29 < r28 ; Check i < end
     26: jump_if_not r30, for_end_30
     27: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     28: STORE_PTR ; Store to array[index] (u8)
     29: INC
     30: jump for_loop_29
     31: for_end_30:
     32: r40 = 32
     33: r41 = r39 ; Initialize loop variable i
     34: for_loop_31:
     35: r42 = r41 < r40 ; Check i < end
     36: jump_if_not r42, for_end_32
     37: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     38: STORE_PTR ; Store to array[index] (u8)
     39: INC
     40: jump for_loop_31
     41: for_end_32:
     42: r53 = 32
     43: r54 = r52 ; Initialize loop variable i
     44: for_loop_33:
     45: r55 = r54 < r53 ; Check i < end
     46: jump_if_not r55, for_end_34
     47: STORE_PTR ; Store to array[index] (u8)
     48: INC
     49: jump for_loop_33
     50: for_end_34:
     51: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     52: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     53: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     54: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     55: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     56: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     57: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     58: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     59: r91 = call .Users.alice.dev.zvdb-minz.zvdb_test.find_nearest$Vector256$Vector256$Vector256$Vector256$Vector256$u8
     60: r100 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     61: r103 = 32
     62: r104 = r102 ; Initialize loop variable i
     63: for_loop_35:
     64: r105 = r104 < r103 ; Check i < end
     65: jump_if_not r105, for_end_36
     66: STORE_PTR ; Store to array[index] (u8)
     67: INC
     68: jump for_loop_35
     69: for_end_36:
     70: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     71: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     72: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     73: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     74: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     75: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     76: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     77: LOAD_INDEX ; Load array element (.Users.alice.dev.zvdb-minz.zvdb_test.Vector256)
     78: r141 = call .Users.alice.dev.zvdb-minz.zvdb_test.find_nearest$Vector256$Vector256$Vector256$Vector256$Vector256$u8
     79: r150 = call .Users.alice.dev.zvdb-minz.zvdb_test.assert_equal$u16$u16$u8
     80: return

Function .Users.alice.dev.zvdb-minz.zvdb_test.find_nearest$Vector256$Vector256$Vector256$Vector256$Vector256$u8(query: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256, db0: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256, db1: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256, db2: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256, db3: .Users.alice.dev.zvdb-minz.zvdb_test.Vector256, count: u8) -> u8
  @smc
  Locals:
    r7 = best_id: u8
    r9 = best_dist: u16
    r14 = dist0: u16
    r28 = dist1: u16
    r42 = dist2: u16
    r56 = dist3: u16
  Instructions:
      0: TRUE_SMC_LOAD ; Load from anchor count$imm0
      1: r12 = 1
      2: r13 = r11 >= r12
      3: jump_if_not r13, else_37
      4: TRUE_SMC_LOAD ; Load from anchor query$imm0
      5: TRUE_SMC_LOAD ; Load from anchor db0$imm0
      6: TRUE_SMC_LOAD ; Load from anchor query$imm0
      7: TRUE_SMC_LOAD ; Load from anchor db0$imm0
      8: r19 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
      9: r20 = load dist0
     10: r21 = load best_dist
     11: r22 = r20 < r21
     12: jump_if_not r22, else_39
     13: jump end_if_40
     14: else_39:
     15: end_if_40:
     16: jump end_if_38
     17: else_37:
     18: end_if_38:
     19: TRUE_SMC_LOAD ; Load from anchor count$imm0
     20: r26 = 2
     21: r27 = r25 >= r26
     22: jump_if_not r27, else_41
     23: TRUE_SMC_LOAD ; Load from anchor query$imm0
     24: TRUE_SMC_LOAD ; Load from anchor db1$imm0
     25: TRUE_SMC_LOAD ; Load from anchor query$imm0
     26: TRUE_SMC_LOAD ; Load from anchor db1$imm0
     27: r33 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
     28: r34 = load dist1
     29: r35 = load best_dist
     30: r36 = r34 < r35
     31: jump_if_not r36, else_43
     32: jump end_if_44
     33: else_43:
     34: end_if_44:
     35: jump end_if_42
     36: else_41:
     37: end_if_42:
     38: TRUE_SMC_LOAD ; Load from anchor count$imm0
     39: r40 = 3
     40: r41 = r39 >= r40
     41: jump_if_not r41, else_45
     42: TRUE_SMC_LOAD ; Load from anchor query$imm0
     43: TRUE_SMC_LOAD ; Load from anchor db2$imm0
     44: TRUE_SMC_LOAD ; Load from anchor query$imm0
     45: TRUE_SMC_LOAD ; Load from anchor db2$imm0
     46: r47 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
     47: r48 = load dist2
     48: r49 = load best_dist
     49: r50 = r48 < r49
     50: jump_if_not r50, else_47
     51: jump end_if_48
     52: else_47:
     53: end_if_48:
     54: jump end_if_46
     55: else_45:
     56: end_if_46:
     57: TRUE_SMC_LOAD ; Load from anchor count$imm0
     58: r54 = 4
     59: r55 = r53 >= r54
     60: jump_if_not r55, else_49
     61: TRUE_SMC_LOAD ; Load from anchor query$imm0
     62: TRUE_SMC_LOAD ; Load from anchor db3$imm0
     63: TRUE_SMC_LOAD ; Load from anchor query$imm0
     64: TRUE_SMC_LOAD ; Load from anchor db3$imm0
     65: r61 = call .Users.alice.dev.zvdb-minz.zvdb_test.calc_hamming$Vector256$Vector256
     66: r62 = load dist3
     67: r63 = load best_dist
     68: r64 = r62 < r63
     69: jump_if_not r64, else_51
     70: jump end_if_52
     71: else_51:
     72: end_if_52:
     73: jump end_if_50
     74: else_49:
     75: end_if_50:
     76: r67 = load best_id
     77: return r67

Function .Users.alice.dev.zvdb-minz.zvdb_test.main() -> void
  @smc
  Instructions:
      0: LOAD_STRING
      1: PRINT_STRING ; Print "ZVDB E2E Test Suite
" (20 chars via loop)
      2: LOAD_STRING
      3: PRINT_STRING ; Print "==================
" (19 chars via loop)
      4: r3 = call .Users.alice.dev.zvdb-minz.zvdb_test.test_popcount
      5: r4 = call .Users.alice.dev.zvdb-minz.zvdb_test.test_hamming
      6: r5 = call .Users.alice.dev.zvdb-minz.zvdb_test.test_similarity
      7: r6 = call .Users.alice.dev.zvdb-minz.zvdb_test.test_search
      8: LOAD_STRING
      9: PRINT_STRING ; Print "
=== Test Summary ===
" (22 chars via loop)
     10: PRINT_STRING_DIRECT ; Direct print "Passed: " (8 chars)
     11: PRINT_STRING_DIRECT ; Direct print "
" (1 chars)
     12: PRINT_STRING_DIRECT ; Direct print "Failed: " (8 chars)
     13: PRINT_STRING_DIRECT ; Direct print "
" (1 chars)
     14: TEST
     15: jump_if_not r10, else_53
     16: LOAD_STRING
     17: PRINT_STRING ; Print "
â All tests passed!
" (26 chars via loop)
     18: jump end_if_54
     19: else_53:
     20: LOAD_STRING
     21: PRINT_STRING ; Print "
â Some tests failed!
" (27 chars via loop)
     22: end_if_54:
     23: return

