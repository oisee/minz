; MinZ generated code
; Generated: 2025-07-27 08:16:09


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_stack_locals.test_stack_locals
...examples.test_stack_locals.test_stack_locals:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.test_stack_locals.test_stack_locals_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r5 = 10
    LD A, 10
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = r4 + r5
    LD D, H
    LD E, L
    LD HL, ($F00A)    ; Virtual register 5 from memory
    ADD HL, DE
    ; store , r6
    LD ($F006), HL
...examples.test_stack_locals.test_stack_locals_param_y:
    LD HL, #0000   ; SMC parameter y (u8->u16)
    ; r9 = 20
    LD A, 20
    LD L, A         ; Store to physical register L
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    EXX               ; Switch to shadow registers
    ; store , r10
    EXX               ; Switch to shadow registers
    LD ($F00E), HL
    ; r12 = load a
    LD HL, ($F006)
    LD ($F018), HL    ; Virtual register 12 to memory
    ; r13 = load b
    LD HL, ($F00E)
    EXX               ; Switch to shadow registers
    ; r14 = r12 + r13
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD D, H
    LD E, L
    EXX               ; Switch to shadow registers
    ADD HL, DE
    ; store , r14
    LD ($F016), HL
    ; r15 = load c
    LD HL, ($F016)
    EXX               ; Switch to shadow registers
    ; return r15
    EXX               ; Switch to shadow registers
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_stack_locals.factorial
...examples.test_stack_locals.factorial:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.test_stack_locals.factorial_param_n:
    LD HL, #0000   ; SMC parameter n (u8->u16)
    EXX               ; Switch to shadow registers
    ; r3 = 1
    LD A, 1
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 <= r3
    EXX               ; Switch to shadow registers
    LD D, H
    LD E, L
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    LD A, (...examples.test_stack_locals.factorial_param_n)
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r9 = r7 - r8
    LD HL, ($F00E)    ; Virtual register 7 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    LD ($F012), HL    ; Virtual register 9 to memory
    ; r10 = call factorial
    ; Call to factorial (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL factorial
    ; store , r10
    LD ($F00C), HL
    LD A, (...examples.test_stack_locals.factorial_param_n)
    LD B, A         ; Store to physical register B
    ; r12 = load prev
    LD HL, ($F00C)
    ; r13 = r11 * r12
    ; 8-bit multiplication
    LD A, B
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; return r13
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_stack_locals.many_locals
...examples.test_stack_locals.many_locals:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -10
    ADD HL, SP
    LD SP, HL
    ; r2 = 1
    LD A, 1
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD (IX-1), L
    LD (IX+0), H
    ; r4 = 2
    LD A, 2
    LD ($F008), A     ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD (IX-2), L
    LD (IX-1), H
    ; r6 = 3
    LD A, 3
    LD ($F00C), A     ; Virtual register 6 to memory
    ; store , r6
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD (IX-3), L
    LD (IX-2), H
    ; r8 = 4
    LD A, 4
    LD ($F010), A     ; Virtual register 8 to memory
    ; store , r8
    LD HL, ($F010)    ; Virtual register 8 from memory
    LD (IX-4), L
    LD (IX-3), H
    ; r10 = 5
    LD A, 5
    ; Register 10 already in A
    ; store , r10
    LD (IX-5), L
    LD (IX-4), H
    ; r12 = 6
    LD A, 6
    ; Register 12 already in A
    ; store , r12
    LD (IX-6), L
    LD (IX-5), H
    ; r14 = 7
    LD A, 7
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r14
    EXX               ; Switch to shadow registers
    LD (IX-7), L
    LD (IX-6), H
    ; r16 = 8
    LD A, 8
    ; Register 16 already in A
    ; store , r16
    LD (IX-8), L
    LD (IX-7), H
    ; r18 = load a
    LD L, (IX-1)
    LD H, (IX+0)
    ; r19 = load b
    LD L, (IX-2)
    LD H, (IX-1)
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r20 = r18 + r19
    LD D, H
    LD E, L
    LD HL, ($F026)    ; Virtual register 19 from memory
    ADD HL, DE
    EXX               ; Switch to shadow registers
    ; r21 = load c
    LD L, (IX-3)
    LD H, (IX-2)
    EXX               ; Switch to shadow registers
    ; r22 = r20 + r21
    EXX               ; Switch to shadow registers
    LD D, H
    LD E, L
    EXX               ; Switch to shadow registers
    ADD HL, DE
    ; r23 = load d
    LD L, (IX-4)
    LD H, (IX-3)
    LD ($F02E), HL    ; Virtual register 23 to memory
    ; r24 = r22 + r23
    LD D, H
    LD E, L
    LD HL, ($F02E)    ; Virtual register 23 from memory
    ADD HL, DE
    ; store , r24
    LD (IX-9), L
    LD (IX-8), H
    ; r26 = load e
    LD L, (IX-5)
    LD H, (IX-4)
    ; r27 = load f
    LD L, (IX-6)
    LD H, (IX-5)
    LD ($F036), HL    ; Virtual register 27 to memory
    ; r28 = r26 + r27
    LD D, H
    LD E, L
    LD HL, ($F036)    ; Virtual register 27 from memory
    ADD HL, DE
    ; r29 = load g
    LD L, (IX-7)
    LD H, (IX-6)
    ; r30 = r28 + r29
    LD D, H
    LD E, L
    ADD HL, DE
    ; r31 = load h
    LD L, (IX-8)
    LD H, (IX-7)
    ; r32 = r30 + r31
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r32
    LD (IX-10), L
    LD (IX-9), H
    ; r33 = load sum1
    LD L, (IX-9)
    LD H, (IX-8)
    ; r34 = load sum2
    LD L, (IX-10)
    LD H, (IX-9)
    ; r35 = r33 + r34
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r35
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_stack_locals.outer
...examples.test_stack_locals.outer:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.test_stack_locals.outer_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r4 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    EXX               ; Switch to shadow registers
    ADD HL, DE
    EXX               ; Switch to shadow registers
    ; store , r5
    EXX               ; Switch to shadow registers
    LD ($F004), HL
    ; r7 = load local1
    LD HL, ($F004)
    EXX               ; Switch to shadow registers
    ; r8 = call inner
    ; Call to inner (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL inner
    EXX               ; Switch to shadow registers
    ; store , r8
    EXX               ; Switch to shadow registers
    LD ($F00C), HL
    ; r10 = load result
    LD HL, ($F00C)
    ; r11 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r12 = r10 + r11
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r12
    LD ($F012), HL
    ; r13 = load local2
    LD HL, ($F012)
    ; return r13
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_stack_locals.inner
...examples.test_stack_locals.inner:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.test_stack_locals.inner_param_y:
    LD HL, #0000   ; SMC parameter y (u8->u16)
    ; r4 = 2
    LD A, 2
    LD B, A         ; Store to physical register B
    ; r5 = r3 * r4
    ; 8-bit multiplication
    LD A, B
    LD B, A       ; B = multiplicand
    LD A, B
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_3
.mul_loop_3:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_3
.mul_done_3:
    EXX               ; Switch to shadow registers
    ; store , r5
    EXX               ; Switch to shadow registers
    LD ($F004), HL
    ; r6 = load temp
    LD HL, ($F004)
    ; return r6
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_stack_locals.main
...examples.test_stack_locals.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 10
    LD A, 10
    ; Register 3 already in A
    ; r4 = call test_stack_locals
    ; Call to test_stack_locals (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL test_stack_locals
    LD ($F008), HL    ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD ($F002), HL
    ; r6 = 5
    LD A, 5
    LD E, A         ; Store to physical register E
    ; r7 = call factorial
    ; Call to factorial (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL factorial
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; store , r7
    LD HL, ($F00E)    ; Virtual register 7 from memory
    LD ($F00A), HL
    ; r9 = call many_locals
    ; Call to many_locals (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL many_locals
    ; store , r9
    LD ($F010), HL
    ; r11 = 10
    LD A, 10
    LD E, A         ; Store to physical register E
    ; r12 = call outer
    ; Call to outer (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL outer
    EXX               ; Switch to shadow registers
    ; store , r12
    EXX               ; Switch to shadow registers
    LD ($F014), HL
    ; return
    RET

    END main
