; MinZ generated code
; Generated: 2025-07-26 12:32:35


; Code section
    ORG $8000


; Function: ...examples.test_loop_indexed.main
...examples.test_loop_indexed.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH DE
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F004), A
    ; store , r2
    LD HL, ($F004)
    LD ($F002), HL
    ; loop_1:
loop_1:
    ; r3 = load i
    LD HL, ($F000)
    LD ($F006), HL
    ; r4 = 8
    LD A, 8
    LD ($F008), A
    ; r5 = r3 < r4
    LD HL, ($F006)
    LD D, H
    LD E, L
    LD HL, ($F008)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F00A), HL
    ; jump_if_not r5, end_loop_2
    LD A, ($F00A)
    OR A
    JP Z, end_loop_2
    ; r6 = load i
    LD HL, ($F000)
    LD ($F00C), HL
    ; r7 = 10
    LD A, 10
    LD ($F00E), A
    ; r8 = r6 + r7
    LD HL, ($F00C)
    LD D, H
    LD E, L
    LD HL, ($F00E)
    ADD HL, DE
    LD ($F010), HL
    ; Load array element (...examples.test_loop_indexed.Score)
    LD HL, ($F012)
    PUSH HL
    LD HL, ($F014)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F016), A
    ; Store to field player_id (offset 0)
    LD HL, ($F016)
    PUSH HL
    LD HL, ($F010)
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r12 = load i
    LD HL, ($F000)
    LD ($F018), HL
    ; Load array element (...examples.test_loop_indexed.Score)
    LD HL, ($F01A)
    PUSH HL
    LD HL, ($F01C)
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F01E), A
    ; Store to field points (offset 1)
    LD HL, ($F01E)
    LD DE, 1
    ADD HL, DE
    PUSH HL
    LD HL, ($F018)
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; INC (optimized from ADD 1)
    LD HL, ($F020)
    INC HL
    LD ($F024), HL
    ; store i, r18
    LD HL, ($F024)
    LD ($F002), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F028), A
    ; store , r20
    LD HL, ($F028)
    LD ($F026), HL
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F02C), A
    ; store , r22
    LD HL, ($F02C)
    LD ($F02A), HL
    ; Load table base address
    LD HL, ($F02E)
    LD ($F030), HL
    ; Load table base for end calculation
    LD HL, ($F02E)
    LD ($F032), HL
    ; Calculate table end (+ 8 elements * 3 bytes)
    LD HL, ($F032)
    LD DE, 24
    ADD HL, DE
    LD ($F032), HL
    ; Load loop counter
    LD A, 8
    LD ($F034), A
    ; r27 = 0
    LD A, 0
    LD ($F036), A
    ; Check if reached end of table
    LD HL, ($F030)
    LD D, H
    LD E, L
    LD HL, ($F032)
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, ($F038)
    OR A
    JP NZ, loop_end_4
    ; Copy element to buffer at $F000
    LD HL, ($F030)
    LD DE, $F000    ; Buffer address
    LD BC, 3       ; Size
    LDIR            ; Copy to buffer
    ; Load score.points from buffer at $F001
    LD HL, ($F001)
    LD ($F03A), HL
    ; r30 = load max_score
    LD HL, ($F000)
    LD ($F03C), HL
    ; r31 = r29 > r30
    LD HL, ($F03A)
    LD D, H
    LD E, L
    LD HL, ($F03C)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L4
    JP P, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD ($F03E), HL
    ; jump_if_not r31, else_5
    LD A, ($F03E)
    OR A
    JP Z, else_5
    ; Load score.points from buffer at $F001
    LD HL, ($F001)
    LD ($F040), HL
    ; store max_score, r32
    LD HL, ($F040)
    LD ($F026), HL
    ; r33 = load idx
    LD HL, ($F000)
    LD ($F042), HL
    ; store max_index, r33
    LD HL, ($F042)
    LD ($F02A), HL
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; Copy buffer back to element at $F000
    LD HL, ($F030)
    EX DE, HL       ; DE = destination
    LD HL, $F000    ; Buffer address
    LD BC, 3       ; Size
    LDIR            ; Copy from buffer
    ; unknown op 33
    LD HL, ($F036)
    INC HL
    LD ($F036), HL
    ; Advance to next element (+3 bytes)
    LD HL, ($F030)
    LD DE, 3
    ADD HL, DE
    LD ($F030), HL
    ; Decrement counter and loop if not zero
    LD A, ($F034)
    LD B, A
    DJNZ loop_start_3
    LD A, B
    LD ($F034), A
    ; Load table base address
    LD HL, ($F044)
    LD ($F046), HL
    ; Load table base for end calculation
    LD HL, ($F044)
    LD ($F048), HL
    ; Calculate table end (+ 8 elements * 3 bytes)
    LD HL, ($F048)
    LD DE, 24
    ADD HL, DE
    LD ($F048), HL
    ; Load loop counter
    LD A, 8
    LD ($F04A), A
    ; r38 = 0
    LD A, 0
    LD ($F04C), A
    ; Check if reached end of table
    LD HL, ($F046)
    LD D, H
    LD E, L
    LD HL, ($F048)
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, ($F04E)
    OR A
    JP NZ, loop_end_8
    ; Copy element to buffer at $F000
    LD HL, ($F046)
    LD DE, $F000    ; Buffer address
    LD BC, 3       ; Size
    LDIR            ; Copy to buffer
    ; r40 = load idx
    LD HL, ($F000)
    LD ($F050), HL
    ; r41 = load max_index
    LD HL, ($F000)
    LD ($F052), HL
    ; r42 = r40 == r41
    LD HL, ($F050)
    LD D, H
    LD E, L
    LD HL, ($F052)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    LD ($F054), HL
    ; jump_if_not r42, else_9
    LD A, ($F054)
    OR A
    JP Z, else_9
    ; Load score.points from buffer at $F001
    LD HL, ($F001)
    LD ($F056), HL
    ; Store to score.points at buffer $F001
    LD HL, ($F05A)
    LD ($F001), HL
    ; jump end_if_10
    JP end_if_10
    ; else_9:
else_9:
    ; end_if_10:
end_if_10:
    ; Copy buffer back to element at $F000
    LD HL, ($F046)
    EX DE, HL       ; DE = destination
    LD HL, $F000    ; Buffer address
    LD BC, 3       ; Size
    LDIR            ; Copy from buffer
    ; unknown op 33
    LD HL, ($F04C)
    INC HL
    LD ($F04C), HL
    ; Advance to next element (+3 bytes)
    LD HL, ($F046)
    LD DE, 3
    ADD HL, DE
    LD ($F046), HL
    ; Decrement counter and loop if not zero
    LD A, ($F04A)
    LD B, A
    DJNZ loop_start_7
    LD A, B
    LD ($F04A), A
    ; return
    POP DE
    RET

    END main
