; MinZ generated code
; Generated: 2025-07-30 23:43:00


; Data section
    ORG $F000

str_0:
    DB 15    ; Length
    DB "Pixel address: "
    DB 0               ; Null terminator
str_1:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_2:
    DB 14    ; Length
    DB "Attr address: "
    DB 0               ; Null terminator
str_3:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: screen.pixel_addr
screen.pixel_addr:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD B, A         ; Store to physical register B
    LD A, E       ; Get parameter y
    LD ($F004), A     ; Virtual register 2 to memory
    ; r4 = param y
    ; Load parameter y
    ; r5 = 192
    LD A, 192
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = r4 & r5
    LD D, H
    LD E, L
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; store , r6
    LD A, D
    LD ($F000), A
    ; r8 = param y
    ; Load parameter y
    ; r9 = 56
    LD A, 56
    LD L, A         ; Store to physical register L
    ; r10 = r8 & r9
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r11 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r12 = r10 >> r11
    ; Shift right
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD B, A       ; B = value to shift
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shr_done_0
    LD B, C       ; B = counter
.shr_loop_0:
    DEC B
    JP M, .shr_done_0
    SRL A         ; Shift right, 0 into bit 7
    JR .shr_loop_0
.shr_done_0:
    LD L, A
    LD H, 0
    ; store , r12
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD ($F001), A
    ; r14 = param y
    ; Load parameter y
    ; r15 = 7
    LD A, 7
    LD C, A         ; Store to physical register C
    ; r16 = r14 & r15
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; store , r16
    LD A, C
    LD ($F002), A
    ; r18 = 16384
    LD HL, 16384
    LD D, H
    LD E, L
    ; r19 = load y_low
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r20 = 8
    LD A, 8
    LD L, A         ; Store to HL (low byte)
    ; r21 = r19 << r20
    ; Shift left
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD B, A       ; B = value to shift
    LD A, L
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_1
    LD B, C       ; B = counter
.shl_loop_1:
    DEC B
    JP M, .shl_done_1
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_1
.shl_done_1:
    LD L, A
    LD H, 0
    ; r22 = r18 | r21
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    LD B, H
    LD C, L
    ; r23 = load y_mid
    LD A, ($F001)
    LD L, A         ; Store to HL (low byte)
    ; r24 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r25 = r23 << r24
    ; Shift left
    LD A, L
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_2
    LD B, C       ; B = counter
.shl_loop_2:
    DEC B
    JP M, .shl_done_2
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_2
.shl_done_2:
    LD L, A
    LD H, 0
    ; r26 = r22 | r25
    LD H, B
    LD L, C
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r27 = load y_high
    LD A, ($F000)
    LD L, A         ; Store to HL (low byte)
    ; r28 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r29 = r27 << r28
    ; Shift left
    LD A, L
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_3
    LD B, C       ; B = counter
.shl_loop_3:
    DEC B
    JP M, .shl_done_3
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_3
.shl_done_3:
    LD L, A
    LD H, 0
    ; r30 = r26 | r29
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    LD ($F03C), HL    ; Virtual register 30 to memory
    ; r31 = param x
    ; Load parameter x
    ; r32 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r33 = r31 >> r32
    ; Shift right
    LD A, L
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shr_done_4
    LD B, C       ; B = counter
.shr_loop_4:
    DEC B
    JP M, .shr_done_4
    SRL A         ; Shift right, 0 into bit 7
    JR .shr_loop_4
.shr_done_4:
    LD L, A
    LD H, 0
    ; r34 = r30 | r33
    LD HL, ($F03C)    ; Virtual register 30 from memory
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    ; store , r34
    LD ($F003), HL
    ; r35 = load addr
    LD HL, ($F003)
    ; Register 35 already in HL
    ; return r35
    ; Register 35 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: screen.attr_addr
screen.attr_addr:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD H, A         ; Store to physical register H
    LD A, E       ; Get parameter y
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 22528
    LD HL, 22528
    ; Register 3 already in HL
    ; r4 = param y
    ; Load parameter y
    ; r5 = 32
    LD A, 32
    LD L, A         ; Store to physical register L
    ; r6 = r4 * r5
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_5
.mul_loop_5:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_5
.mul_done_5:
    ; Register 6 already in HL
    ; r7 = r3 + r6
    ; Register 3 already in HL
    LD D, H
    LD E, L
    ; Register 6 already in HL
    ADD HL, DE
    ; Register 7 already in HL
    ; r8 = param x
    ; Load parameter x
    ; r9 = r7 + r8
    ; Register 7 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r9
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_module_simple.main
test_module_simple.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; store , r2
    LD A, L
    LD ($F002), A
    ; r4 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; store , r4
    LD A, H
    LD ($F006), A
    ; r6 = load x
    LD A, ($F002)
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = load y
    LD A, ($F006)
    LD H, A         ; Store to physical register H
    ; r8 = call screen.pixel_addr
    ; Call to screen.pixel_addr (args: 2)
    ; Register-based parameter passing
    LD A, ($F00C)     ; Virtual register 6 from memory
    ; Parameter x in A
    LD A, H
    LD E, A       ; Parameter y in E
    ; Found function, UsesTrueSMC=false
    CALL screen.pixel_addr
    ; store , r8
    LD ($F00A), HL
    ; r10 = load x
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r11 = 8
    LD A, 8
    LD L, A         ; Store to physical register L
    ; r12 = r10 / r11
    ; 8-bit division
    LD A, H
    LD D, A       ; D = dividend
    LD A, L
    LD E, A       ; E = divisor
    OR A          ; Check for divide by zero
    JR Z, .div_by_zero_6
    LD B, 0       ; B = quotient
    LD A, D       ; A = remainder
.div_loop_6:
    CP E          ; Compare remainder with divisor
    JR C, .div_done_6
    SUB E         ; Subtract divisor
    INC B         ; Increment quotient
    JR .div_loop_6
.div_by_zero_6:
    LD B, 0       ; Return 0 for divide by zero
.div_done_6:
    LD L, B       ; Result in L
    LD H, 0
    LD ($F018), HL    ; Virtual register 12 to memory
    ; r13 = load y
    LD A, ($F006)
    LD H, A         ; Store to physical register H
    ; r14 = 8
    LD A, 8
    LD L, A         ; Store to physical register L
    ; r15 = r13 / r14
    ; 8-bit division
    LD A, H
    LD D, A       ; D = dividend
    LD A, L
    LD E, A       ; E = divisor
    OR A          ; Check for divide by zero
    JR Z, .div_by_zero_7
    LD B, 0       ; B = quotient
    LD A, D       ; A = remainder
.div_loop_7:
    CP E          ; Compare remainder with divisor
    JR C, .div_done_7
    SUB E         ; Subtract divisor
    INC B         ; Increment quotient
    JR .div_loop_7
.div_by_zero_7:
    LD B, 0       ; Return 0 for divide by zero
.div_done_7:
    LD L, B       ; Result in L
    LD H, 0
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; r16 = call screen.attr_addr
    ; Call to screen.attr_addr (args: 2)
    ; Register-based parameter passing
    LD A, ($F018)     ; Virtual register 12 from memory
    ; Parameter x in A
    LD A, ($F01E)     ; Virtual register 15 from memory
    LD E, A       ; Parameter y in E
    ; Found function, UsesTrueSMC=false
    CALL screen.attr_addr
    ; store , r16
    LD ($F012), HL
    ; r17 = string(str_0)
    LD HL, str_0
    LD ($F022), HL    ; Virtual register 17 to memory
    ; print_string(r17)
    LD HL, ($F022)    ; Virtual register 17 from memory
    CALL print_string
    ; r18 = load addr
    LD HL, ($F00A)
    ; print_u16(r18)
    CALL print_u16_decimal
    ; r19 = string(str_1)
    LD HL, str_1
    ; print_string(r19)
    CALL print_string
    ; r20 = string(str_2)
    LD HL, str_2
    ; Register 20 already in HL
    ; print_string(r20)
    ; Register 20 already in HL
    CALL print_string
    ; r21 = load attr
    LD HL, ($F012)
    ; print_u16(r21)
    CALL print_u16_decimal
    ; r22 = string(str_3)
    LD HL, str_3
    ; print_string(r22)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
