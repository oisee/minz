; MinZ generated code
; Generated: 2025-07-24 00:06:00


; Code section
    ORG $8000


; Function: ...examples.mnist.mnist_editor_standalone.editor_init
...examples.mnist.mnist_editor_standalone.editor_init:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = load editor
    LD HL, ($F000)
    LD ($F004), HL
    ; return r2
    LD HL, ($F004)
    RET

; Function: ...examples.mnist.mnist_editor_standalone.set_border
...examples.mnist.mnist_editor_standalone.set_border:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm { ld a, { 0 }
out (fe), a
 : :  r }
    ld a, { 0 }
    out (fe), a
: :  r
    ; r2 = 1
    LD A, 1
    LD ($F004), A
    ; r3 = call set_border
    CALL set_border
    LD ($F006), HL
    ; r5 = 0
    LD A, 0
    LD ($F00A), A
    ; store , r5
    LD HL, ($F00A)
    LD ($F008), HL
    ; loop_1:
loop_1:
    ; r6 = load counter
    LD HL, ($F000)
    LD ($F00C), HL
    ; r7 = 100
    LD A, 100
    LD ($F00E), A
    ; r8 = r6 < r7
    LD HL, ($F00C)
    LD D, H
    LD E, L
    LD HL, ($F00E)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F010), HL
    ; jump_if_not r8, end_loop_2
    LD A, ($F010)
    OR A
    JP Z, end_loop_2
    ; r9 = load counter
    LD HL, ($F000)
    LD ($F012), HL
    ; r10 = 1
    LD A, 1
    LD ($F014), A
    ; r11 = r9 + r10
    LD HL, ($F012)
    LD D, H
    LD E, L
    LD HL, ($F014)
    ADD HL, DE
    LD ($F016), HL
    ; store counter, r11
    LD HL, ($F016)
    LD ($F008), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    RET

    END main
