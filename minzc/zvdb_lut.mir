; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   ...examples.zvdb_lut_simple.popcount_lut: [256]u8

Function ...examples.zvdb_lut_simple.init_lut_demo() -> void
  @smc
  Instructions:
      0: r1 = 0
      1: r2 = load popcount_lut
      2: r3 = 0
      3: r4 = r2 + r3 ; Calculate array element address
      4: UNKNOWN_OP_67 ; Store to array[index] (u8)
      5: r5 = 1
      6: r6 = load popcount_lut
      7: r7 = 1
      8: r8 = r6 + r7 ; Calculate array element address
      9: UNKNOWN_OP_67 ; Store to array[index] (u8)
     10: r9 = 2
     11: r10 = load popcount_lut
     12: r11 = 3
     13: r12 = r10 + r11 ; Calculate array element address
     14: UNKNOWN_OP_67 ; Store to array[index] (u8)
     15: r13 = 3
     16: r14 = load popcount_lut
     17: r15 = 7
     18: r16 = r14 + r15 ; Calculate array element address
     19: UNKNOWN_OP_67 ; Store to array[index] (u8)
     20: r17 = 4
     21: r18 = load popcount_lut
     22: r19 = 15
     23: r20 = r18 + r19 ; Calculate array element address
     24: UNKNOWN_OP_67 ; Store to array[index] (u8)
     25: r21 = 5
     26: r22 = load popcount_lut
     27: r23 = 31
     28: r24 = r22 + r23 ; Calculate array element address
     29: UNKNOWN_OP_67 ; Store to array[index] (u8)
     30: r25 = 6
     31: r26 = load popcount_lut
     32: r27 = 63
     33: r28 = r26 + r27 ; Calculate array element address
     34: UNKNOWN_OP_67 ; Store to array[index] (u8)
     35: r29 = 7
     36: r30 = load popcount_lut
     37: r31 = 127
     38: r32 = r30 + r31 ; Calculate array element address
     39: UNKNOWN_OP_67 ; Store to array[index] (u8)
     40: r33 = 8
     41: r34 = load popcount_lut
     42: r35 = 255
     43: r36 = r34 + r35 ; Calculate array element address
     44: UNKNOWN_OP_67 ; Store to array[index] (u8)
     45: r37 = 4
     46: r38 = load popcount_lut
     47: r39 = 85
     48: r40 = r38 + r39 ; Calculate array element address
     49: UNKNOWN_OP_67 ; Store to array[index] (u8)
     50: r41 = 4
     51: r42 = load popcount_lut
     52: r43 = 170
     53: r44 = r42 + r43 ; Calculate array element address
     54: UNKNOWN_OP_67 ; Store to array[index] (u8)
     55: r45 = 1
     56: r46 = load popcount_lut
     57: r47 = 128
     58: r48 = r46 + r47 ; Calculate array element address
     59: UNKNOWN_OP_67 ; Store to array[index] (u8)
     60: r49 = 4
     61: r50 = load popcount_lut
     62: r51 = 240
     63: r52 = r50 + r51 ; Calculate array element address
     64: UNKNOWN_OP_67 ; Store to array[index] (u8)
     65: r53 = 3
     66: r54 = load popcount_lut
     67: r55 = 14
     68: r56 = r54 + r55 ; Calculate array element address
     69: UNKNOWN_OP_67 ; Store to array[index] (u8)
     70: return

Function ...examples.zvdb_lut_simple.build_full_lut() -> void
  @smc
  Locals:
    r5 = val: u8
    r7 = count: u8
    r9 = temp: u8
  Instructions:
      0: r1 = 0
      1: r2 = 256
      2: r3 = r1 ; Initialize loop variable i
      3: for_loop_1:
      4: r4 = r3 < r2 ; Check i < end
      5: jump_if_not r4, for_end_2
      6: r6 = load i
      7: store , r6
      8: r8 = 0
      9: store , r8
     10: r10 = load val
     11: store , r10
     12: r11 = 0
     13: r12 = 8
     14: r13 = r11 ; Initialize loop variable bit
     15: for_loop_3:
     16: r14 = r13 < r12 ; Check bit < end
     17: jump_if_not r14, for_end_4
     18: r15 = load temp
     19: r16 = 1
     20: r17 = r15 & r16
     21: r18 = 0
     22: r19 = r17 != r18
     23: jump_if_not r19, else_5
     24: r20 = load count
     25: r21 = 1
     26: r22 = r20 + r21
     27: store count, r22
     28: jump end_if_6
     29: else_5:
     30: end_if_6:
     31: r23 = load temp
     32: r24 = 1
     33: SHR
     34: store temp, r25
     35: r26 = 1
     36: r13 = r13 + r26 ; Increment bit
     37: jump for_loop_3
     38: for_end_4:
     39: r27 = load count
     40: r28 = load popcount_lut
     41: r29 = load i
     42: r30 = r28 + r29 ; Calculate array element address
     43: UNKNOWN_OP_67 ; Store to array[index] (u8)
     44: r31 = 1
     45: r3 = r3 + r31 ; Increment i
     46: jump for_loop_1
     47: for_end_2:
     48: return

Function ...examples.zvdb_lut_simple.popcount_lut_lookup(val: u8) -> u8
  @smc
  Instructions:
      0: r2 = load popcount_lut
      1: LOAD_PARAM
      2: LOAD_INDEX ; Load array element (u8)
      3: return r4

Function ...examples.zvdb_lut_simple.hamming_with_lut(vec1: *u8, vec2: *u8, bytes: u8) -> u16
  @smc
  Locals:
    r4 = distance: u16
    r10 = xor_val: u8
    r18 = bits: u8
  Instructions:
      0: r5 = 0
      1: store , r5
      2: r6 = 0
      3: LOAD_PARAM
      4: r8 = r6 ; Initialize loop variable i
      5: for_loop_7:
      6: r9 = r8 < r7 ; Check i < end
      7: jump_if_not r9, for_end_8
      8: LOAD_PARAM
      9: r12 = load i
     10: LOAD_INDEX ; Load array element (u8)
     11: LOAD_PARAM
     12: r15 = load i
     13: LOAD_INDEX ; Load array element (u8)
     14: r17 = r13 ^ r16
     15: store , r17
     16: r19 = load xor_val
     17: r20 = call popcount_lut_lookup
     18: store , r20
     19: r21 = load distance
     20: r22 = load bits
     21: r23 = r21 + r22
     22: store distance, r23
     23: r24 = 1
     24: r8 = r8 + r24 ; Increment i
     25: jump for_loop_7
     26: for_end_8:
     27: r25 = load distance
     28: return r25

Function ...examples.zvdb_lut_simple.demo_lut() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "Popcount LUT Demo
" (18 chars via loop)
      2: UNKNOWN_OP_88
      3: UNKNOWN_OP_86 ; Print "=================

" (19 chars via loop)
      4: UNKNOWN_OP_88
      5: UNKNOWN_OP_86 ; Print "Testing known values:
" (22 chars via loop)
      6: r4 = 0
      7: r5 = call popcount_lut_lookup
      8: UNKNOWN_OP_81
      9: r6 = 15
     10: r7 = call popcount_lut_lookup
     11: UNKNOWN_OP_81
     12: r8 = 85
     13: r9 = call popcount_lut_lookup
     14: UNKNOWN_OP_81
     15: r10 = 170
     16: r11 = call popcount_lut_lookup
     17: UNKNOWN_OP_81
     18: r12 = 255
     19: r13 = call popcount_lut_lookup
     20: UNKNOWN_OP_81
     21: return

Function ...examples.zvdb_lut_simple.show_lut() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "
LUT Contents (sample):
" (24 chars via loop)
      2: UNKNOWN_OP_88
      3: UNKNOWN_OP_86 ; Print "======================
" (23 chars via loop)
      4: r3 = load popcount_lut
      5: r4 = 0
      6: LOAD_INDEX ; Load array element (u8)
      7: UNKNOWN_OP_81
      8: r6 = load popcount_lut
      9: r7 = 1
     10: LOAD_INDEX ; Load array element (u8)
     11: UNKNOWN_OP_81
     12: r9 = load popcount_lut
     13: r10 = 3
     14: LOAD_INDEX ; Load array element (u8)
     15: UNKNOWN_OP_81
     16: r12 = load popcount_lut
     17: r13 = 7
     18: LOAD_INDEX ; Load array element (u8)
     19: UNKNOWN_OP_81
     20: r15 = load popcount_lut
     21: r16 = 15
     22: LOAD_INDEX ; Load array element (u8)
     23: UNKNOWN_OP_81
     24: r18 = load popcount_lut
     25: r19 = 31
     26: LOAD_INDEX ; Load array element (u8)
     27: UNKNOWN_OP_81
     28: r21 = load popcount_lut
     29: r22 = 63
     30: LOAD_INDEX ; Load array element (u8)
     31: UNKNOWN_OP_81
     32: r24 = load popcount_lut
     33: r25 = 127
     34: LOAD_INDEX ; Load array element (u8)
     35: UNKNOWN_OP_81
     36: return

Function ...examples.zvdb_lut_simple.test_vectors() -> void
  @smc
  Locals:
    r3 = vec1: [32]u8
    r4 = vec2: [32]u8
    r31 = dist: u16
    r43 = similarity: i16
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "
Vector Similarity Test:
" (25 chars via loop)
      2: UNKNOWN_OP_88
      3: UNKNOWN_OP_86 ; Print "======================
" (23 chars via loop)
      4: r5 = 0
      5: r6 = 32
      6: r7 = r5 ; Initialize loop variable i
      7: for_loop_9:
      8: r8 = r7 < r6 ; Check i < end
      9: jump_if_not r8, for_end_10
     10: r9 = load i
     11: r10 = 1
     12: r11 = r9 & r10
     13: r12 = 0
     14: r13 = r11 == r12
     15: jump_if_not r13, else_11
     16: r14 = 85
     17: r15 = load vec1
     18: r16 = load i
     19: r17 = r15 + r16 ; Calculate array element address
     20: UNKNOWN_OP_67 ; Store to array[index] (u8)
     21: r18 = 170
     22: r19 = load vec2
     23: r20 = load i
     24: r21 = r19 + r20 ; Calculate array element address
     25: UNKNOWN_OP_67 ; Store to array[index] (u8)
     26: jump end_if_12
     27: else_11:
     28: r22 = 255
     29: r23 = load vec1
     30: r24 = load i
     31: r25 = r23 + r24 ; Calculate array element address
     32: UNKNOWN_OP_67 ; Store to array[index] (u8)
     33: r26 = 0
     34: r27 = load vec2
     35: r28 = load i
     36: r29 = r27 + r28 ; Calculate array element address
     37: UNKNOWN_OP_67 ; Store to array[index] (u8)
     38: end_if_12:
     39: r30 = 1
     40: r7 = r7 + r30 ; Increment i
     41: jump for_loop_9
     42: for_end_10:
     43: r32 = load vec1
     44: r33 = 0
     45: LOAD_INDEX ; Load array element (u8)
     46: UNKNOWN_OP_68
     47: r36 = load vec2
     48: r37 = 0
     49: LOAD_INDEX ; Load array element (u8)
     50: UNKNOWN_OP_68
     51: r40 = 32
     52: r41 = call hamming_with_lut
     53: store , r41
     54: UNKNOWN_OP_88
     55: UNKNOWN_OP_86 ; Print "Hamming distance: " (18 chars via loop)
     56: UNKNOWN_OP_87 ; Direct print " bits
" (6 chars)
     57: r44 = 256
     58: r45 = load dist
     59: r46 = 1
     60: SHL
     61: r48 = r44 - r47
     62: store , r48
     63: UNKNOWN_OP_88
     64: UNKNOWN_OP_86 ; Print "Similarity score: " (18 chars via loop)
     65: UNKNOWN_OP_87 ; Direct print "
" (1 chars)
     66: return

Function ...examples.zvdb_lut_simple.main() -> void
  @smc
  Instructions:
      0: UNKNOWN_OP_88
      1: UNKNOWN_OP_86 ; Print "ZVDB with Popcount LUT
" (23 chars via loop)
      2: UNKNOWN_OP_88
      3: UNKNOWN_OP_86 ; Print "======================

" (24 chars via loop)
      4: UNKNOWN_OP_88
      5: UNKNOWN_OP_86 ; Print "Building lookup table...
" (25 chars via loop)
      6: r4 = call build_full_lut
      7: UNKNOWN_OP_88
      8: UNKNOWN_OP_86 ; Print "LUT ready (256 entries)!

" (26 chars via loop)
      9: r6 = call demo_lut
     10: r7 = call show_lut
     11: r8 = call test_vectors
     12: UNKNOWN_OP_88
     13: UNKNOWN_OP_86 ; Print "
â Performance Analysis:
" (30 chars via loop)
     14: UNKNOWN_OP_88
     15: UNKNOWN_OP_86 ; Print "   â¢ LUT lookup: ~15 T-states
" (35 chars via loop)
     16: UNKNOWN_OP_88
     17: UNKNOWN_OP_86 ; Print "   â¢ Bit loop: ~50 T-states
" (33 chars via loop)
     18: UNKNOWN_OP_88
     19: UNKNOWN_OP_86 ; Print "   â¢ Speedup: 3.3x faster!
" (32 chars via loop)
     20: UNKNOWN_OP_88
     21: UNKNOWN_OP_86 ; Print "   â¢ Memory: 256 bytes

" (29 chars via loop)
     22: UNKNOWN_OP_88
     23: UNKNOWN_OP_86 ; Print "Perfect for ZVDB vector search!
" (32 chars via loop)
     24: return

