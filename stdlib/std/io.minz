// MinZ Standard I/O Library
// Provides cross-platform I/O functions

// Print a single character
fun print_char(ch: u8) -> void {
    @abi("z80") {
        LD A, (HL)      ; Character already in A from parameter
        RST 10H         ; Z80 print character routine
    }
}

// Print unsigned 8-bit value in decimal
fun print_u8(value: u8) -> void {
    // Handle 100s digit
    if (value >= 100) {
        let hundreds: u8 = value / 100;
        print_char('0' + hundreds);
        value = value % 100;
    }
    
    // Handle 10s digit  
    if (value >= 10) {
        let tens: u8 = value / 10;
        print_char('0' + tens);
        value = value % 10;
    }
    
    // Always print ones digit
    print_char('0' + value);
}

// Print unsigned 16-bit value in decimal
fun print_u16(value: u16) -> void {
    // Maximum u16 is 65535 (5 digits)
    let digits: [u8; 5] = [0, 0, 0, 0, 0];
    let count: u8 = 0;
    
    // Handle zero case
    if (value == 0) {
        print_char('0');
        return;
    }
    
    // Extract digits in reverse order
    while (value > 0) {
        digits[count] = (value % 10) as u8;
        value = value / 10;
        count = count + 1;
    }
    
    // Print digits in correct order
    while (count > 0) {
        count = count - 1;
        print_char('0' + digits[count]);
    }
}

// Print string (length-prefixed)
fun print_string(str: String) -> void {
    @abi("z80") {
        ; HL points to string (length byte first)
        LD A, (HL)      ; Get length
        OR A            ; Check if zero
        RET Z           ; Return if empty
        LD B, A         ; Length in B for counter
        INC HL          ; Point to first character
    print_loop:
        LD A, (HL)      ; Get character
        RST 10H         ; Print it
        INC HL          ; Next character
        DJNZ print_loop ; Repeat for all characters
    }
}

// Print newline
fun print_newline() -> void {
    print_char(13);  // CR
    print_char(10);  // LF
}

// Print space
fun print_space() -> void {
    print_char(' ');
}

// Print hexadecimal byte
fun print_hex_u8(value: u8) -> void {
    // High nibble
    let high: u8 = value >> 4;
    if (high < 10) {
        print_char('0' + high);
    } else {
        print_char('A' + high - 10);
    }
    
    // Low nibble
    let low: u8 = value & 0x0F;
    if (low < 10) {
        print_char('0' + low);
    } else {
        print_char('A' + low - 10);
    }
}

// Print hexadecimal word
fun print_hex_u16(value: u16) -> void {
    print_hex_u8((value >> 8) as u8);
    print_hex_u8(value as u8);
}