; MinZ Intermediate Representation (MIR)
; Module: main

Function draw_horizontal_line(y: u8, color: u8, length: u8) -> void
  @smc
  Locals:
    r4 = x: u8
    r9 = addr: u16
  Instructions:
      0: r5 = 0
      1: store , r5
      2: loop_1:
      3: r6 = load x
      4: 10
      5: r8 = r6 < r7
      6: jump_if_not r8, end_loop_2
      7: r10 = 16384
      8: 10
      9: r12 = r10 + r11
     10: store , r12
     11: jump loop_1
     12: end_loop_2:
     13: return

Function animation_frame() -> void
  @smc
  Locals:
    r1 = frame_offset: u8
    r3 = sprite_addr: u16
  Instructions:
      0: r2 = 0
      1: store , r2
      2: r4 = 32768
      3: r5 = load frame_offset
      4: r6 = r4 + r5
      5: store , r6
      6: return

Function game_loop() -> void
  @smc
  Locals:
    r1 = player_lives: u8
    r3 = score: u16
    r5 = level: u8
    r7 = counter: u16
  Instructions:
      0: r2 = 3
      1: store , r2
      2: r4 = 0
      3: store , r4
      4: r6 = 1
      5: store , r6
      6: r8 = 0
      7: store , r8
      8: loop_3:
      9: r9 = load counter
     10: r10 = 100
     11: r11 = r9 < r10
     12: jump_if_not r11, end_loop_4
     13: r12 = load counter
     14: r13 = 50
     15: r14 = r12 == r13
     16: jump_if_not r14, else_5
     17: jump end_if_6
     18: else_5:
     19: end_if_6:
     20: r15 = load counter
     21: r16 = 75
     22: r17 = r15 == r16
     23: jump_if_not r17, else_7
     24: r18 = load player_lives
     25: r19 = 0
     26: r20 = r18 == r19
     27: jump_if_not r20, else_9
     28: jump end_if_10
     29: else_9:
     30: end_if_10:
     31: jump end_if_8
     32: else_7:
     33: end_if_8:
     34: jump loop_3
     35: end_loop_4:
     36: return

Function add_constant(x: u8) -> u8
  @smc
  Instructions:
      0: 10
      1: r3 = 42
      2: r4 = r2 + r3
      3: return r4

Function main() -> void
  @smc
  Locals:
    r1 = result: u8
  Instructions:
      0: r2 = 10
      1: r3 = call add_constant
      2: store , r3
      3: return

