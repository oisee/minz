; MinZ generated code
; Generated: 2025-07-07 22:55:57


; Code section
    ORG $8000


; Function: draw_horizontal_line
draw_horizontal_line:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r5 = 0
    LD A, 0
    LD ($F00A), A
    ; store , r5
    LD HL, ($F00A)
    LD ($F008), HL
    ; loop_1:
loop_1:
    ; r6 = load x
    LD HL, ($F000)
    LD ($F00C), HL
draw_horizontal_line_param_length:
    LD A, #00      ; SMC parameter length
    LD ($F00E), A
    ; r8 = r6 < r7
    LD HL, ($F00C)
    PUSH HL
    LD HL, ($F00E)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F010), HL
    ; jump_if_not r8, end_loop_2
    LD A, ($F010)
    OR A
    JP Z, end_loop_2
    ; r10 = 16384
    LD HL, 16384
    LD ($F014), HL
draw_horizontal_line_param_y:
    LD A, #00      ; SMC parameter y
    LD ($F016), A
    ; r12 = r10 + r11
    LD HL, ($F014)
    PUSH HL
    LD HL, ($F016)
    POP DE
    ADD HL, DE
    LD ($F018), HL
    ; store , r12
    LD HL, ($F018)
    LD ($F012), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    RET

; Function: animation_frame
animation_frame:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD ($F004), A
    ; store , r2
    LD HL, ($F004)
    LD ($F002), HL
    ; r4 = 32768
    LD HL, 32768
    LD ($F008), HL
    ; r5 = load frame_offset
    LD HL, ($F000)
    LD ($F00A), HL
    ; r6 = r4 + r5
    LD HL, ($F008)
    PUSH HL
    LD HL, ($F00A)
    POP DE
    ADD HL, DE
    LD ($F00C), HL
    ; store , r6
    LD HL, ($F00C)
    LD ($F006), HL
    ; return
    RET

; Function: game_loop
game_loop:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 3
    LD A, 3
    LD ($F004), A
    ; store , r2
    LD HL, ($F004)
    LD ($F002), HL
    ; r4 = 0
    LD A, 0
    LD ($F008), A
    ; store , r4
    LD HL, ($F008)
    LD ($F006), HL
    ; r6 = 1
    LD A, 1
    LD ($F00C), A
    ; store , r6
    LD HL, ($F00C)
    LD ($F00A), HL
    ; r8 = 0
    LD A, 0
    LD ($F010), A
    ; store , r8
    LD HL, ($F010)
    LD ($F00E), HL
    ; loop_3:
loop_3:
    ; r9 = load counter
    LD HL, ($F000)
    LD ($F012), HL
    ; r10 = 100
    LD A, 100
    LD ($F014), A
    ; r11 = r9 < r10
    LD HL, ($F012)
    PUSH HL
    LD HL, ($F014)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD ($F016), HL
    ; jump_if_not r11, end_loop_4
    LD A, ($F016)
    OR A
    JP Z, end_loop_4
    ; r12 = load counter
    LD HL, ($F000)
    LD ($F018), HL
    ; r13 = 50
    LD A, 50
    LD ($F01A), A
    ; r14 = r12 == r13
    LD HL, ($F018)
    PUSH HL
    LD HL, ($F01A)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    LD ($F01C), HL
    ; jump_if_not r14, else_5
    LD A, ($F01C)
    OR A
    JP Z, else_5
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; r15 = load counter
    LD HL, ($F000)
    LD ($F01E), HL
    ; r16 = 75
    LD A, 75
    LD ($F020), A
    ; r17 = r15 == r16
    LD HL, ($F01E)
    PUSH HL
    LD HL, ($F020)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    LD ($F022), HL
    ; jump_if_not r17, else_7
    LD A, ($F022)
    OR A
    JP Z, else_7
    ; r18 = load player_lives
    LD HL, ($F000)
    LD ($F024), HL
    ; r19 = 0
    LD A, 0
    LD ($F026), A
    ; r20 = r18 == r19
    LD HL, ($F024)
    PUSH HL
    LD HL, ($F026)
    POP DE
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    LD ($F028), HL
    ; jump_if_not r20, else_9
    LD A, ($F028)
    OR A
    JP Z, else_9
    ; jump end_if_10
    JP end_if_10
    ; else_9:
else_9:
    ; end_if_10:
end_if_10:
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; end_if_8:
end_if_8:
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; return
    RET

; Function: add_constant
add_constant:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
add_constant_param_x:
    LD A, #00      ; SMC parameter x
    LD ($F004), A
    ; r3 = 42
    LD A, 42
    LD ($F006), A
    ; r4 = r2 + r3
    LD HL, ($F004)
    PUSH HL
    LD HL, ($F006)
    POP DE
    ADD HL, DE
    LD ($F008), HL
    ; return r4
    LD HL, ($F008)
    RET

; Function: main
main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A
    ; r3 = call add_constant
    CALL add_constant
    LD ($F006), HL
    ; store , r3
    LD HL, ($F006)
    LD ($F002), HL
    ; return
    RET

    END main
