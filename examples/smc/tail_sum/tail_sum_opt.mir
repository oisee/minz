; MinZ Intermediate Representation (MIR)
; Module: main

Function sum_tail(n: u16, acc: u16) -> u16
  @smc
  @recursive
  Instructions:
      0: 10
      1: sum_tail_start:
      2: r4 = r4 ^ r4 ; XOR A,A (optimized from LD A,0)
      3: r5 = r3 == r4
      4: jump_if_not r5, else_1
      5: 10
      6: return r6
      7: else_1:
      8: 10
      9: 10
     10: 10
     11: jump sum_tail_start ; Tail recursion optimized

Function main() -> void
  @smc
  @recursive
  Locals:
    r1 = result: u16
  Instructions:
      0: r4 = call sum_tail
      1: store , r4
      2: return

