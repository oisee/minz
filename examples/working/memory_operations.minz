// Memory Operations Example
fun mem_set(dest: *u8, value: u8, count: u16) -> void {
    while count > 0 {
        *dest = value;
        dest = dest + 1;
        count = count - 1;
    }
}

fun mem_copy(dest: *u8, src: *u8, count: u16) -> void {
    while count > 0 {
        *dest = *src;
        dest = dest + 1;
        src = src + 1;
        count = count - 1;
    }
}

fun mem_compare(ptr1: *u8, ptr2: *u8, count: u16) -> i8 {
    while count > 0 {
        if *ptr1 != *ptr2 {
            if *ptr1 < *ptr2 {
                return -1;
            } else {
                return 1;
            }
        }
        ptr1 = ptr1 + 1;
        ptr2 = ptr2 + 1;
        count = count - 1;
    }
    return 0;
}

fun main() {
    let buffer1: [u8; 256];
    let buffer2: [u8; 256];
    
    mem_set(&buffer1[0], 0xFF, 256);
    mem_copy(&buffer2[0], &buffer1[0], 128);
    let result = mem_compare(&buffer1[0], &buffer2[0], 128);
}