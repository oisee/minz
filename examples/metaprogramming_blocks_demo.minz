// MinZ Metaprogramming Demo - Compile-Time Code Blocks

// @minz blocks are immediate, anonymous, one-time compile-time functions
// They execute during compilation and emit code

// Example 1: Generate getter functions
@minz[[[
    // This executes at compile time!
    for i in 0..4 {
        @emit("fun getter_{i}() -> u8 { return {i}; }")
    }
]]]

// The above generates:
// fun getter_0() -> u8 { return 0; }
// fun getter_1() -> u8 { return 1; }
// fun getter_2() -> u8 { return 2; }
// fun getter_3() -> u8 { return 3; }

// Example 2: Generate constants from computation
@minz[[[
    // Compute powers of 2 at compile time
    let mut val: u8 = 1;
    for i in 0..8 {
        @emit("const POWER_{i}: u8 = {val};")
        val = val * 2;
    }
]]]

// Example 3: Conditional code generation
@minz[[[
    let debug_mode = true;  // Set at compile time
    
    if debug_mode {
        @emit("fun debug_print(msg: string) -> void { @print(\"DEBUG: { msg }\"); }")
    } else {
        @emit("fun debug_print(msg: string) -> void { /* no-op */ }")
    }
]]]

// Example 4: Generate lookup table
@minz[[[
    @emit("const SQUARES: [u8; 16] = [")
    for i in 0..16 {
        let square = i * i;
        if square > 255 { square = 255; }  // Clamp to u8
        @emit("    {square},")
    }
    @emit("];")
]]]

// Main function to test generated code
fun main() -> void {
    // Use the generated getters
    let a = getter_0();  // Returns 0
    let b = getter_1();  // Returns 1
    let c = getter_2();  // Returns 2
    let d = getter_3();  // Returns 3
    
    @print("Getters: { a } { b } { c } { d }");
    
    // Use generated constants
    @print("Power of 2^3 = { POWER_3 }");  // Should be 8
    @print("Power of 2^5 = { POWER_5 }");  // Should be 32
    
    // Use conditional function
    debug_print("This is a debug message");
    
    // Use lookup table
    @print("5 squared = { SQUARES[5] }");  // Should be 25
    @print("12 squared = { SQUARES[12] }"); // Should be 144
}