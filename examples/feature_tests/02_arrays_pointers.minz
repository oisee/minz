// Test 02: Arrays and Pointers
// Tests: Fixed arrays, pointer operations, array indexing

fun test_arrays() -> bool {
    // Array declaration and initialization
    let arr: [u8; 5] = [1, 2, 3, 4, 5];
    
    // Array indexing
    if arr[0] != 1 { return false; }
    if arr[4] != 5 { return false; }
    
    // Array modification
    arr[2] = 10;
    if arr[2] != 10 { return false; }
    
    // Array length
    if len(arr) != 5 { return false; }
    
    return true;
}

fun test_pointers() -> bool {
    let val: u8 = 42;
    let ptr: *u8 = &val;
    
    // Pointer dereference
    if *ptr != 42 { return false; }
    
    // Pointer modification
    *ptr = 100;
    if val != 100 { return false; }
    
    return true;
}

fun test_array_pointers() -> bool {
    let arr: [u8; 3] = [10, 20, 30];
    let ptr: *[u8; 3] = &arr;
    
    // Access through pointer
    if (*ptr)[0] != 10 { return false; }
    if (*ptr)[2] != 30 { return false; }
    
    // Get pointer to element
    let elem_ptr: *u8 = &arr[1];
    if *elem_ptr != 20 { return false; }
    
    // Modify through pointer
    *elem_ptr = 25;
    if arr[1] != 25 { return false; }
    
    return true;
}

fun test_pointer_arithmetic() -> bool {
    let arr: [u8; 5] = [5, 10, 15, 20, 25];
    let ptr: *u8 = &arr[0];
    
    // Pointer increment (Z80 specific - manual arithmetic)
    // Note: MinZ doesn't have C-style pointer arithmetic yet
    // This would need inline assembly or future language support
    
    return true;
}

fun test_multidimensional_arrays() -> bool {
    // 2D array (array of arrays)
    let matrix: [[u8; 3]; 2] = [[1, 2, 3], [4, 5, 6]];
    
    if matrix[0][0] != 1 { return false; }
    if matrix[1][2] != 6 { return false; }
    
    // Modify element
    matrix[1][1] = 10;
    if matrix[1][1] != 10 { return false; }
    
    return true;
}

fun main() -> u8 {
    if !test_arrays() { return 1; }
    if !test_pointers() { return 2; }
    if !test_array_pointers() { return 3; }
    if !test_pointer_arithmetic() { return 4; }
    if !test_multidimensional_arrays() { return 5; }
    
    return 0;  // All tests passed
}