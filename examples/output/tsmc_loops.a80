; MinZ generated code
; Generated: 2025-07-30 12:27:36


; Data section
    ORG $F000

...examples.tsmc_loops.i:
    DW 0

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.tsmc_loops.sum_array_tsmc
...examples.tsmc_loops.sum_array_tsmc:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r4 = 0
    LD A, 0
    ; Register 4 already in A
    ; store , r4
    LD ($F006), HL
    ; r6 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; store , r6
    LD ($F00A), HL
    ; loop_1:
loop_1:
    ; r7 = load i
    LD HL, ($F00A)
...examples.tsmc_loops.sum_array_tsmc_param_count:
    LD HL, #0000   ; SMC parameter count
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = r7 < r8
    LD D, H
    LD E, L
    LD HL, ($F010)    ; Virtual register 8 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD B, H
    LD C, L
    ; jump_if_not r9, end_loop_2
    LD A, C
    OR A
    JP Z, end_loop_2
    ; r10 = load sum
    LD HL, ($F006)
; TSMC reference parameter arr
arr$immOP:
    LD HL, 0000      ; TSMC ref address for arr
arr$imm0 EQU arr$immOP+1
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r12 = *r11
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r13 = r10 + r12
    LD D, H
    LD E, L
    ADD HL, DE
    ; store sum, r13
    LD ($F006), HL
    LD HL, (arr$imm0) ; Reload TSMC ref address
    ; r15 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r16 = r14 + r15
    LD D, H
    LD E, L
    ; Register 15 already in HL
    ADD HL, DE
    LD ($F020), HL    ; Virtual register 16 to memory
    ; Update TSMC reference arr
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD (arr$imm0), HL    ; Update TSMC reference immediate
    ; r17 = load i
    LD HL, ($F00A)
    ; Register 17 already in HL
    ; r18 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r19 = r17 + r18
    ; Register 17 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F026), HL    ; Virtual register 19 to memory
    ; store i, r19
    LD HL, ($F026)    ; Virtual register 19 from memory
    LD ($F00A), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r20 = load sum
    LD HL, ($F006)
    ; Register 20 already in HL
    ; return r20
    ; Register 20 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.tsmc_loops.find_max_tsmc
...examples.tsmc_loops.find_max_tsmc:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
...examples.tsmc_loops.find_max_tsmc_param_count:
    LD HL, #0000   ; SMC parameter count
    ; Register 3 already in HL
    ; r4 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r5 = r3 == r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r5, else_3
    LD A, H
    OR A
    JP Z, else_3
    ; r6 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; return r6
    RET
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
; TSMC reference parameter arr
arr$immOP:
    LD HL, 0000      ; TSMC ref address for arr
arr$imm0 EQU arr$immOP+1
    ; r9 = *r8
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; store , r9
    LD A, L
    LD ($F00E), A
    LD HL, (arr$imm0) ; Reload TSMC ref address
    LD ($F014), HL    ; Virtual register 10 to memory
    ; r11 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r12 = r10 + r11
    LD HL, ($F014)    ; Virtual register 10 from memory
    LD D, H
    LD E, L
    ; Register 11 already in HL
    ADD HL, DE
    ; Update TSMC reference arr
    LD (arr$imm0), HL    ; Update TSMC reference immediate
    ; r14 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; store , r14
    LD ($F01A), HL
    ; loop_5:
loop_5:
    ; r15 = load i
    LD HL, ($F01A)
    LD HL, (...examples.tsmc_loops.find_max_tsmc_param_count)
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = r15 < r16
    LD D, H
    LD E, L
    LD HL, ($F020)    ; Virtual register 16 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; Register 17 already in HL
    ; jump_if_not r17, end_loop_6
    LD A, L
    OR A
    JP Z, end_loop_6
    LD HL, (arr$imm0) ; Reload TSMC ref address
    LD ($F024), HL    ; Virtual register 18 to memory
    ; r19 = *r18
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r20 = load max
    LD A, ($F00E)
    LD L, A         ; Store to physical register L
    ; r21 = r19 > r20
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L8
    JP P, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; Register 21 already in HL
    ; jump_if_not r21, else_7
    LD A, L
    OR A
    JP Z, else_7
    LD HL, (arr$imm0) ; Reload TSMC ref address
    ; r23 = *r22
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; store max, r23
    LD A, L
    LD ($F00E), A
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; end_if_8:
end_if_8:
    LD HL, (arr$imm0) ; Reload TSMC ref address
    LD ($F030), HL    ; Virtual register 24 to memory
    ; r25 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r26 = r24 + r25
    LD HL, ($F030)    ; Virtual register 24 from memory
    LD D, H
    LD E, L
    ; Register 25 already in HL
    ADD HL, DE
    ; Update TSMC reference arr
    LD (arr$imm0), HL    ; Update TSMC reference immediate
    ; r27 = load i
    LD HL, ($F01A)
    ; r28 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r29 = r27 + r28
    LD D, H
    LD E, L
    ; Register 28 already in HL
    ADD HL, DE
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; store i, r29
    LD HL, ($F03A)    ; Virtual register 29 from memory
    LD ($F01A), HL
    ; jump loop_5
    JP loop_5
    ; end_loop_6:
end_loop_6:
    ; r30 = load max
    LD A, ($F00E)
    LD L, A         ; Store to HL (low byte)
    ; return r30
    ; Register 30 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.tsmc_loops.strcmp_tsmc
...examples.tsmc_loops.strcmp_tsmc:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; loop_9:
loop_9:
; TSMC reference parameter s1
s1$immOP:
    LD HL, 0000      ; TSMC ref address for s1
s1$imm0 EQU s1$immOP+1
    ; r4 = *r3
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; r5 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    LD HL, (s1$imm0) ; Reload TSMC ref address
    ; r7 = *r6
    LD A, (HL)
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = &r7
    ; Address-of operation for register r7
    LD HL, $F00E  ; Variable address
    ; r9 = r5 & r8
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; Register 9 already in HL
    ; r10 = r4 != r9
    ; Register 4 already in HL
    LD D, H
    LD E, L
    ; Register 9 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
; TSMC reference parameter s2
s2$immOP:
    LD HL, 0000      ; TSMC ref address for s2
s2$imm0 EQU s2$immOP+1
    ; r12 = *r11
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r13 = r10 == r12
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    ; Register 13 already in HL
    ; jump_if_not r13, end_loop_10
    LD A, L
    OR A
    JP Z, end_loop_10
    LD HL, (s1$imm0) ; Reload TSMC ref address
    ; Register 14 already in HL
    ; r15 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r16 = r14 + r15
    ; Register 14 already in HL
    LD D, H
    LD E, L
    ; Register 15 already in HL
    ADD HL, DE
    ; Update TSMC reference s1
    LD (s1$imm0), HL    ; Update TSMC reference immediate
    LD HL, (s2$imm0) ; Reload TSMC ref address
    ; Register 17 already in HL
    ; r18 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r19 = r17 + r18
    ; Register 17 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Update TSMC reference s2
    LD (s2$imm0), HL    ; Update TSMC reference immediate
    ; jump loop_9
    JP loop_9
    ; end_loop_10:
end_loop_10:
    LD HL, (s1$imm0) ; Reload TSMC ref address
    ; r21 = *r20
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    LD HL, (s2$imm0) ; Reload TSMC ref address
    ; r23 = *r22
    LD A, (HL)
    LD ($F02E), A     ; Virtual register 23 to memory
    ; r24 = r21 < r23
    ; Register 21 already in HL
    LD D, H
    LD E, L
    LD HL, ($F02E)    ; Virtual register 23 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L13
    LD HL, 0
    JP .L14
.L13:
    LD HL, 1
.L14:
    ; jump_if_not r24, else_11
    LD A, L
    OR A
    JP Z, else_11
    ; r25 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r26 = -r25
    ; Register 25 already in HL
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; return r26
    RET
    ; jump end_if_12
    JP end_if_12
    ; else_11:
else_11:
    LD HL, (s1$imm0) ; Reload TSMC ref address
    ; r28 = *r27
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    LD HL, (s2$imm0) ; Reload TSMC ref address
    ; r30 = *r29
    LD A, (HL)
    LD ($F03C), A     ; Virtual register 30 to memory
    ; r31 = r28 > r30
    ; Register 28 already in HL
    LD D, H
    LD E, L
    LD HL, ($F03C)    ; Virtual register 30 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L16
    JP P, .L15
    LD HL, 0
    JP .L16
.L15:
    LD HL, 1
.L16:
    ; jump_if_not r31, else_13
    LD A, L
    OR A
    JP Z, else_13
    ; r32 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; return r32
    ; Register 32 already in HL
    RET
    ; jump end_if_14
    JP end_if_14
    ; else_13:
else_13:
    ; r33 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; return r33
    RET
    ; end_if_14:
end_if_14:
    ; end_if_12:
end_if_12:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.tsmc_loops.count_char_tsmc
...examples.tsmc_loops.count_char_tsmc:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r4 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r4
    LD ($F006), HL
    ; loop_15:
loop_15:
; TSMC reference parameter str
str$immOP:
    LD HL, 0000      ; TSMC ref address for str
str$imm0 EQU str$immOP+1
    ; r6 = *r5
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r7 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r8 = r6 != r7
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L17
    LD HL, 0
    JP .L18
.L17:
    LD HL, 1
.L18:
    ; Register 8 already in HL
    ; jump_if_not r8, end_loop_16
    LD A, L
    OR A
    JP Z, end_loop_16
    LD HL, (str$imm0) ; Reload TSMC ref address
    ; r10 = *r9
    LD A, (HL)
    LD L, A         ; Store to physical register L
...examples.tsmc_loops.count_char_tsmc_param_ch:
    LD HL, #0000   ; SMC parameter ch (u8->u16)
    ; r12 = r10 == r11
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L19
    LD HL, 0
    JP .L20
.L19:
    LD HL, 1
.L20:
    ; jump_if_not r12, else_17
    LD A, H
    OR A
    JP Z, else_17
    ; r13 = load count
    LD HL, ($F006)
    ; Register 13 already in HL
    ; r14 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r15 = r13 + r14
    ; Register 13 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; store count, r15
    LD HL, ($F01E)    ; Virtual register 15 from memory
    LD ($F006), HL
    ; jump end_if_18
    JP end_if_18
    ; else_17:
else_17:
    ; end_if_18:
end_if_18:
    LD HL, (str$imm0) ; Reload TSMC ref address
    ; Register 16 already in HL
    ; r17 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r18 = r16 + r17
    ; Register 16 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F024), HL    ; Virtual register 18 to memory
    ; Update TSMC reference str
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD (str$imm0), HL    ; Update TSMC reference immediate
    ; jump loop_15
    JP loop_15
    ; end_loop_16:
end_loop_16:
    ; r19 = load count
    LD HL, ($F006)
    ; Register 19 already in HL
    ; return r19
    ; Register 19 already in HL
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
