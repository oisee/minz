; MinZ generated code
; Generated: 2025-07-30 12:27:35


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.recursion_examples.factorial
...examples.recursion_examples.factorial:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
...examples.recursion_examples.factorial_param_n:
    LD HL, #0000   ; SMC parameter n (u8->u16)
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    LD A, (...examples.recursion_examples.factorial_param_n)
    LD E, A         ; Store to physical register E
    LD A, (...examples.recursion_examples.factorial_param_n)
    LD H, A         ; Store to physical register H
    ; r8 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r9 = r7 - r8
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; r10 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL factorial
    ; r11 = r6 * r10
    ; 16-bit multiplication
    LD (mul_src1_2), HL  ; Save multiplicand
    LD (mul_src2_2), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_2)  ; DE = multiplicand
    LD BC, (mul_src2_2)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_2
.mul16_loop_2:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_2
.mul16_done_2:
mul_src1_2: DW 0
mul_src2_2: DW 0
    ; Register 11 already in HL
    ; return r11
    ; Register 11 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.recursion_examples.gcd
...examples.recursion_examples.gcd:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
...examples.recursion_examples.gcd_param_b:
    LD HL, #0000   ; SMC parameter b (u8->u16)
    ; r4 = 0
    LD A, 0
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = r3 == r4
    LD D, H
    LD E, L
    LD HL, ($F008)    ; Virtual register 4 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    ; jump_if_not r5, else_3
    LD A, H
    OR A
    JP Z, else_3
...examples.recursion_examples.gcd_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
    ; return r6
    RET
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    LD A, (...examples.recursion_examples.gcd_param_b)
    LD ($F00E), A     ; Virtual register 7 to memory
    LD A, (...examples.recursion_examples.gcd_param_a)
    LD H, A         ; Store to physical register H
    LD A, (...examples.recursion_examples.gcd_param_b)
    LD L, A         ; Store to physical register L
    ; r10 = r8 % r9
    ; 8-bit modulo
    LD A, H
    LD D, A       ; D = dividend
    LD A, L
    LD E, A       ; E = divisor
    OR A          ; Check for divide by zero
    JR Z, .mod_by_zero_5
    LD A, D       ; A = dividend
.mod_loop_5:
    CP E          ; Compare with divisor
    JR C, .mod_done_5
    SUB E         ; Subtract divisor
    JR .mod_loop_5
.mod_by_zero_5:
    LD A, 0       ; Return 0 for modulo by zero
.mod_done_5:
    LD L, A       ; Result (remainder) in L
    LD H, 0
    ; Register 10 already in HL
    ; r11 = call gcd
    ; Call to gcd (args: 2)
    ; Stack-based parameter passing
    ; Register 10 already in HL
    PUSH HL       ; Argument 1
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL gcd
    ; return r11
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.recursion_examples.binary_search
...examples.recursion_examples.binary_search:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -4
    ADD HL, SP
    LD SP, HL
    ; Parameter arr from stack
    LD L, (IX+4)
    LD H, (IX+5)
    LD (IX-2), L
    LD (IX-1), H
    ; Parameter target from stack
    LD L, (IX+6)
    LD H, (IX+7)
    LD (IX-4), L
    LD (IX-3), H
    ; Parameter left from stack
    LD L, (IX+8)
    LD H, (IX+9)
    LD (IX-6), L
    LD (IX-5), H
    ; Parameter right from stack
    LD L, (IX+10)
    LD H, (IX+11)
    LD (IX-8), L
    LD (IX-7), H
    ; r5 = param left
    ; Load parameter left
    ; r6 = param right
    ; Load parameter right
    ; r7 = r5 > r6
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L8
    JP P, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; jump_if_not r7, else_5
    LD A, ($F00E)     ; Virtual register 7 from memory
    OR A
    JP Z, else_5
    ; r8 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r9 = -r8
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; return r9
    LD SP, IX
    POP IX
    RET
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; r11 = param left
    ; Load parameter left
    ; r12 = param right
    ; Load parameter right
    ; r13 = param left
    ; Load parameter left
    ; r14 = r12 - r13
    LD D, H
    LD E, L
    LD HL, ($F01A)    ; Virtual register 13 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; r15 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; r16 = r14 / r15
    ; 8-bit division
    LD A, H
    LD D, A       ; D = dividend
    LD A, L
    LD E, A       ; E = divisor
    OR A          ; Check for divide by zero
    JR Z, .div_by_zero_8
    LD B, 0       ; B = quotient
    LD A, D       ; A = remainder
.div_loop_8:
    CP E          ; Compare remainder with divisor
    JR C, .div_done_8
    SUB E         ; Subtract divisor
    INC B         ; Increment quotient
    JR .div_loop_8
.div_by_zero_8:
    LD B, 0       ; Return 0 for divide by zero
.div_done_8:
    LD L, B       ; Result in L
    LD H, 0
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = r11 + r16
    LD D, H
    LD E, L
    LD HL, ($F020)    ; Virtual register 16 from memory
    ADD HL, DE
    ; store , r17
    LD (IX-2), L
    LD (IX-1), H
    ; r19 = param arr
    ; Load parameter arr
    ; r20 = load mid
    LD L, (IX-2)
    LD H, (IX-1)
    ; Register 20 already in HL
    ; r21 = r19 + r20
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ; Register 20 already in HL
    ADD HL, DE
    ; r22 = *r21
    LD A, (HL)
    LD ($F02C), A     ; Virtual register 22 to memory
    ; store , r22
    LD HL, ($F02C)    ; Virtual register 22 from memory
    LD (IX-4), L
    LD (IX-3), H
    ; r23 = load value
    LD L, (IX-4)
    LD H, (IX-3)
    ; Register 23 already in HL
    ; r24 = param target
    ; Load parameter target
    ; r25 = r23 == r24
    ; Register 23 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L10
    LD HL, 0
    JP .L11
.L10:
    LD HL, 1
.L11:
    LD ($F032), HL    ; Virtual register 25 to memory
    ; jump_if_not r25, else_7
    LD A, ($F032)     ; Virtual register 25 from memory
    OR A
    JP Z, else_7
    ; r26 = load mid
    LD L, (IX-2)
    LD H, (IX-1)
    ; Register 26 already in HL
    ; return r26
    ; Register 26 already in HL
    LD SP, IX
    POP IX
    RET
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; r27 = load value
    LD L, (IX-4)
    LD H, (IX-3)
    ; r28 = param target
    ; Load parameter target
    ; r29 = r27 < r28
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L12
    LD HL, 0
    JP .L13
.L12:
    LD HL, 1
.L13:
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; jump_if_not r29, else_9
    LD A, ($F03A)     ; Virtual register 29 from memory
    OR A
    JP Z, else_9
    ; r30 = param arr
    ; Load parameter arr
    ; r31 = param target
    ; Load parameter target
    ; r32 = load mid
    LD L, (IX-2)
    LD H, (IX-1)
    ; r33 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r34 = r32 + r33
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F044), HL    ; Virtual register 34 to memory
    ; r35 = param right
    ; Load parameter right
    ; r36 = call binary_search
    ; Call to binary_search (args: 4)
    ; Stack-based parameter passing
    ; Register 35 already in HL
    PUSH HL       ; Argument 3
    LD HL, ($F044)    ; Virtual register 34 from memory
    PUSH HL       ; Argument 2
    ; Register 31 already in HL
    PUSH HL       ; Argument 1
    LD H, B
    LD L, C
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL binary_search
    ; return r36
    LD SP, IX
    POP IX
    RET
    ; jump end_if_10
    JP end_if_10
    ; else_9:
else_9:
    ; r37 = param arr
    ; Load parameter arr
    ; r38 = param target
    ; Load parameter target
    ; r39 = param left
    ; Load parameter left
    ; r40 = load mid
    LD L, (IX-2)
    LD H, (IX-1)
    ; r41 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r42 = r40 - r41
    LD D, H
    LD E, L
    ; Register 41 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    LD ($F054), HL    ; Virtual register 42 to memory
    ; r43 = call binary_search
    ; Call to binary_search (args: 4)
    ; Stack-based parameter passing
    LD HL, ($F054)    ; Virtual register 42 from memory
    PUSH HL       ; Argument 3
    PUSH HL       ; Argument 2
    LD HL, ($F04C)    ; Virtual register 38 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F04A)    ; Virtual register 37 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL binary_search
    ; Register 43 already in HL
    ; return r43
    ; Register 43 already in HL
    LD SP, IX
    POP IX
    RET
    ; end_if_10:
end_if_10:
    ; end_if_8:
end_if_8:
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
