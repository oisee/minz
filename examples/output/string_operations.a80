; MinZ generated code
; Generated: 2025-08-01 09:30:35


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.string_operations.str_length
...examples.string_operations.str_length:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    ; r3 = 0
    LD A, 0
    ; Register 3 already in A
    ; store , r3
    LD ($F000), HL
    ; loop_1:
loop_1:
    ; r4 = param str
    ; Load parameter str
    ; r5 = *r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD A, (HL)
    LD C, A         ; Store to physical register C
    ; r6 = 0
    LD A, 0
    LD D, A         ; Store to physical register D
    ; r7 = r5 != r6
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r7, end_loop_2
    LD A, E
    OR A
    JP Z, end_loop_2
    ; r8 = load len
    LD HL, ($F000)
    ; r9 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    LD D, H
    LD E, L
    ; store len, r10
    LD H, D
    LD L, E
    LD ($F000), HL
    ; r11 = param str
    ; Load parameter str
    ; r12 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r13 = r11 + r12
    LD H, B
    LD L, C
    LD D, H
    LD E, L
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; store str, r13
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD ($F000), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r14 = load len
    LD HL, ($F000)
    ; Register 14 already in HL
    ; return r14
    ; Register 14 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.string_operations.str_copy
...examples.string_operations.str_copy:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    ; Register 1 already in HL
    EX DE, HL     ; Get parameter src from DE
    ; Register 2 already in HL
    ; loop_3:
loop_3:
    ; r3 = param src
    ; Load parameter src
    ; r4 = *r3
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r5 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; r6 = r4 != r5
    LD D, H
    LD E, L
    ; Register 5 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r6, end_loop_4
    LD A, H
    OR A
    JP Z, end_loop_4
    ; r7 = param src
    ; Load parameter src
    ; r8 = *r7
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r9 = param dest
    ; Load parameter dest
    ; Store through pointer
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    ; r10 = param dest
    ; Load parameter dest
    ; r11 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r12 = r10 + r11
    ; Register 10 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F018), HL    ; Virtual register 12 to memory
    ; store dest, r12
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD ($F000), HL
    ; r13 = param src
    ; Load parameter src
    ; r14 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r15 = r13 + r14
    ; Register 13 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; store src, r15
    LD ($F000), HL
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r16 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r17 = param dest
    ; Load parameter dest
    ; Store through pointer
    ; Register 17 already in HL
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
