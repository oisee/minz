; MinZ Intermediate Representation (MIR)
; Module: main

Function ...examples.test_bit_field_comprehensive.test_8bit_fields() -> void
  Locals:
    r1 = raw: u8
    r3 = flags: bits<u8>
    r5 = c: u8
    r8 = z: u8
    r11 = s: u8
    r20 = old_sign: u8
    r25 = new_sign: u8
  Instructions:
      0: r2 = 130
      1: store , r2
      2: r4 = load raw
      3: store , r4
      4: r6 = load flags
      5: 17 ; Load bit field carry (offset 0, width 1)
      6: store , r7
      7: r9 = load flags
      8: 17 ; Load bit field zero (offset 6, width 1)
      9: store , r10
     10: r12 = load flags
     11: 17 ; Load bit field sign (offset 7, width 1)
     12: store , r13
     13: r14 = 1
     14: r15 = load flags
     15: 18 ; Store bit field zero (offset 6, width 1)
     16: r16 = 0
     17: r17 = load flags
     18: 18 ; Store bit field carry (offset 0, width 1)
     19: r18 = 1
     20: r19 = load flags
     21: 18 ; Store bit field parity (offset 2, width 1)
     22: r21 = load flags
     23: 17 ; Load bit field sign (offset 7, width 1)
     24: store , r22
     25: r23 = 0
     26: r24 = load flags
     27: 18 ; Store bit field sign (offset 7, width 1)
     28: r26 = load flags
     29: 17 ; Load bit field sign (offset 7, width 1)
     30: store , r27
     31: r28 = load flags
     32: 17 ; Load bit field carry (offset 0, width 1)
     33: r30 = load flags
     34: 17 ; Load bit field zero (offset 6, width 1)
     35: r32 = r29 | r31
     36: r33 = load flags
     37: 18 ; Store bit field half_carry (offset 4, width 1)
     38: return

Function ...examples.test_bit_field_comprehensive.test_16bit_fields() -> void
  @smc
  Locals:
    r1 = raw: u16
    r3 = sprite: bits<u16>
    r11 = x: u16
  Instructions:
      0: r2 = 0
      1: store , r2
      2: r4 = load raw
      3: store , r4
      4: r5 = 256
      5: r6 = load sprite
      6: 18 ; Store bit field x_coord (offset 0, width 9)
      7: r7 = 3
      8: r8 = load sprite
      9: 18 ; Store bit field palette_id (offset 9, width 3)
     10: r9 = 2
     11: r10 = load sprite
     12: 18 ; Store bit field priority (offset 12, width 2)
     13: r12 = load sprite
     14: 17 ; Load bit field x_coord (offset 0, width 9)
     15: store , r13
     16: r14 = load x
     17: r15 = 1
     18: r16 = r14 + r15
     19: r17 = load sprite
     20: 18 ; Store bit field x_coord (offset 0, width 9)
     21: r18 = load sprite
     22: 17 ; Load bit field h_flip (offset 14, width 1)
     23: r20 = 0
     24: r21 = r19 == r20
     25: jump_if_not r21, else_1
     26: r22 = 1
     27: r23 = load sprite
     28: 18 ; Store bit field h_flip (offset 14, width 1)
     29: r24 = 0
     30: r25 = load sprite
     31: 18 ; Store bit field v_flip (offset 15, width 1)
     32: jump end_if_2
     33: else_1:
     34: end_if_2:
     35: return

Function ...examples.test_bit_field_comprehensive.test_field_expressions() -> void
  @smc
  Locals:
    r1 = flags: bits<u8>
    r3 = result: u8
  Instructions:
      0: r2 = 0
      1: store , r2
      2: r4 = load flags
      3: 17 ; Load bit field carry (offset 0, width 1)
      4: r6 = load flags
      5: 17 ; Load bit field zero (offset 6, width 1)
      6: r8 = 2
      7: r9 = r7 * r8
      8: r10 = r5 + r9
      9: r11 = load flags
     10: 17 ; Load bit field sign (offset 7, width 1)
     11: r13 = 4
     12: r14 = r12 * r13
     13: r15 = r10 + r14
     14: store , r15
     15: r16 = load flags
     16: 17 ; Load bit field zero (offset 6, width 1)
     17: r18 = 1
     18: r19 = r17 == r18
     19: jump_if_not r19, else_3
     20: r20 = 1
     21: r21 = load flags
     22: 18 ; Store bit field sign (offset 7, width 1)
     23: jump end_if_4
     24: else_3:
     25: end_if_4:
     26: r22 = 1
     27: r23 = load flags
     28: 18 ; Store bit field carry (offset 0, width 1)
     29: r24 = 1
     30: r25 = load flags
     31: 18 ; Store bit field zero (offset 6, width 1)
     32: r26 = 1
     33: r27 = load flags
     34: 18 ; Store bit field sign (offset 7, width 1)
     35: r28 = 0
     36: r29 = load flags
     37: 18 ; Store bit field parity (offset 2, width 1)
     38: return

Function ...examples.test_bit_field_comprehensive.main() -> void
  @smc
  Instructions:
      0: r1 = call test_8bit_fields
      1: r2 = call test_16bit_fields
      2: r3 = call test_field_expressions
      3: 83
      4: 82
      5: return

