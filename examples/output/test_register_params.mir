; MinZ Intermediate Representation (MIR)
; Module: main

Function ...examples.test_register_params.add_bytes(a: u8, b: u8) -> u8
  Instructions:
      0: 12
      1: 12
      2: r5 = r3 + r4
      3: return r5

Function ...examples.test_register_params.add_words(x: u16, y: u16) -> u16
  Instructions:
      0: 12
      1: 12
      2: r5 = r3 + r4
      3: return r5

Function ...examples.test_register_params.process(value: u8, ptr: *u8, count: u16) -> u8
  Locals:
    r4 = sum: u8
  Instructions:
      0: 12
      1: store , r5
      2: 12
      3: r7 = 1
      4: r8 = r6 + r7
      5: store ptr, r8
      6: return

Function ...examples.test_register_params.many_params(a: u8, b: u8, c: u8, d: u8, e: u8) -> u8
  @smc
  Instructions:
      0: 12
      1: 12
      2: r8 = r6 + r7
      3: 12
      4: r10 = r8 + r9
      5: 12
      6: r12 = r10 + r11
      7: 12
      8: r14 = r12 + r13
      9: return r14

Function ...examples.test_register_params.recursive_sum(n: u8) -> u16
  Instructions:
      0: 12
      1: r3 = 0
      2: r4 = r2 == r3
      3: jump_if_not r4, else_1
      4: r5 = 0
      5: return r5
      6: jump end_if_2
      7: else_1:
      8: end_if_2:
      9: 12
     10: 12
     11: r8 = 1
     12: r9 = r7 - r8
     13: r10 = call recursive_sum
     14: r11 = r6 + r10
     15: return r11

Function ...examples.test_register_params.main() -> void
  Locals:
    r1 = r1: u8
    r5 = r2: u16
    r9 = data: [5]u8
    r15 = r3: u8
    r23 = r4: u8
    r30 = r5: u16
  Instructions:
      0: r2 = 10
      1: r3 = 20
      2: r4 = call add_bytes
      3: store , r4
      4: r6 = 1000
      5: r7 = 2000
      6: r8 = call add_words
      7: store , r8
      8: r10 = 1
      9: r11 = 2
     10: r12 = 3
     11: r13 = 4
     12: r14 = 5
     13: r16 = 100
     14: r17 = load data
     15: r18 = 0
     16: 15 ; Load array element (u8)
     17: 58
     18: r21 = 5
     19: r22 = call process
     20: store , r22
     21: r24 = 1
     22: r25 = 2
     23: r26 = 3
     24: r27 = 4
     25: r28 = 5
     26: r29 = call many_params
     27: store , r29
     28: r31 = 10
     29: r32 = call recursive_sum
     30: store , r32
     31: return

