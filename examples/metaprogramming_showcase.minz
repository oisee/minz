// MinZ Metaprogramming Showcase
// Demonstrates all @ metaprogramming features

// 1. @define - Template expansion (preprocessor-style)
@define(BUFFER_SIZE, 256)
@define(MAX(a,b), ((a) > (b) ? (a) : (b)))

// 2. @lua - Compile-time Lua execution
@lua[[[
    -- Generate constants using Lua
    for i = 0, 3 do
        emit(string.format("const MASK_%d: u8 = %d;", i, 1 << i))
    end
]]]

// 3. @minz - Template metafunctions with substitution
@minz[[[
    fun add_{0}(a: u8, b: u8) -> u8 {
        return a + b;
    }
]]]("numbers")

@minz[[[
    fun print_{0}(val: {1}) -> void {
        @print("{0} value: { val }");
    }
]]]("score", "u16")

// 4. @mir - Direct MIR code generation  
fun fast_multiply_by_3(x: u8) -> u8 {
    @mir[[[
        r1 = load_param 0    ; Load x
        r2 = add r1, r1      ; Double it
        r3 = add r2, r1      ; Add original
        ret r3               ; Return x * 3
    ]]]
}

// 5. @print with string interpolation
fun demo_interpolation() -> void {
    let x = 42;
    let y = 7;
    @print("The answer is { x }, and y = { y }");
    @print("Sum: { x + y }, Product: { x * y }");
}

// 6. @if - Compile-time conditionals
const DEBUG = true;
fun conditional_code() -> u8 {
    return @if(DEBUG, 100, 50);
}

// 7. @error - Error handling metafunction
fun risky_operation?(value: u8) -> u8 ? ValueError {
    if value > 100 {
        @error(ValueError.OutOfRange);
    }
    return value * 2;
}

// Main demonstration
fun main() -> u8 {
    @print("=== MinZ Metaprogramming Showcase ===");
    
    // Test template-generated function
    let sum = add_numbers(5, 3);
    @print("add_numbers(5, 3) = { sum }");
    
    // Test MIR-generated function
    let triple = fast_multiply_by_3(7);
    @print("fast_multiply_by_3(7) = { triple }");
    
    // Test interpolation
    demo_interpolation();
    
    // Test conditional compilation
    let debug_val = conditional_code();
    @print("Conditional value: { debug_val }");
    
    // Test template-generated print function
    print_score(1234);
    
    // Test error handling
    let result = risky_operation?(50) ?? 0;
    @print("Safe operation result: { result }");
    
    @print("Buffer size is { BUFFER_SIZE }");
    @print("Masks: { MASK_0 }, { MASK_1 }, { MASK_2 }, { MASK_3 }");
    
    return 0;
}

// Error type for demonstrations
enum ValueError {
    OutOfRange,
    InvalidInput
}