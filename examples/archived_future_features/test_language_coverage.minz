// Test comprehensive language feature coverage

// Basic types and variables ✓
var global_u8: u8 = 42;
var global_u16: u16 = 1000;

// Structs ✓
struct Point {
    x: u8,
    y: u8
}

// Enums - let's test this
enum Color {
    Red = 1,
    Green = 2,
    Blue = 3
}

// Functions with parameters ✓
fun add_numbers(a: u8, b: u8) -> u8 {
    return a + b;
}

// For loops with ranges ✓
fun test_for_loops() -> u16 {
    var sum: u16 = 0;
    for i in 0..10 {
        sum = sum + i;
    }
    return sum;
}

// Array operations ✓
fun test_arrays() -> u8 {
    var arr: [5]u8;
    arr[0] = 10;
    arr[1] = 20;
    return arr[0] + arr[1];
}

// Struct operations ✓
fun test_structs() -> u8 {
    var p: Point;
    p.x = 15;
    p.y = 25;
    return p.x + p.y;
}

// While loops ✓
fun test_while() -> u8 {
    var i: u8 = 0;
    var sum: u8 = 0;
    while i < 5 {
        sum = sum + i;
        i = i + 1;
    }
    return sum;
}

// If statements ✓
fun test_if(x: u8) -> u8 {
    if x > 10 {
        return x * 2;
    } else {
        return x + 5;
    }
}

// Pointers and TSMC ✓
@abi("smc")
fun test_tsmc(ptr: *u8) -> u8 {
    var result: u8 = *ptr;
    ptr = ptr + 1;
    return result;
}

// Match expressions - let's test this
fun test_match(color: Color) -> u8 {
    match color {
        Color.Red => 1,
        Color.Green => 2,
        Color.Blue => 3
    }
}

// Range expressions - let's test this
fun test_range_expr() -> [10]u8 {
    var arr: [10]u8;
    var range: 0..10 = 0..10;  // Can we assign ranges?
    return arr;
}

// String literals
fun test_strings() -> *u8 {
    var hello: *u8 = "Hello, World!";
    return hello;
}

// Function pointers
fun test_function_pointers() -> u8 {
    var func_ptr: fun(u8, u8) -> u8 = add_numbers;
    return func_ptr(5, 10);
}

// Lua metaprogramming
fun test_lua() -> u8 {
    lua {
        return 42
    }
}

fun main() -> u16 {
    var result: u16 = 0;
    
    // Test what works
    result = result + test_for_loops();
    result = result + test_arrays();
    result = result + test_structs();
    result = result + test_while();
    result = result + test_if(15);
    
    return result;
}