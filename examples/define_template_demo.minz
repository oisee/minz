// @define Template Demo - Text substitution at compile time

// Define a template for creating entity types
@define(entity, health, damage)[[[
    struct {0} {
        health: u8 = {1}
        damage: u8 = {2}
    }
    
    fun spawn_{0}() -> {0} {
        return {0} { health: {1}, damage: {2} };
    }
]]]

// Use the template to generate multiple entity types
@define("Enemy", 100, 25)
@define("Boss", 500, 50)
@define("Player", 200, 30)

// The above generates:
// struct Enemy { health: u8 = 100, damage: u8 = 25 }
// fun spawn_Enemy() -> Enemy { return Enemy { health: 100, damage: 25 }; }
// struct Boss { health: u8 = 500, damage: u8 = 50 }
// fun spawn_Boss() -> Boss { return Boss { health: 500, damage: 50 }; }
// struct Player { health: u8 = 200, damage: u8 = 30 }
// fun spawn_Player() -> Player { return Player { health: 200, damage: 30 }; }

fun main() -> void {
    let enemy = spawn_Enemy();
    let boss = spawn_Boss();
    let player = spawn_Player();
    
    @print("Enemy health: { enemy.health }");
    @print("Boss health: { boss.health }");
    @print("Player health: { player.health }");
}