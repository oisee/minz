// Test bit field access

// ZX Spectrum screen attributes
type ScreenAttr = bits {
    ink: 3,      // Bits 0-2
    paper: 3,    // Bits 3-5
    bright: 1,   // Bit 6
    flash: 1     // Bit 7
};

// Global to force code generation
let mut g_result: u8 = 0

fn main() -> void {
    // Create a bit struct via cast
    let mut attr_value: u8 = 0x47  // 01000111 = bright=1, paper=0, ink=7
    let mut attr: ScreenAttr = attr_value as ScreenAttr
    
    // Test field read - extract ink color (should be 7)
    let ink_color: u8 = attr.ink
    
    // Store to global to prevent optimization
    g_result = ink_color
    
    // Test field write - set paper to 5
    attr.paper = 5
    
    // Convert back to see result
    let result: u8 = attr as u8
    g_result = result
}