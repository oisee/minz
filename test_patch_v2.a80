; MinZ generated code
; Generated: 2025-08-06 23:31:55


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_instruction_patching.add_numbers$u8$u8
test_instruction_patching.add_numbers$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_instruction_patching.add_numbers$u8$u8_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
test_instruction_patching.add_numbers$u8$u8_param_b:
    LD DE, #0000   ; SMC parameter b (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_instruction_patching.main
test_instruction_patching.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; r4 = 10
    LD A, 10
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = 20
    LD A, 20
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = call test_instruction_patching.add_numbers$u8$u8
    ; Call to test_instruction_patching.add_numbers$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL test_instruction_patching.add_numbers$u8$u8
    ; r7 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    ADD HL, DE
    ; store temp, r8
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; r10 = 30
    LD A, 30
    LD ($F014), A     ; Virtual register 10 to memory
    ; r11 = 40
    LD A, 40
    LD B, A         ; Store to physical register B
    ; r12 = 30
    LD A, 30
    LD ($F018), A     ; Virtual register 12 to memory
    ; r13 = 40
    LD A, 40
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r14 = call test_instruction_patching.add_numbers$u8$u8
    ; Call to test_instruction_patching.add_numbers$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL test_instruction_patching.add_numbers$u8$u8
    ; store stored_result, r14
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD ($F012), A
    ; r15 = load temp
    LD A, ($F002)
    LD B, A         ; Store to physical register B
    ; r16 = load stored_result
    LD A, ($F012)
    LD B, A         ; Store to physical register B
    ; r17 = r15 + r16
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r17
    RET

    END main
