; MinZ generated code
; Generated: 2025-07-28 07:45:41


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_true_smc.add
_examples_simple_true_smc_add:
; TRUE SMC function with immediate anchors
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    ; Register 3 already in A
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    LD B, A         ; Store to physical register B
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_true_smc.main
_examples_simple_true_smc_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r4 = call add
    ; Call to add (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ...examples.simple_true_smc.add
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (x_imm0), A        ; Patch x
    LD A, ($F006)     ; Virtual register 3 from memory
    LD (y_imm0), A        ; Patch y
    CALL ...examples.simple_true_smc.add
    ; store , r4
    LD ($F002), HL
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x_imm0           ; ...examples.simple_true_smc.add.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; ...examples.simple_true_smc.add.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

    END main
