; MinZ generated code
; Generated: 2025-07-28 08:45:59


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test3_param_reuse.process
_examples_test3_param_reuse_process:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 10
    LD A, 10
    LD B, A         ; Store to physical register B
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r5
    LD ($F000), HL
    ; r6 = param value
    ; Load parameter value
    ; r7 = 50
    LD A, 50
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = r6 > r7
    LD D, H
    LD E, L
    LD HL, ($F00E)    ; Virtual register 7 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L2
    JP P, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r8, else_1
    LD A, L
    OR A
    JP Z, else_1
    ; r9 = param value
    ; Load parameter value
    ; r10 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r11 = r9 * r10
    ; 8-bit multiplication
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD B, A       ; B = multiplicand
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; return r11
    LD SP, IX
    POP IX
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; r12 = load temp
    LD HL, ($F000)
    ; r13 = param value
    ; Load parameter value
    ; r14 = r12 + r13
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 14 already in HL
    ; return r14
    ; Register 14 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test3_param_reuse.main
_examples_test3_param_reuse_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 30
    LD A, 30
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = call process
    ; Call to process (args: 1)
    ; Register-based parameter passing
    LD A, ($F004)     ; Virtual register 2 from memory
    ; Parameter value in A
    ; Found function, UsesTrueSMC=false
    CALL process
    ; store , r3
    LD ($F002), HL
    ; r5 = 60
    LD A, 60
    LD L, A         ; Store to HL (low byte)
    ; r6 = call process
    ; Call to process (args: 1)
    ; Register-based parameter passing
    LD A, L
    ; Parameter value in A
    ; Found function, UsesTrueSMC=false
    CALL process
    ; store , r6
    LD ($F008), HL
    ; return
    RET

    END main
