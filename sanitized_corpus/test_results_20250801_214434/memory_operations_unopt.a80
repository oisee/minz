; MinZ generated code
; Generated: 2025-08-01 21:44:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.memory_operations.mem_set
.Users_alice_dev_minz_ts_examples_memory_operations_mem_set:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; loop_1:
loop_1:
.Users_alice_dev_minz_ts_examples_memory_operations_mem_set_param_count:
    LD BC, #0000   ; SMC parameter count
    LD H, B
    LD L, C        ; Move to HL for storage
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = 0
    LD A, 0
    ; Register 5 already in A
    ; r6 = r4 > r5
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L2
    JP P, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD B, H
    LD C, L
    ; jump_if_not r6, end_loop_2
    LD A, C
    OR A
    JP Z, end_loop_2
.Users_alice_dev_minz_ts_examples_memory_operations_mem_set_param_value:
    LD DE, #0000   ; SMC parameter value (u8->u16)
    EX DE, HL      ; Move to HL for storage
; TSMC reference parameter dest
dest_immOP:
    LD HL, 0000      ; TSMC ref address for dest
dest_imm0 EQU dest_immOP+1
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; Store through pointer
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    POP HL
    LD (HL), A
    LD HL, (dest_imm0) ; Reload TSMC ref address
    ; r10 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r11 = r9 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 11 already in HL
    ; store dest, r11
    ; Register 11 already in HL
    LD ($F000), HL
    LD HL, (.Users_alice_dev_minz_ts_examples_memory_operations_mem_set_param_count)
    ; Register 12 already in HL
    ; r13 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r14 = r12 - r13
    ; Register 12 already in HL
    LD D, H
    LD E, L
    ; Register 13 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; store count, r14
    LD ($F000), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.memory_operations.mem_copy
.Users_alice_dev_minz_ts_examples_memory_operations_mem_copy:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; loop_3:
loop_3:
.Users_alice_dev_minz_ts_examples_memory_operations_mem_copy_param_count:
    LD BC, #0000   ; SMC parameter count
    LD H, B
    LD L, C        ; Move to HL for storage
    ; Register 4 already in HL
    ; r5 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r6 = r4 > r5
    ; Register 4 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L4
    JP P, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r6, end_loop_4
    LD A, H
    OR A
    JP Z, end_loop_4
; TSMC reference parameter src
src_immOP:
    LD HL, 0000      ; TSMC ref address for src
src_imm0 EQU src_immOP+1
    ; r8 = *r7
    LD A, (HL)
    LD H, A         ; Store to physical register H
; TSMC reference parameter dest
dest_immOP:
    LD HL, 0000      ; TSMC ref address for dest
dest_imm0 EQU dest_immOP+1
    LD ($F012), HL    ; Virtual register 9 to memory
    ; Store through pointer
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    LD HL, (dest_imm0) ; Reload TSMC ref address
    ; Register 10 already in HL
    ; r11 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r12 = r10 + r11
    ; Register 10 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F018), HL    ; Virtual register 12 to memory
    ; store dest, r12
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD ($F000), HL
    LD HL, (src_imm0) ; Reload TSMC ref address
    ; Register 13 already in HL
    ; r14 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r15 = r13 + r14
    ; Register 13 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; store src, r15
    LD HL, ($F01E)    ; Virtual register 15 from memory
    LD ($F000), HL
    LD HL, (.Users_alice_dev_minz_ts_examples_memory_operations_mem_copy_param_count)
    ; Register 16 already in HL
    ; r17 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r18 = r16 - r17
    ; Register 16 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; store count, r18
    LD ($F000), HL
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.memory_operations.mem_compare
.Users_alice_dev_minz_ts_examples_memory_operations_mem_compare:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; loop_5:
loop_5:
.Users_alice_dev_minz_ts_examples_memory_operations_mem_compare_param_count:
    LD BC, #0000   ; SMC parameter count
    LD H, B
    LD L, C        ; Move to HL for storage
    ; Register 4 already in HL
    ; r5 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r6 = r4 > r5
    ; Register 4 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L6
    JP P, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r6, end_loop_6
    LD A, H
    OR A
    JP Z, end_loop_6
; TSMC reference parameter ptr1
ptr1_immOP:
    LD HL, 0000      ; TSMC ref address for ptr1
ptr1_imm0 EQU ptr1_immOP+1
    ; r8 = *r7
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
; TSMC reference parameter ptr2
ptr2_immOP:
    LD HL, 0000      ; TSMC ref address for ptr2
ptr2_imm0 EQU ptr2_immOP+1
    ; r10 = *r9
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r11 = r8 != r10
    ; Register 8 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; Register 11 already in HL
    ; jump_if_not r11, else_7
    LD A, L
    OR A
    JP Z, else_7
    LD HL, (ptr1_imm0) ; Reload TSMC ref address
    ; r13 = *r12
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    LD HL, (ptr2_imm0) ; Reload TSMC ref address
    ; r15 = *r14
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r16 = r13 < r15
    ; Register 13 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    LD ($F020), HL    ; Virtual register 16 to memory
    ; jump_if_not r16, else_9
    LD A, ($F020)     ; Virtual register 16 from memory
    OR A
    JP Z, else_9
    ; r17 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r18 = -r17
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; return r18
    RET
    ; jump end_if_10
    JP end_if_10
    ; else_9:
else_9:
    ; r19 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; return r19
    ; Register 19 already in HL
    RET
    ; end_if_10:
end_if_10:
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; end_if_8:
end_if_8:
    LD HL, (ptr1_imm0) ; Reload TSMC ref address
    ; Register 20 already in HL
    ; r21 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r22 = r20 + r21
    ; Register 20 already in HL
    LD D, H
    LD E, L
    ; Register 21 already in HL
    ADD HL, DE
    ; store ptr1, r22
    LD ($F000), HL
    LD HL, (ptr2_imm0) ; Reload TSMC ref address
    ; Register 23 already in HL
    ; r24 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r25 = r23 + r24
    ; Register 23 already in HL
    LD D, H
    LD E, L
    ; Register 24 already in HL
    ADD HL, DE
    ; store ptr2, r25
    LD ($F000), HL
    LD HL, (.Users_alice_dev_minz_ts_examples_memory_operations_mem_compare_param_count)
    LD ($F034), HL    ; Virtual register 26 to memory
    ; r27 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r28 = r26 - r27
    LD HL, ($F034)    ; Virtual register 26 from memory
    LD D, H
    LD E, L
    ; Register 27 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; store count, r28
    LD ($F000), HL
    ; jump loop_5
    JP loop_5
    ; end_loop_6:
end_loop_6:
    ; r29 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; return r29
    ; Register 29 already in HL
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
