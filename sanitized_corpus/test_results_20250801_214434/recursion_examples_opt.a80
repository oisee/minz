; MinZ generated code
; Generated: 2025-08-01 21:44:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.recursion_examples.factorial
.Users_alice_dev_minz_ts_examples_recursion_examples_factorial:
; TRUE SMC function with immediate anchors
n_immOP:
    LD A, 0        ; n anchor (will be patched)
n_imm0 EQU n_immOP+1
    ; Register 2 already in A
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; else_1:
else_1:
    LD A, (n_imm0)    ; Reuse from anchor
    LD E, A         ; Store to physical register E
    LD A, (n_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r10 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.recursion_examples.factorial
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_recursion_examples_factorial
    ; r11 = r6 * r10
    ; 16-bit multiplication
    LD (mul_src1_2), HL  ; Save multiplicand
    LD (mul_src2_2), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_2)  ; DE = multiplicand
    LD BC, (mul_src2_2)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_2
.mul16_loop_2:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_2
.mul16_done_2:
mul_src1_2: DW 0
mul_src2_2: DW 0
    ; Register 11 already in HL
    ; return r11
    ; Register 11 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.recursion_examples.gcd
.Users_alice_dev_minz_ts_examples_recursion_examples_gcd:
; TRUE SMC function with immediate anchors
b_immOP:
    LD A, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Tail recursion loop start
.Users_alice_dev_minz_ts_examples_recursion_examples_gcd_tail_loop:
    ; r4 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r5 = r3 == r4
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    ; jump_if_not r5, else_3
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_3
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
    LD ($F00C), A     ; Virtual register 6 to memory
    ; return r6
    LD HL, ($F00C)    ; Virtual register 6 from memory
    RET
    ; else_3:
else_3:
    LD A, (b_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    LD A, (a_imm0)    ; Reuse from anchor
    LD L, A         ; Store to physical register L
    LD A, (b_imm0)    ; Reuse from anchor
    LD L, A         ; Store to HL (low byte)
    ; Tail recursion optimized to loop
    JP .Users_alice_dev_minz_ts_examples_recursion_examples_gcd_tail_loop
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.recursion_examples.binary_search
.Users_alice_dev_minz_ts_examples_recursion_examples_binary_search:
; TRUE SMC function with immediate anchors
left_immOP:
    LD A, 0        ; left anchor (will be patched)
left_imm0 EQU left_immOP+1
    LD H, A         ; Store to physical register H
right_immOP:
    LD A, 0        ; right anchor (will be patched)
right_imm0 EQU right_immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Tail recursion loop start
.Users_alice_dev_minz_ts_examples_recursion_examples_binary_search_tail_loop:
    ; r7 = r5 > r6
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    JP P, .L6
    LD HL, 0
    JP .L7
.L6:
    LD HL, 1
.L7:
    ; jump_if_not r7, else_5
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_5
    ; Folded: 
    LD A, -1
    LD ($F012), A     ; Virtual register 9 to memory
    ; return r9
    LD HL, ($F012)    ; Virtual register 9 from memory
    RET
    ; else_5:
else_5:
    LD A, (left_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    LD A, (right_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    LD A, (left_imm0)    ; Reuse from anchor
    LD L, A         ; Store to physical register L
    ; r14 = r12 - r13
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; r15 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r16 = r14 / r15
    ; 8-bit division
    LD A, ($F01C)     ; Virtual register 14 from memory
    LD D, A       ; D = dividend
    LD A, H
    LD E, A       ; E = divisor
    OR A          ; Check for divide by zero
    JR Z, .div_by_zero_7
    LD B, 0       ; B = quotient
    LD A, D       ; A = remainder
.div_loop_7:
    CP E          ; Compare remainder with divisor
    JR C, .div_done_7
    SUB E         ; Subtract divisor
    INC B         ; Increment quotient
    JR .div_loop_7
.div_by_zero_7:
    LD B, 0       ; Return 0 for divide by zero
.div_done_7:
    LD L, B       ; Result in L
    LD H, 0
    ; r17 = r11 + r16
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 17 already in HL
    ; store , r17
    ; Register 17 already in HL
    LD ($F014), HL
arr_immOP:
    LD HL, 0       ; arr anchor (will be patched)
arr_imm0 EQU arr_immOP+1
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r22 = *r21
    LD A, (HL)
    LD ($F02C), A     ; Virtual register 22 to memory
    ; store , r22
    LD HL, ($F02C)    ; Virtual register 22 from memory
    LD ($F024), HL
    ; r23 = load value
    LD HL, ($F024)
target_immOP:
    LD A, 0        ; target anchor (will be patched)
target_imm0 EQU target_immOP+1
    LD H, A         ; Store to physical register H
    ; r25 = r23 == r24
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    LD ($F032), HL    ; Virtual register 25 to memory
    ; jump_if_not r25, else_7
    LD A, ($F032)     ; Virtual register 25 from memory
    OR A
    JP Z, else_7
    ; r26 = load mid
    LD HL, ($F014)
    ; return r26
    RET
    ; else_7:
else_7:
    ; r27 = load value
    LD HL, ($F024)
    ; Register 27 already in HL
    LD A, (target_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r29 = r27 < r28
    ; Register 27 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    ; jump_if_not r29, else_9
    LD A, L
    OR A
    JP Z, else_9
    LD HL, (arr_imm0)   ; Reuse from anchor
    LD ($F03C), HL    ; Virtual register 30 to memory
    LD A, (target_imm0)    ; Reuse from anchor
    LD L, A         ; Store to HL (low byte)
    LD A, (right_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; Tail recursion optimized to loop
    JP .Users_alice_dev_minz_ts_examples_recursion_examples_binary_search_tail_loop
    ; else_9:
else_9:
    LD HL, (arr_imm0)   ; Reuse from anchor
    LD ($F04A), HL    ; Virtual register 37 to memory
    LD A, (target_imm0)    ; Reuse from anchor
    LD L, A         ; Store to HL (low byte)
    LD A, (left_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; Tail recursion optimized to loop
    JP .Users_alice_dev_minz_ts_examples_recursion_examples_binary_search_tail_loop
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW n_imm0           ; .Users_alice_dev_minz_ts_examples_recursion_examples_factorial_n
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a_imm0           ; .Users_alice_dev_minz_ts_examples_recursion_examples_gcd_a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b_imm0           ; .Users_alice_dev_minz_ts_examples_recursion_examples_gcd_b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW arr_imm0           ; .Users_alice_dev_minz_ts_examples_recursion_examples_binary_search_arr
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW target_imm0           ; .Users_alice_dev_minz_ts_examples_recursion_examples_binary_search_target
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW left_imm0           ; .Users_alice_dev_minz_ts_examples_recursion_examples_binary_search_left
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW right_imm0           ; .Users_alice_dev_minz_ts_examples_recursion_examples_binary_search_right
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
