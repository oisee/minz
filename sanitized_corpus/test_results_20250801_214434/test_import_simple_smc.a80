; MinZ generated code
; Generated: 2025-08-01 21:44:39


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.pixel_addr
zx_screen_pixel_addr:
; TRUE SMC function with immediate anchors
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = 192
    LD A, 192
    LD C, A         ; Store to physical register C
    ; r6 = r4 & r5
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; store , r6
    LD A, D
    LD ($F006), A
    LD A, (y_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r9 = 56
    LD A, 56
    LD ($F012), A     ; Virtual register 9 to memory
    ; r10 = r8 & r9
    LD D, H
    LD E, L
    LD HL, ($F012)    ; Virtual register 9 from memory
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r11 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r12 = r10 >> r11
    ; Shift right
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD B, A       ; B = value to shift
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shr_done_0
    LD B, C       ; B = counter
.shr_loop_0:
    DEC B
    JP M, .shr_done_0
    SRL A         ; Shift right, 0 into bit 7
    JR .shr_loop_0
.shr_done_0:
    LD L, A
    LD H, 0
    ; store , r12
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD ($F00E), A
    LD A, (y_imm0)    ; Reuse from anchor
    ; Register 14 already in A
    ; r15 = 7
    LD A, 7
    ; Register 15 already in A
    ; r16 = r14 & r15
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; store , r16
    LD A, L
    LD ($F01A), A
    ; r18 = 16384
    LD HL, 16384
    LD D, H
    LD E, L
    ; r19 = load y_low
    LD A, ($F01A)
    LD L, A         ; Store to HL (low byte)
    ; r20 = 8
    LD A, 8
    LD H, A         ; Store to physical register H
    ; r21 = r19 << r20
    ; Shift left
    LD A, L
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_1
    LD B, C       ; B = counter
.shl_loop_1:
    DEC B
    JP M, .shl_done_1
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_1
.shl_done_1:
    LD L, A
    LD H, 0
    ; r22 = r18 | r21
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    LD B, H
    LD C, L
    ; r23 = load y_mid
    LD A, ($F00E)
    LD L, A         ; Store to HL (low byte)
    ; r24 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r25 = r23 << r24
    ; Shift left
    LD A, L
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_2
    LD B, C       ; B = counter
.shl_loop_2:
    DEC B
    JP M, .shl_done_2
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_2
.shl_done_2:
    LD L, A
    LD H, 0
    ; r26 = r22 | r25
    LD H, B
    LD L, C
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r27 = load y_high
    LD A, ($F006)
    LD L, A         ; Store to HL (low byte)
    ; r28 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r29 = r27 << r28
    ; Shift left
    LD A, L
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_3
    LD B, C       ; B = counter
.shl_loop_3:
    DEC B
    JP M, .shl_done_3
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_3
.shl_done_3:
    LD L, A
    LD H, 0
    ; r30 = r26 | r29
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    LD ($F03C), HL    ; Virtual register 30 to memory
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    LD L, A         ; Store to HL (low byte)
    ; r32 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r33 = r31 >> r32
    ; Shift right
    LD A, L
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shr_done_4
    LD B, C       ; B = counter
.shr_loop_4:
    DEC B
    JP M, .shr_done_4
    SRL A         ; Shift right, 0 into bit 7
    JR .shr_loop_4
.shr_done_4:
    LD L, A
    LD H, 0
    ; r34 = r30 | r33
    LD HL, ($F03C)    ; Virtual register 30 from memory
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    ; store , r34
    LD ($F022), HL
    ; r35 = load addr
    LD HL, ($F022)
    ; Register 35 already in HL
    ; return r35
    ; Register 35 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.attr_addr
zx_screen_attr_addr:
; TRUE SMC function with immediate anchors
    ; r3 = 22528
    LD HL, 22528
    ; Register 3 already in HL
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    LD H, A         ; Store to physical register H
    ; r5 = 32
    LD A, 32
    LD L, A         ; Store to physical register L
    ; r6 = r4 * r5
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_5
.mul_loop_5:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_5
.mul_done_5:
    ; Register 6 already in HL
    ; r7 = r3 + r6
    ; Register 3 already in HL
    LD D, H
    LD E, L
    ; Register 6 already in HL
    ADD HL, DE
    ; Register 7 already in HL
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    LD H, A         ; Store to physical register H
    ; r9 = r7 + r8
    ; Register 7 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r9
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.draw_hline
zx_screen_draw_hline:
; TRUE SMC function with immediate anchors
    ; r5 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r5
    LD A, L
    LD ($F008), A
    ; loop_3:
loop_3:
    ; r6 = load i
    LD A, ($F008)
    LD H, A         ; Store to physical register H
len_immOP:
    LD A, 0        ; len anchor (will be patched)
len_imm0 EQU len_immOP+1
    LD L, A         ; Store to physical register L
    ; r8 = r6 < r7
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; jump_if_not r8, end_loop_4
    LD A, H
    OR A
    JP Z, end_loop_4
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    LD L, A         ; Store to physical register L
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    LD ($F018), A     ; Virtual register 12 to memory
    ; r13 = call zx.screen.set_pixel
    ; Call to zx.screen.set_pixel (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F016)    ; Virtual register 11 from memory
    PUSH HL       ; Argument 0
    CALL zx.screen.set_pixel
    ; r14 = load i
    LD A, ($F008)
    LD ($F01C), A     ; Virtual register 14 to memory
    ; r15 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r16 = r14 + r15
    LD HL, ($F01C)    ; Virtual register 14 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r16
    LD A, L
    LD ($F008), A
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.draw_vline
zx_screen_draw_vline:
; TRUE SMC function with immediate anchors
    ; r5 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r5
    LD A, H
    LD ($F008), A
    ; loop_5:
loop_5:
    ; r6 = load i
    LD A, ($F008)
    LD H, A         ; Store to physical register H
len_immOP:
    LD A, 0        ; len anchor (will be patched)
len_imm0 EQU len_immOP+1
    LD H, A         ; Store to physical register H
    ; r8 = r6 < r7
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    LD ($F010), HL    ; Virtual register 8 to memory
    ; jump_if_not r8, end_loop_6
    LD A, ($F010)     ; Virtual register 8 from memory
    OR A
    JP Z, end_loop_6
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    LD L, A         ; Store to physical register L
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    LD ($F014), A     ; Virtual register 10 to memory
    ; r13 = call zx.screen.set_pixel
    ; Call to zx.screen.set_pixel (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL zx.screen.set_pixel
    ; r14 = load i
    LD A, ($F008)
    LD ($F01C), A     ; Virtual register 14 to memory
    ; r15 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r16 = r14 + r15
    LD HL, ($F01C)    ; Virtual register 14 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r16
    LD A, L
    LD ($F008), A
    ; jump loop_5
    JP loop_5
    ; end_loop_6:
end_loop_6:
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.draw_rect
zx_screen_draw_rect:
; TRUE SMC function with immediate anchors
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    LD H, A         ; Store to physical register H
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    LD L, A         ; Store to physical register L
width_immOP:
    LD A, 0        ; width anchor (will be patched)
width_imm0 EQU width_immOP+1
    LD H, A         ; Store to physical register H
    ; r8 = call zx.screen.draw_hline
    ; Call to zx.screen.draw_hline (args: 3)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to zx.screen.draw_hline
    LD A, H
    LD (x_imm0), A        ; Patch x
    LD A, L
    LD (y_imm0), A        ; Patch y
    LD A, H
    LD (len_imm0), A        ; Patch len
    CALL zx.screen.draw_hline
    LD ($F010), HL    ; Virtual register 8 to memory
    LD A, (x_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    LD A, (y_imm0)    ; Reuse from anchor
    LD L, A         ; Store to physical register L
height_immOP:
    LD A, 0        ; height anchor (will be patched)
height_imm0 EQU height_immOP+1
    LD H, A         ; Store to physical register H
    LD A, (width_imm0)    ; Reuse from anchor
    LD ($F01E), A     ; Virtual register 15 to memory
    ; r16 = call zx.screen.draw_hline
    ; Call to zx.screen.draw_hline (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F01E)    ; Virtual register 15 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F01C)    ; Virtual register 14 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to zx.screen.draw_hline
    LD A, H
    LD (x_imm0), A        ; Patch x
    LD A, ($F01C)     ; Virtual register 14 from memory
    LD (y_imm0), A        ; Patch y
    LD A, ($F01E)     ; Virtual register 15 from memory
    LD (len_imm0), A        ; Patch len
    CALL zx.screen.draw_hline
    LD A, (x_imm0)    ; Reuse from anchor
    LD L, A         ; Store to physical register L
    LD A, (y_imm0)    ; Reuse from anchor
    LD ($F024), A     ; Virtual register 18 to memory
    LD A, (height_imm0)    ; Reuse from anchor
    LD L, A         ; Store to physical register L
    ; r20 = call zx.screen.draw_vline
    ; Call to zx.screen.draw_vline (args: 3)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 2
    LD HL, ($F024)    ; Virtual register 18 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to zx.screen.draw_vline
    LD A, L
    LD (x_imm0), A        ; Patch x
    LD A, ($F024)     ; Virtual register 18 from memory
    LD (y_imm0), A        ; Patch y
    LD A, L
    LD (len_imm0), A        ; Patch len
    CALL zx.screen.draw_vline
    LD ($F028), HL    ; Virtual register 20 to memory
    LD A, (x_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    LD A, (width_imm0)    ; Reuse from anchor
    LD L, A         ; Store to physical register L
    LD A, (y_imm0)    ; Reuse from anchor
    LD L, A         ; Store to HL (low byte)
    LD A, (height_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r28 = call zx.screen.draw_vline
    ; Call to zx.screen.draw_vline (args: 3)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 2
    ; Register 26 already in HL
    PUSH HL       ; Argument 1
    LD HL, ($F032)    ; Virtual register 25 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to zx.screen.draw_vline
    LD A, ($F032)     ; Virtual register 25 from memory
    LD (x_imm0), A        ; Patch x
    LD A, L
    LD (y_imm0), A        ; Patch y
    LD A, H
    LD (len_imm0), A        ; Patch len
    CALL zx.screen.draw_vline
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.get_cursor
zx_screen_get_cursor:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.print_string
zx_screen_print_string:
; TRUE SMC function with immediate anchors
s_immOP:
    LD HL, 0       ; s anchor (will be patched)
s_imm0 EQU s_immOP+1
    ; store , r3
    LD ($F004), HL
    ; r6 = *r5
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; store , r6
    LD ($F008), HL
    ; loop_11:
loop_11:
    ; r7 = load ch
    LD HL, ($F008)
    ; r8 = 0
    LD A, 0
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = r7 != r8
    LD D, H
    LD E, L
    LD HL, ($F010)    ; Virtual register 8 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    ; jump_if_not r9, end_loop_12
    LD A, H
    OR A
    JP Z, end_loop_12
    ; r11 = call zx.screen.print_char
    ; Call to zx.screen.print_char (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F014)    ; Virtual register 10 from memory
    PUSH HL       ; Argument 0
    CALL zx.screen.print_char
    ; r12 = load ptr
    LD HL, ($F004)
    ; Register 12 already in HL
    ; r13 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r14 = r12 + r13
    ; Register 12 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; store ptr, r14
    LD ($F004), HL
    ; r16 = *r15
    ; Register 15 already in HL
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; store ch, r16
    LD ($F008), HL
    ; jump loop_11
    JP loop_11
    ; end_loop_12:
end_loop_12:
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.print_at
zx_screen_print_at:
; TRUE SMC function with immediate anchors
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    LD H, A         ; Store to physical register H
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    LD L, A         ; Store to physical register L
    ; r6 = call zx.screen.set_cursor
    ; Call to zx.screen.set_cursor (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL zx.screen.set_cursor
s_immOP:
    LD HL, 0       ; s anchor (will be patched)
s_imm0 EQU s_immOP+1
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = call zx.screen.print_string
    ; Call to zx.screen.print_string (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to zx.screen.print_string
    LD HL, ($F00E)    ; Virtual register 7 from memory
    LD (s_imm0), HL       ; Patch s (atomic)
    CALL zx.screen.print_string
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: zx.screen.print_hex16
zx_screen_print_hex16:
; TRUE SMC function with immediate anchors
n_immOP:
    LD HL, 0       ; n anchor (will be patched)
n_imm0 EQU n_immOP+1
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r5 = call zx.screen.print_hex8
    ; Call to zx.screen.print_hex8 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F008)    ; Virtual register 4 from memory
    PUSH HL       ; Argument 0
    CALL zx.screen.print_hex8
    ; Register 5 already in HL
    LD HL, (n_imm0)   ; Reuse from anchor
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; r7 = call zx.screen.print_hex8
    ; Call to zx.screen.print_hex8 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    CALL zx.screen.print_hex8
    ; Register 7 already in HL
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_import_simple.main
.Users_alice_dev_minz_ts_examples_test_import_simple_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r5 = call zx.screen.draw_rect
    ; Call to zx.screen.draw_rect (args: 4)
    ; Stack-based parameter passing
    LD HL, ($F008)    ; Virtual register 4 from memory
    PUSH HL       ; Argument 3
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F002)    ; Virtual register 1 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to zx.screen.draw_rect
    LD A, ($F002)     ; Virtual register 1 from memory
    LD (x_imm0), A        ; Patch x
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (y_imm0), A        ; Patch y
    LD A, ($F006)     ; Virtual register 3 from memory
    LD (width_imm0), A        ; Patch width
    LD A, ($F008)     ; Virtual register 4 from memory
    LD (height_imm0), A        ; Patch height
    CALL zx.screen.draw_rect
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x_imm0           ; zx.screen.pixel_addr.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; zx.screen.pixel_addr.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x_imm0           ; zx.screen.attr_addr.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; zx.screen.attr_addr.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x_imm0           ; zx.screen.draw_hline.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; zx.screen.draw_hline.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW len_imm0           ; zx.screen.draw_hline.len
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x_imm0           ; zx.screen.draw_vline.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; zx.screen.draw_vline.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW len_imm0           ; zx.screen.draw_vline.len
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x_imm0           ; zx.screen.draw_rect.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; zx.screen.draw_rect.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW width_imm0           ; zx.screen.draw_rect.width
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW height_imm0           ; zx.screen.draw_rect.height
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW s_imm0           ; zx.screen.print_string.s
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x_imm0           ; zx.screen.print_at.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; zx.screen.print_at.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW s_imm0           ; zx.screen.print_at.s
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW n_imm0           ; zx.screen.print_hex16.n
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
