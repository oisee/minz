; MinZ generated code
; Generated: 2025-08-01 21:44:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.main.main
.Users_alice_dev_minz_ts_examples_main_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call clear_screen
    ; Call to clear_screen (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_main_clear_screen
    ; r2 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r3 = call set_border
    ; Call to set_border (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_main_set_border
    ; r5 = 10
    LD A, 10
    LD D, A         ; Store to physical register D
    ; store , r5
    LD A, D
    LD ($F008), A
    ; r7 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; store , r7
    LD A, H
    LD ($F00C), A
    ; r9 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; store , r9
    LD ($F010), HL
    ; loop_1:
loop_1:
    ; r10 = load counter
    LD HL, ($F010)
    ; r11 = 1000
    LD HL, 1000
    LD ($F016), HL    ; Virtual register 11 to memory
    ; r12 = r10 < r11
    LD D, H
    LD E, L
    LD HL, ($F016)    ; Virtual register 11 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD D, H
    LD E, L
    ; jump_if_not r12, end_loop_2
    LD A, E
    OR A
    JP Z, end_loop_2
    ; r13 = load x
    LD A, ($F008)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r14 = 1
    LD A, 1
    LD ($F01C), A     ; Virtual register 14 to memory
    ; r15 = r13 + r14
    LD D, H
    LD E, L
    LD HL, ($F01C)    ; Virtual register 14 from memory
    ADD HL, DE
    ; store x, r15
    LD A, H
    LD ($F008), A
    ; r16 = load x
    LD A, ($F008)
    LD L, A         ; Store to physical register L
    ; r17 = 20
    LD A, 20
    LD ($F022), A     ; Virtual register 17 to memory
    ; r18 = r16 > r17
    LD D, H
    LD E, L
    LD HL, ($F022)    ; Virtual register 17 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L4
    JP P, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r18, else_3
    LD A, H
    OR A
    JP Z, else_3
    ; r19 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; store x, r19
    LD A, L
    LD ($F008), A
    ; r20 = load y
    LD A, ($F00C)
    LD ($F028), A     ; Virtual register 20 to memory
    ; r21 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r22 = r20 + r21
    LD HL, ($F028)    ; Virtual register 20 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store y, r22
    LD A, L
    LD ($F00C), A
    ; r23 = load y
    LD A, ($F00C)
    LD ($F02E), A     ; Virtual register 23 to memory
    ; r24 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; r25 = r23 > r24
    LD HL, ($F02E)    ; Virtual register 23 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L6
    JP P, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r25, else_5
    LD A, L
    OR A
    JP Z, else_5
    ; r26 = 10
    LD A, 10
    LD ($F034), A     ; Virtual register 26 to memory
    ; store y, r26
    LD A, ($F034)     ; Virtual register 26 from memory
    LD ($F00C), A
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; r27 = load x
    LD A, ($F008)
    LD H, A         ; Store to physical register H
    ; r28 = load y
    LD A, ($F00C)
    LD L, A         ; Store to physical register L
    ; r29 = call draw_pixel
    ; Call to draw_pixel (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_main_draw_pixel
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; r30 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; r31 = call delay
    ; Call to delay (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_main_delay
    ; r32 = load counter
    LD HL, ($F010)
    ; Register 32 already in HL
    ; r33 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r34 = r32 + r33
    ; Register 32 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 34 already in HL
    ; store counter, r34
    ; Register 34 already in HL
    LD ($F010), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.main.clear_screen
.Users_alice_dev_minz_ts_examples_main_clear_screen:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 16384
    LD HL, 16384
    LD B, H
    LD C, L
    ; store , r2
    LD H, B
    LD L, C
    LD ($F002), HL
    ; loop_7:
loop_7:
    ; r3 = load addr
    LD HL, ($F002)
    ; r4 = 16384
    LD HL, 16384
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = 6144
    LD HL, 6144
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r6 = r4 + r5
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD D, H
    LD E, L
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    ADD HL, DE
    ; Register 6 already in HL
    ; r7 = r3 < r6
    LD D, H
    LD E, L
    ; Register 6 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; Register 7 already in HL
    ; jump_if_not r7, end_loop_8
    LD A, L
    OR A
    JP Z, end_loop_8
    ; r8 = load addr
    LD HL, ($F002)
    ; r9 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 10 already in HL
    ; store addr, r10
    ; Register 10 already in HL
    LD ($F002), HL
    ; jump loop_7
    JP loop_7
    ; end_loop_8:
end_loop_8:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.main.set_border
.Users_alice_dev_minz_ts_examples_main_set_border:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.main.draw_pixel
.Users_alice_dev_minz_ts_examples_main_draw_pixel:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r4 = 16384
    LD HL, 16384
    LD ($F008), HL    ; Virtual register 4 to memory
.Users_alice_dev_minz_ts_examples_main_draw_pixel_param_y:
    LD DE, #0000   ; SMC parameter y (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r6 = 32
    LD A, 32
    LD L, A         ; Store to HL (low byte)
    ; r7 = r5 * r6
    ; 16-bit multiplication
    LD (mul_src1_8), HL  ; Save multiplicand
    ; Register 6 already in HL
    LD (mul_src2_8), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_8)  ; DE = multiplicand
    LD BC, (mul_src2_8)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_8
.mul16_loop_8:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_8
.mul16_done_8:
mul_src1_8: DW 0
mul_src2_8: DW 0
    ; Register 7 already in HL
    ; r8 = r4 + r7
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD D, H
    LD E, L
    ; Register 7 already in HL
    ADD HL, DE
    ; Register 8 already in HL
.Users_alice_dev_minz_ts_examples_main_draw_pixel_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r10 = r8 + r9
    ; Register 8 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r10
    LD ($F006), HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.main.delay
.Users_alice_dev_minz_ts_examples_main_delay:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r3
    LD ($F004), HL
    ; loop_9:
loop_9:
    ; r4 = load i
    LD HL, ($F004)
.Users_alice_dev_minz_ts_examples_main_delay_param_count:
    LD HL, #0000   ; SMC parameter count
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; r6 = r4 < r5
    LD D, H
    LD E, L
    LD HL, ($F00A)    ; Virtual register 5 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L10
    LD HL, 0
    JP .L11
.L10:
    LD HL, 1
.L11:
    ; Register 6 already in HL
    ; jump_if_not r6, end_loop_10
    LD A, L
    OR A
    JP Z, end_loop_10
    ; r7 = load i
    LD HL, ($F004)
    ; Register 7 already in HL
    ; r8 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r9 = r7 + r8
    ; Register 7 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 9 already in HL
    ; store i, r9
    ; Register 9 already in HL
    LD ($F004), HL
    ; jump loop_9
    JP loop_9
    ; end_loop_10:
end_loop_10:
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
