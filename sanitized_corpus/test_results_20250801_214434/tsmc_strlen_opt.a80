; MinZ generated code
; Generated: 2025-08-01 21:44:41


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.tsmc_strlen.strlen_tsmc
.Users_alice_dev_minz_ts_examples_tsmc_strlen_strlen_tsmc:
; TRUE SMC function with immediate anchors
    ; r3 = 0
    LD A, 0
    ; Register 3 already in A
    ; store , r3
    LD ($F004), HL
    ; loop_1:
loop_1:
str_immOP:
    LD HL, 0       ; str anchor (will be patched)
str_imm0 EQU str_immOP+1
    ; Register 4 already in HL
    ; r5 = *r4
    ; Register 4 already in HL
    LD A, (HL)
    LD C, A         ; Store to physical register C
    ; r6 = 0
    LD A, 0
    LD D, A         ; Store to physical register D
    ; r7 = r5 != r6
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r7, end_loop_2
    LD A, E
    OR A
    JP Z, end_loop_2
    ; r8 = load len
    LD HL, ($F004)
    ; r9 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    LD D, H
    LD E, L
    ; store len, r10
    LD H, D
    LD L, E
    LD ($F004), HL
    LD HL, (str_imm0)   ; Reuse from anchor
    LD B, H
    LD C, L
    ; Update TSMC reference str
    LD (str_imm0), HL    ; Update TSMC reference immediate
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r14 = load len
    LD HL, ($F004)
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.tsmc_strlen.test
.Users_alice_dev_minz_ts_examples_tsmc_strlen_test:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r2 = 72
    LD A, 72
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = 105
    LD A, 105
    LD L, A         ; Store to physical register L
    ; store , r4
    LD A, L
    LD ($F006), A
    ; r6 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r6
    LD A, H
    LD ($F00A), A
    ; r8 = &r7
    ; Address-of operation for register r7
    LD HL, $F00E  ; Variable address
    ; Register 8 already in HL
    ; r9 = call strlen_tsmc
    ; Call to strlen_tsmc (args: 1)
    ; Stack-based parameter passing
    ; Register 8 already in HL
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.tsmc_strlen.strlen_tsmc
    ; Register 8 already in HL
    LD (str_imm0), HL       ; Patch str (atomic)
    CALL .Users_alice_dev_minz_ts_examples_tsmc_strlen_strlen_tsmc
    ; return r9
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW str_imm0           ; .Users_alice_dev_minz_ts_examples_tsmc_strlen_strlen_tsmc_str
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
