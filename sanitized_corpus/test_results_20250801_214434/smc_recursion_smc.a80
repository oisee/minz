; MinZ generated code
; Generated: 2025-08-01 21:44:38


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.smc_recursion.factorial_smc
.Users_alice_dev_minz_ts_examples_smc_recursion_factorial_smc:
; TRUE SMC function with immediate anchors
n_immOP:
    LD A, 0        ; n anchor (will be patched)
n_imm0 EQU n_immOP+1
    ; Register 2 already in A
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; else_1:
else_1:
    LD A, (n_imm0)    ; Reuse from anchor
    LD E, A         ; Store to physical register E
    LD A, (n_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r10 = call factorial_smc
    ; Call to factorial_smc (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.smc_recursion.factorial_smc
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_smc_recursion_factorial_smc
    ; r11 = r6 * r10
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; return r11
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.smc_recursion.fib_smc
.Users_alice_dev_minz_ts_examples_smc_recursion_fib_smc:
; TRUE SMC function with immediate anchors
n_immOP:
    LD A, 0        ; n anchor (will be patched)
n_imm0 EQU n_immOP+1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r3 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L4
    JP Z, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    LD ($F008), HL    ; Virtual register 4 to memory
    ; jump_if_not r4, else_3
    LD A, ($F008)     ; Virtual register 4 from memory
    OR A
    JP Z, else_3
    LD A, (n_imm0)    ; Reuse from anchor
    LD C, A         ; Store to physical register C
    ; return r5
    RET
    ; else_3:
else_3:
    LD A, (n_imm0)    ; Reuse from anchor
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r9 = call fib_smc
    ; Call to fib_smc (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.smc_recursion.fib_smc
    LD A, ($F010)     ; Virtual register 8 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_smc_recursion_fib_smc
    LD A, (n_imm0)    ; Reuse from anchor
    LD ($F014), A     ; Virtual register 10 to memory
    ; r13 = call fib_smc
    ; Call to fib_smc (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.smc_recursion.fib_smc
    LD A, ($F018)     ; Virtual register 12 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_smc_recursion_fib_smc
    ; r14 = r9 + r13
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.smc_recursion.many_params_recursive
.Users_alice_dev_minz_ts_examples_smc_recursion_many_params_recursive:
; TRUE SMC function with immediate anchors
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
    LD C, A         ; Store to physical register C
    ; r7 = 0
    LD A, 0
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = r6 == r7
    LD D, H
    LD E, L
    LD HL, ($F00E)    ; Virtual register 7 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L6
    LD HL, 0
    JP .L7
.L6:
    LD HL, 1
.L7:
    ; jump_if_not r8, else_5
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_5
b_immOP:
    LD A, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    LD ($F012), A     ; Virtual register 9 to memory
c_immOP:
    LD A, 0        ; c anchor (will be patched)
c_imm0 EQU c_immOP+1
    LD C, A         ; Store to physical register C
    ; r11 = r9 + r10
    LD HL, ($F012)    ; Virtual register 9 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F016), HL    ; Virtual register 11 to memory
d_immOP:
    LD A, 0        ; d anchor (will be patched)
d_imm0 EQU d_immOP+1
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r13 = r11 + r12
    LD HL, ($F016)    ; Virtual register 11 from memory
    LD D, H
    LD E, L
    ADD HL, DE
e_immOP:
    LD A, 0        ; e anchor (will be patched)
e_imm0 EQU e_immOP+1
    ; Register 14 already in A
    ; r15 = r13 + r14
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r15
    RET
    ; else_5:
else_5:
    LD A, (a_imm0)    ; Reuse from anchor
    LD B, A         ; Store to physical register B
    LD A, (a_imm0)    ; Reuse from anchor
    LD B, A         ; Store to physical register B
    LD A, (b_imm0)    ; Reuse from anchor
    LD ($F028), A     ; Virtual register 20 to memory
    LD A, (c_imm0)    ; Reuse from anchor
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    LD A, (d_imm0)    ; Reuse from anchor
    LD B, A         ; Store to physical register B
    LD A, (e_imm0)    ; Reuse from anchor
    ; Register 23 already in A
    ; r24 = call many_params_recursive
    ; Call to many_params_recursive (args: 5)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 4
    PUSH HL       ; Argument 3
    PUSH HL       ; Argument 2
    LD HL, ($F028)    ; Virtual register 20 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.smc_recursion.many_params_recursive
    LD A, ($F026)     ; Virtual register 19 from memory
    LD (a_imm0), A        ; Patch a
    LD A, ($F028)     ; Virtual register 20 from memory
    LD (b_imm0), A        ; Patch b
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD (c_imm0), A        ; Patch c
    LD A, B
    LD (d_imm0), A        ; Patch d
    ; Register 23 already in A
    LD (e_imm0), A        ; Patch e
    CALL .Users_alice_dev_minz_ts_examples_smc_recursion_many_params_recursive
    ; r25 = r16 + r24
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r25
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.smc_recursion.main
.Users_alice_dev_minz_ts_examples_smc_recursion_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
    ; r3 = call factorial_smc
    ; Call to factorial_smc (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.smc_recursion.factorial_smc
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_smc_recursion_factorial_smc
    ; store , r3
    LD ($F002), HL
    ; r6 = call fib_smc
    ; Call to fib_smc (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00A)    ; Virtual register 5 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.smc_recursion.fib_smc
    LD A, ($F00A)     ; Virtual register 5 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_smc_recursion_fib_smc
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; store , r6
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD ($F008), HL
    ; r13 = call many_params_recursive
    ; Call to many_params_recursive (args: 5)
    ; Stack-based parameter passing
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 4
    LD HL, ($F016)    ; Virtual register 11 from memory
    PUSH HL       ; Argument 3
    LD HL, ($F014)    ; Virtual register 10 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.smc_recursion.many_params_recursive
    LD A, ($F010)     ; Virtual register 8 from memory
    LD (a_imm0), A        ; Patch a
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (b_imm0), A        ; Patch b
    LD A, ($F014)     ; Virtual register 10 from memory
    LD (c_imm0), A        ; Patch c
    LD A, ($F016)     ; Virtual register 11 from memory
    LD (d_imm0), A        ; Patch d
    LD A, ($F018)     ; Virtual register 12 from memory
    LD (e_imm0), A        ; Patch e
    CALL .Users_alice_dev_minz_ts_examples_smc_recursion_many_params_recursive
    ; store , r13
    LD ($F00E), HL
    ; return
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW n_imm0           ; .Users_alice_dev_minz_ts_examples_smc_recursion_factorial_smc_n
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW n_imm0           ; .Users_alice_dev_minz_ts_examples_smc_recursion_fib_smc_n
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a_imm0           ; .Users_alice_dev_minz_ts_examples_smc_recursion_many_params_recursive_a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b_imm0           ; .Users_alice_dev_minz_ts_examples_smc_recursion_many_params_recursive_b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW c_imm0           ; .Users_alice_dev_minz_ts_examples_smc_recursion_many_params_recursive_c
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW d_imm0           ; .Users_alice_dev_minz_ts_examples_smc_recursion_many_params_recursive_d
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW e_imm0           ; .Users_alice_dev_minz_ts_examples_smc_recursion_many_params_recursive_e
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
