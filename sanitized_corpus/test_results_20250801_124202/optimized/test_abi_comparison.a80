; MinZ generated code
; Generated: 2025-08-01 12:42:02


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_auto
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_auto:
; TRUE SMC function with immediate anchors
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
    ; Register 3 already in A
b_immOP:
    LD A, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    LD B, A         ; Store to physical register B
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_register
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_register:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_stack
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_stack:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_smc
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_smc:
; TRUE SMC function with immediate anchors
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
b_immOP:
    LD A, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    LD D, A         ; Store to physical register D
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_virtual
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_virtual:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.complex_calc
.Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc:
; TRUE SMC function with immediate anchors
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
b_immOP:
    LD A, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F014), HL    ; Virtual register 10 to memory
e_immOP:
    LD A, 0        ; e anchor (will be patched)
e_imm0 EQU e_immOP+1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r12 = r10 + r11
    LD HL, ($F014)    ; Virtual register 10 from memory
    LD D, H
    LD E, L
    ADD HL, DE
f_immOP:
    LD A, 0        ; f anchor (will be patched)
f_imm0 EQU f_immOP+1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r14 = r12 + r13
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r14
    LD ($F00E), HL
c_immOP:
    LD HL, 0       ; c anchor (will be patched)
c_imm0 EQU c_immOP+1
    LD ($F020), HL    ; Virtual register 16 to memory
d_immOP:
    LD HL, 0       ; d anchor (will be patched)
d_imm0 EQU d_immOP+1
    LD B, H
    LD C, L
    ; r18 = r16 + r17
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD D, H
    LD E, L
    LD H, B
    LD L, C
    ADD HL, DE
    ; Register 18 already in HL
    ; store , r18
    ; Register 18 already in HL
    LD ($F01E), HL
    ; r19 = load sum1
    LD HL, ($F00E)
    ; r20 = load sum2
    LD HL, ($F01E)
    ; r21 = r19 + r20
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 21 already in HL
    ; return r21
    ; Register 21 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.factorial
.Users_alice_dev_minz_ts_examples_test_abi_comparison_factorial:
; TRUE SMC function with immediate anchors
n_immOP:
    LD A, 0        ; n anchor (will be patched)
n_imm0 EQU n_immOP+1
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r4 = r2 <= r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, L
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD ($F00A), A     ; Virtual register 5 to memory
    ; return r5
    LD HL, ($F00A)    ; Virtual register 5 from memory
    RET
    ; else_1:
else_1:
    LD A, (n_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    LD A, (n_imm0)    ; Reuse from anchor
    LD L, A         ; Store to physical register L
    ; r10 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_abi_comparison.factorial
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_factorial
    ; Register 10 already in HL
    ; r11 = r6 * r10
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; return r11
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.timer_interrupt
.Users_alice_dev_minz_ts_examples_test_abi_comparison_timer_interrupt:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r2
    LD A, L
    LD ($F002), A
    ; r3 = load counter
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r4 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 5 already in HL
    ; store counter, r5
    LD A, L
    LD ($F002), A
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.memcpy
.Users_alice_dev_minz_ts_examples_test_abi_comparison_memcpy:
; TRUE SMC function with immediate anchors
    ; loop_3:
loop_3:
count_immOP:
    LD HL, 0       ; count anchor (will be patched)
count_imm0 EQU count_immOP+1
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r6 = r4 > r5
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    JP P, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    ; jump_if_not r6, end_loop_4
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    OR A
    JP Z, end_loop_4
src_immOP:
    LD HL, 0       ; src anchor (will be patched)
src_imm0 EQU src_immOP+1
    ; r8 = *r7
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
dst_immOP:
    LD HL, 0       ; dst anchor (will be patched)
dst_imm0 EQU dst_immOP+1
    LD ($F012), HL    ; Virtual register 9 to memory
    ; Store through pointer
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    LD HL, (dst_imm0)   ; Reuse from anchor
    ; Register 10 already in HL
    ; r11 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r12 = r10 + r11
    ; Register 10 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F018), HL    ; Virtual register 12 to memory
    ; store dst, r12
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD ($F000), HL
    LD HL, (src_imm0)   ; Reuse from anchor
    ; Register 13 already in HL
    ; r14 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r15 = r13 + r14
    ; Register 13 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; store src, r15
    LD HL, ($F01E)    ; Virtual register 15 from memory
    LD ($F000), HL
    LD HL, (count_imm0)   ; Reuse from anchor
    ; Register 16 already in HL
    ; r17 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r18 = r16 - r17
    ; Register 16 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; store count, r18
    LD ($F000), HL
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.main
.Users_alice_dev_minz_ts_examples_test_abi_comparison_main:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
    ; r4 = call add_auto
    ; Call to add_auto (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_auto
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (a_imm0), A        ; Patch a
    LD A, ($F006)     ; Virtual register 3 from memory
    LD (b_imm0), A        ; Patch b
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_auto
    ; store , r4
    LD ($F002), HL
    ; r8 = call add_register
    ; Call to add_register (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_register
    ; store , r8
    LD ($F00A), HL
    ; r12 = call add_stack
    ; Call to add_stack (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F016)    ; Virtual register 11 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F014)    ; Virtual register 10 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_stack
    LD ($F018), HL    ; Virtual register 12 to memory
    ; store , r12
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD ($F012), HL
    ; r16 = call add_smc
    ; Call to add_smc (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F01E)    ; Virtual register 15 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F01C)    ; Virtual register 14 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_smc
    LD A, ($F01C)     ; Virtual register 14 from memory
    LD (a_imm0), A        ; Patch a
    LD A, ($F01E)     ; Virtual register 15 from memory
    LD (b_imm0), A        ; Patch b
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_smc
    ; store , r16
    LD ($F01A), HL
    ; r20 = call add_virtual
    ; Call to add_virtual (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F024)    ; Virtual register 18 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_virtual
    ; store , r20
    LD ($F022), HL
    ; r28 = call complex_calc
    ; Call to complex_calc (args: 6)
    ; Stack-based parameter passing
    LD HL, ($F036)    ; Virtual register 27 from memory
    PUSH HL       ; Argument 5
    LD HL, ($F034)    ; Virtual register 26 from memory
    PUSH HL       ; Argument 4
    LD HL, ($F032)    ; Virtual register 25 from memory
    PUSH HL       ; Argument 3
    LD HL, ($F030)    ; Virtual register 24 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F02E)    ; Virtual register 23 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F02C)    ; Virtual register 22 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_abi_comparison.complex_calc
    LD A, ($F02C)     ; Virtual register 22 from memory
    LD (a_imm0), A        ; Patch a
    LD A, ($F02E)     ; Virtual register 23 from memory
    LD (b_imm0), A        ; Patch b
    LD HL, ($F030)    ; Virtual register 24 from memory
    LD (c_imm0), HL       ; Patch c (atomic)
    LD HL, ($F032)    ; Virtual register 25 from memory
    LD (d_imm0), HL       ; Patch d (atomic)
    LD A, ($F034)     ; Virtual register 26 from memory
    LD (e_imm0), A        ; Patch e
    LD A, ($F036)     ; Virtual register 27 from memory
    LD (f_imm0), A        ; Patch f
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc
    LD ($F038), HL    ; Virtual register 28 to memory
    ; store , r28
    LD HL, ($F038)    ; Virtual register 28 from memory
    LD ($F02A), HL
    ; r31 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F03C)    ; Virtual register 30 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_abi_comparison.factorial
    LD A, ($F03C)     ; Virtual register 30 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_factorial
    ; store , r31
    LD ($F03A), HL
    ; Load array element (u8)
    PUSH HL
    LD A, ($F046)     ; Virtual register 35 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r37 = &r36
    ; Address-of operation for register r36
    LD HL, $F048  ; Variable address
    ; Load array element (u8)
    LD HL, ($F04C)    ; Virtual register 38 from memory
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r41 = &r40
    ; Address-of operation for register r40
    LD HL, $F050  ; Variable address
    ; r43 = call memcpy
    ; Call to memcpy (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F054)    ; Virtual register 42 from memory
    PUSH HL       ; Argument 2
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_abi_comparison.memcpy
    LD (dst_imm0), HL       ; Patch dst (atomic)
    LD (src_imm0), HL       ; Patch src (atomic)
    LD HL, ($F054)    ; Virtual register 42 from memory
    LD (count_imm0), HL       ; Patch count (atomic)
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_memcpy
    ; Register 43 already in HL
    ; return
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW a_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_auto_a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_auto_b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_smc_a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_add_smc_b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc_a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc_b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW c_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc_c
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW d_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc_d
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW e_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc_e
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW f_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc_f
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW n_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_factorial_n
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW dst_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_memcpy_dst
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW src_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_memcpy_src
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW count_imm0           ; .Users_alice_dev_minz_ts_examples_test_abi_comparison_memcpy_count
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
