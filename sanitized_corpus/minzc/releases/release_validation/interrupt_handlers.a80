; MinZ generated code
; Generated: 2025-08-03 15:05:42


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.interrupt_handlers.fast_interrupt_handler
_examples_interrupt_handlers_fast_interrupt_handler:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm {         EXX             // Switch to shadow registers
        EX AF, AF'      // Switch AF with shadow AF'
        
        // Handler code here - can use all registers freely
        LD A, 0xFF
OUT_0xFE_A_Example: set border
        
        EX AF, AF'      // Restore main AF
        EXX             // Restore main registers
     }
    EXX             // Switch to shadow registers
    EX AF, AF'      // Switch AF with shadow AF'
    // Handler code here - can use all registers freely
    LD A, 0xFF
OUT_0xFE_A_Example: set border
    EX AF, AF'      // Restore main AF
    EXX             // Restore main registers
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.interrupt_handlers.timer_interrupt
_examples_interrupt_handlers_timer_interrupt:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm {         PUSH AF
        PUSH BC
        PUSH DE
        PUSH HL
        
        // Increment timer counter
        LD HL, (timer_ticks)
        INC HL
        LD (timer_ticks), HL
        
        POP HL
        POP DE
        POP BC
        POP AF
        EI
        RETI
     }
    PUSH AF
    PUSH BC
    PUSH DE
    PUSH HL
    // Increment timer counter
    LD HL, (timer_ticks)
    INC HL
    LD (timer_ticks), HL
    POP HL
    POP DE
    POP BC
    POP AF
    EI
    RETI
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.interrupt_handlers.setup_interrupts
_examples_interrupt_handlers_setup_interrupts:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm {         DI              // Disable interrupts
        IM 2            // Set interrupt mode 2
        LD A, 0x39      // High byte of interrupt table
        LD I, A         // Load into I register
        EI              // Enable interrupts
     }
    DI              // Disable interrupts
    IM 2            // Set interrupt mode 2
    LD A, 0x39      // High byte of interrupt table
    LD I, A         // Load into I register
    EI              // Enable interrupts
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
