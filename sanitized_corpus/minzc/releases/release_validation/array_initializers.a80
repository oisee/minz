; MinZ generated code
; Generated: 2025-08-03 15:05:42


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.array_initializers.main
_examples_array_initializers_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Direct print "RGB: " (5 chars)
    ; Direct print "RGB: " (5 chars)
    LD A, 82
    RST 16             ; Print character
    LD A, 71
    RST 16             ; Print character
    LD A, 66
    RST 16             ; Print character
    LD A, 58
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; Load array element (u8)
    PUSH HL
    LD A, C
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    ; Register 7 already in A
    ; print_u8(r7)
    ; Register 7 already in A
    CALL print_u8_decimal
    ; Direct print ", " (2 chars)
    ; Direct print ", " (2 chars)
    LD A, 44
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; Load array element (u8)
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD D, A         ; Store to physical register D
    ; print_u8(r10)
    LD A, D
    CALL print_u8_decimal
    ; Direct print ", " (2 chars)
    ; Direct print ", " (2 chars)
    LD A, 44
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; Load array element (u8)
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; print_u8(r13)
    LD A, L
    CALL print_u8_decimal
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; Direct print "Matrix:
" (8 chars)
    ; Direct print "Matrix:
" (8 chars)
    LD A, 77
    RST 16             ; Print character
    LD A, 97
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 114
    RST 16             ; Print character
    LD A, 105
    RST 16             ; Print character
    LD A, 120
    RST 16             ; Print character
    LD A, 58
    RST 16             ; Print character
    LD A, 10
    RST 16             ; Print character
    ; Load array element ([2]u8)
    LD H, D
    LD L, E
    PUSH HL
    LD D, B
    LD E, C
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F020), A     ; Virtual register 16 to memory
    ; Load array element (u8)
    LD HL, ($F020)    ; Virtual register 16 from memory
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; print_u8(r18)
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    CALL print_u8_decimal
    ; Direct print " " (1 chars)
    ; Direct print " " (1 chars)
    LD A, 32
    RST 16             ; Print character
    ; Load array element ([2]u8)
    ; Register 19 already in HL
    PUSH HL
    LD HL, ($F028)    ; Virtual register 20 from memory
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD L', A         ; Store to shadow HL'
    EXX               ; Switch back to main registers
    ; Load array element (u8)
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; print_u8(r23)
    LD A, L
    CALL print_u8_decimal
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; Load array element ([2]u8)
    ; Register 24 already in HL
    PUSH HL
    LD HL, ($F032)    ; Virtual register 25 from memory
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; print_u8(r28)
    LD A, L
    CALL print_u8_decimal
    ; Direct print " " (1 chars)
    ; Direct print " " (1 chars)
    LD A, 32
    RST 16             ; Print character
    ; Load array element ([2]u8)
    ; Register 29 already in HL
    PUSH HL
    LD HL, ($F03C)    ; Virtual register 30 from memory
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; print_u8(r33)
    LD A, L
    CALL print_u8_decimal
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.array_initializers.sum_array
_examples_array_initializers_sum_array:
; TRUE SMC function with immediate anchors
    ; r5 = 4
    LD A, 4
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    ; for_loop_1:
for_loop_1:
    ; Check i < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; Register 7 already in HL
    ; jump_if_not r7, for_end_2
    LD A, L
    OR A
    JP Z, for_end_2
arr_immOP:
    LD HL, 0       ; arr anchor (will be patched)
arr_imm0 EQU arr_immOP+1
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F016), A     ; Virtual register 11 to memory
    ; Increment i
    LD D, H
    LD E, L
    ; Register 13 already in HL
    ADD HL, DE
    ; r13 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; jump for_loop_1
    JP for_loop_1
    ; for_end_2:
for_end_2:
    ; r14 = load sum
    LD A, ($F004)
    LD H, A         ; Store to physical register H
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.array_initializers.test_sum
_examples_array_initializers_test_sum:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r4 = &r3
    ; Address-of operation for register r3
    LD HL, $F006  ; Variable address
    ; r5 = call sum_array
    ; Call to sum_array (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.array_initializers.sum_array
    LD (arr_imm0), HL       ; Patch arr (atomic)
    CALL ......examples.array_initializers.sum_array
    ; Direct print "Sum: " (5 chars)
    ; Direct print "Sum: " (5 chars)
    LD A, 83
    RST 16             ; Print character
    LD A, 117
    RST 16             ; Print character
    LD A, 109
    RST 16             ; Print character
    LD A, 58
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; print_u16(r6)
    CALL print_u16_decimal
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW arr_imm0           ; ......examples.array_initializers.sum_array.arr
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
