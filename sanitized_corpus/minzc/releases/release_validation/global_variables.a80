; MinZ generated code
; Generated: 2025-08-03 15:05:42


; Data section
    ORG $F000

_examples_global_variables_g_byte:
    DB 42
_examples_global_variables_g_word:
    DW 4660
_examples_global_variables_g_flag:
    DB 0
_examples_global_variables_g_calc:
    DB 15
_examples_global_variables_g_shift:
    DW 256
_examples_global_variables_g_masked:
    DB 15
_examples_global_variables_g_uninit_byte:
    DB 0
_examples_global_variables_g_uninit_word:
    DW 0

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.global_variables.main
_examples_global_variables_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = load ......examples.global_variables.g_byte
    LD HL, ($F000)
    ; r2 = 42
    LD A, 42
    LD B, A         ; Store to physical register B
    ; r3 = r1 == r2
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r3, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; r4 = load ......examples.global_variables.g_word
    LD HL, ($F020)
    ; r5 = 4660
    LD HL, 4660
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; r6 = r4 == r5
    LD D, H
    LD E, L
    LD HL, ($F00A)    ; Virtual register 5 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD D, H
    LD E, L
    ; jump_if_not r6, else_3
    LD A, E
    OR A
    JP Z, else_3
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; r7 = load ......examples.global_variables.g_flag
    LD HL, ($F040)
    ; jump_if_not r7, else_5
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_5
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; r8 = load ......examples.global_variables.g_calc
    LD HL, ($F060)
    ; r9 = 15
    LD A, 15
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r10 = r8 == r9
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r10, else_7
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_7
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; end_if_8:
end_if_8:
    ; r11 = load ......examples.global_variables.g_shift
    LD HL, ($F080)
    ; Register 11 already in HL
    ; r12 = 256
    LD HL, 256
    LD ($F018), HL    ; Virtual register 12 to memory
    ; r13 = r11 == r12
    ; Register 11 already in HL
    LD D, H
    LD E, L
    LD HL, ($F018)    ; Virtual register 12 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    LD B, H
    LD C, L
    ; jump_if_not r13, else_9
    LD A, C
    OR A
    JP Z, else_9
    ; jump end_if_10
    JP end_if_10
    ; else_9:
else_9:
    ; end_if_10:
end_if_10:
    ; r14 = load ......examples.global_variables.g_masked
    LD HL, ($F0A0)
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; r15 = 15
    LD A, 15
    LD H, A         ; Store to physical register H
    ; r16 = r14 == r15
    LD HL, ($F01C)    ; Virtual register 14 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    ; jump_if_not r16, else_11
    LD A, L
    OR A
    JP Z, else_11
    ; jump end_if_12
    JP end_if_12
    ; else_11:
else_11:
    ; end_if_12:
end_if_12:
    ; unknown op 57
