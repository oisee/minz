; MinZ generated code
; Generated: 2025-08-03 15:05:43


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.main.main
_examples_main_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r1 = call clear_screen
    ; Call to clear_screen (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ......examples.main.clear_screen
    ; r3 = call set_border
    ; Call to set_border (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ......examples.main.set_border
    ; loop_1:
loop_1:
    ; r10 = load counter
    LD HL, ($F010)
    ; r11 = 1000
    LD HL, 1000
    LD ($F016), HL    ; Virtual register 11 to memory
    ; r12 = r10 < r11
    LD D, H
    LD E, L
    LD HL, ($F016)    ; Virtual register 11 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD D, H
    LD E, L
    ; jump_if_not r12, end_loop_2
    LD A, E
    OR A
    JP Z, end_loop_2
    ; r16 = load x
    LD A, ($F008)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r17 = 20
    LD A, 20
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r18 = r16 > r17
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L4
    JP P, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r18, else_3
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_3
    ; r23 = load y
    LD A, ($F00C)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r24 = 20
    LD A, 20
    LD ($F030), A     ; Virtual register 24 to memory
    ; r25 = r23 > r24
    LD D, H
    LD E, L
    LD HL, ($F030)    ; Virtual register 24 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L6
    JP P, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r25, else_5
    LD A, H
    OR A
    JP Z, else_5
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; jump end_if_4
    JP end_if_4
    ; else_3:
else_3:
    ; end_if_4:
end_if_4:
    ; r29 = call draw_pixel
    ; Call to draw_pixel (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F038)    ; Virtual register 28 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F036)    ; Virtual register 27 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.main.draw_pixel
    LD A, ($F036)     ; Virtual register 27 from memory
    LD (x_imm0), A        ; Patch x
    LD A, ($F038)     ; Virtual register 28 from memory
    LD (y_imm0), A        ; Patch y
    CALL ......examples.main.draw_pixel
    ; r31 = call delay
    ; Call to delay (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F03C)    ; Virtual register 30 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ......examples.main.delay
    LD HL, ($F03C)    ; Virtual register 30 from memory
    LD (count_imm0), HL       ; Patch count (atomic)
    CALL ......examples.main.delay
    ; Register 31 already in HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.main.clear_screen
_examples_main_clear_screen:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; loop_7:
loop_7:
    ; r3 = load addr
    LD HL, ($F002)
    ; Folded: 
    LD HL, 22528
    ; r7 = r3 < r6
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; Register 7 already in HL
    ; jump_if_not r7, end_loop_8
    LD A, L
    OR A
    JP Z, end_loop_8
    ; jump loop_7
    JP loop_7
    ; end_loop_8:
end_loop_8:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.main.set_border
_examples_main_set_border:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.main.draw_pixel
_examples_main_draw_pixel:
; TRUE SMC function with immediate anchors
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    LD L, A         ; Store to HL (low byte)
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    LD L, A         ; Store to physical register L
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.main.delay
_examples_main_delay:
; TRUE SMC function with immediate anchors
    ; loop_9:
loop_9:
    ; r4 = load i
    LD HL, ($F004)
    ; Register 4 already in HL
count_immOP:
    LD HL, 0       ; count anchor (will be patched)
count_imm0 EQU count_immOP+1
    ; Register 5 already in HL
    ; r6 = r4 < r5
    ; Register 4 already in HL
    LD D, H
    LD E, L
    ; Register 5 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    LD B, H
    LD C, L
    ; jump_if_not r6, end_loop_10
    LD A, C
    OR A
    JP Z, end_loop_10
    ; jump loop_9
    JP loop_9
    ; end_loop_10:
end_loop_10:
    ; return
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x_imm0           ; ......examples.main.draw_pixel.x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; ......examples.main.draw_pixel.y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW count_imm0           ; ......examples.main.delay.count
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
