; MinZ generated code
; Generated: 2025-07-31 00:27:19


; Data section
    ORG $F000

str_0:
    DB 6    ; Length
    DB "Point("
    DB 0               ; Null terminator
str_1:
    DB 1    ; Length
    DB ","
    DB 0               ; Null terminator
str_2:
    DB 1    ; Length
    DB ")"
    DB 0               ; Null terminator
str_3:
    DB 7    ; Length
    DB "Circle("
    DB 0               ; Null terminator
str_4:
    DB 1    ; Length
    DB ","
    DB 0               ; Null terminator
str_5:
    DB 3    ; Length
    DB ",r="
    DB 0               ; Null terminator
str_6:
    DB 1    ; Length
    DB ")"
    DB 0               ; Null terminator
str_7:
    DB 18    ; Length
    DB "Drawing point at ("
    DB 0               ; Null terminator
str_8:
    DB 1    ; Length
    DB ","
    DB 0               ; Null terminator
str_9:
    DB 3    ; Length
    DB ")"
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_10:
    DB 19    ; Length
    DB "Drawing circle at ("
    DB 0               ; Null terminator
str_11:
    DB 1    ; Length
    DB ","
    DB 0               ; Null terminator
str_12:
    DB 9    ; Length
    DB ") radius "
    DB 0               ; Null terminator
str_13:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_14:
    DB 29    ; Length
    DB "=== Printable interface ==="
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_15:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_16:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_17:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_18:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_19:
    DB 30    ; Length
    DB 92
    DB "n=== Drawable interface ==="
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_20:
    DB 37    ; Length
    DB 92
    DB "nInterface system works perfectly!"
    DB 92
    DB "n"
    DB 0               ; Null terminator

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: u8.print
u8_print:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = param self
    ; Load parameter self
    ; print_u8(r2)
    ; Register 2 already in A
    CALL print_u8_decimal
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: u16.print
u16_print:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r2 = param self
    ; Load parameter self
    ; print_u16(r2)
    ; Register 2 already in HL
    CALL print_u16_decimal
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_interface_complete.Point.print
test_interface_complete_Point_print:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r2 = string(str_0)
    LD HL, str_0
    LD ($F004), HL    ; Virtual register 2 to memory
    ; print_string(r2)
    LD HL, ($F004)    ; Virtual register 2 from memory
    CALL print_string
    ; r3 = param self
    ; Load parameter self
    ; Load field x (offset 0)
    LD H, D
    LD L, E
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r5 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, C
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r6 = string(str_1)
    LD HL, str_1
    ; print_string(r6)
    CALL print_string
    ; r7 = param self
    ; Load parameter self
    ; Load field y (offset 1)
    LD H, B
    LD L, C
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r9 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r10 = string(str_2)
    LD HL, str_2
    ; Register 10 already in HL
    ; print_string(r10)
    ; Register 10 already in HL
    CALL print_string
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_interface_complete.Circle.print
test_interface_complete_Circle_print:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r2 = string(str_3)
    LD HL, str_3
    ; print_string(r2)
    CALL print_string
    ; r3 = param self
    ; Load parameter self
    ; Load field x (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F008)     ; Virtual register 4 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r6 = string(str_4)
    LD HL, str_4
    ; Register 6 already in HL
    ; print_string(r6)
    ; Register 6 already in HL
    CALL print_string
    ; r7 = param self
    ; Load parameter self
    ; Load field y (offset 1)
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F010)     ; Virtual register 8 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r10 = string(str_5)
    LD HL, str_5
    ; Register 10 already in HL
    ; print_string(r10)
    ; Register 10 already in HL
    CALL print_string
    ; r11 = param self
    ; Load parameter self
    ; Load field radius (offset 2)
    LD DE, 2
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F018), HL    ; Virtual register 12 to memory
    ; r13 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F018)     ; Virtual register 12 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r14 = string(str_6)
    LD HL, str_6
    ; Register 14 already in HL
    ; print_string(r14)
    ; Register 14 already in HL
    CALL print_string
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_interface_complete.Point.draw
test_interface_complete_Point_draw:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r2 = string(str_7)
    LD HL, str_7
    ; print_string(r2)
    CALL print_string
    ; r3 = param self
    ; Load parameter self
    ; Load field x (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F008)     ; Virtual register 4 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r6 = string(str_8)
    LD HL, str_8
    ; Register 6 already in HL
    ; print_string(r6)
    ; Register 6 already in HL
    CALL print_string
    ; r7 = param self
    ; Load parameter self
    ; Load field y (offset 1)
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F010)     ; Virtual register 8 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r10 = string(str_9)
    LD HL, str_9
    ; Register 10 already in HL
    ; print_string(r10)
    ; Register 10 already in HL
    CALL print_string
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_interface_complete.Circle.draw
test_interface_complete_Circle_draw:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r2 = string(str_10)
    LD HL, str_10
    ; print_string(r2)
    CALL print_string
    ; r3 = param self
    ; Load parameter self
    ; Load field x (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F008)     ; Virtual register 4 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r6 = string(str_11)
    LD HL, str_11
    ; Register 6 already in HL
    ; print_string(r6)
    ; Register 6 already in HL
    CALL print_string
    ; r7 = param self
    ; Load parameter self
    ; Load field y (offset 1)
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F010)     ; Virtual register 8 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r10 = string(str_12)
    LD HL, str_12
    ; Register 10 already in HL
    ; print_string(r10)
    ; Register 10 already in HL
    CALL print_string
    ; r11 = param self
    ; Load parameter self
    ; Load field radius (offset 2)
    LD DE, 2
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F018), HL    ; Virtual register 12 to memory
    ; r13 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F018)     ; Virtual register 12 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r14 = string(str_13)
    LD HL, str_13
    ; Register 14 already in HL
    ; print_string(r14)
    ; Register 14 already in HL
    CALL print_string
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_interface_complete.main
test_interface_complete_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 42
    LD A, 42
    LD H, A         ; Store to physical register H
    ; store , r2
    LD A, H
    LD ($F002), A
    ; r4 = 1000
    LD HL, 1000
    ; store , r4
    LD ($F006), HL
    ; Allocate struct Point
    LD HL, -2
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r7 = 10
    LD A, 10
    LD ($F00E), A     ; Virtual register 7 to memory
    ; Store to Point.x
    PUSH HL
    LD HL, ($F00E)    ; Virtual register 7 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r8 = 20
    LD A, 20
    LD L, A         ; Store to physical register L
    ; Store to Point.y
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store , r6
    LD ($F00A), HL
    ; Allocate struct Circle
    LD HL, -3
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r11 = 5
    LD A, 5
    LD ($F016), A     ; Virtual register 11 to memory
    ; Store to Circle.x
    PUSH HL
    LD HL, ($F016)    ; Virtual register 11 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r12 = 15
    LD A, 15
    LD L, A         ; Store to physical register L
    ; Store to Circle.y
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r13 = 3
    LD A, 3
    LD ($F01A), A     ; Virtual register 13 to memory
    ; Store to Circle.radius
    LD DE, 2
    ADD HL, DE
    PUSH HL
    LD HL, ($F01A)    ; Virtual register 13 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store , r10
    LD ($F012), HL
    ; r14 = string(str_14)
    LD HL, str_14
    ; print_string(r14)
    CALL print_string
    ; r15 = load x
    LD A, ($F002)
    LD ($F01E), A     ; Virtual register 15 to memory
    ; r16 = call u8.print
    ; Call to u8.print (args: 1)
    ; Register-based parameter passing
    LD A, ($F01E)     ; Virtual register 15 from memory
    ; Parameter self in A
    ; Found function, UsesTrueSMC=false
    CALL u8.print
    ; r17 = string(str_15)
    LD HL, str_15
    ; print_string(r17)
    CALL print_string
    ; r18 = load big
    LD HL, ($F006)
    LD ($F024), HL    ; Virtual register 18 to memory
    ; r19 = call u16.print
    ; Call to u16.print (args: 1)
    ; Register-based parameter passing
    LD HL, ($F024)    ; Virtual register 18 from memory
    ; Parameter self in HL
    ; Found function, UsesTrueSMC=false
    CALL u16.print
    ; r20 = string(str_16)
    LD HL, str_16
    ; print_string(r20)
    CALL print_string
    ; r21 = load p
    LD HL, ($F00A)
    LD ($F02A), HL    ; Virtual register 21 to memory
    ; r22 = call test_interface_complete.Point.print
    ; Call to test_interface_complete.Point.print (args: 1)
    ; Register-based parameter passing
    LD HL, ($F02A)    ; Virtual register 21 from memory
    ; Parameter self in HL
    ; Found function, UsesTrueSMC=false
    CALL test_interface_complete.Point.print
    ; r23 = string(str_17)
    LD HL, str_17
    ; print_string(r23)
    CALL print_string
    ; r24 = load c
    LD HL, ($F012)
    LD ($F030), HL    ; Virtual register 24 to memory
    ; r25 = call test_interface_complete.Circle.print
    ; Call to test_interface_complete.Circle.print (args: 1)
    ; Register-based parameter passing
    LD HL, ($F030)    ; Virtual register 24 from memory
    ; Parameter self in HL
    ; Found function, UsesTrueSMC=false
    CALL test_interface_complete.Circle.print
    ; r26 = string(str_18)
    LD HL, str_18
    ; print_string(r26)
    CALL print_string
    ; r27 = string(str_19)
    LD HL, str_19
    LD ($F036), HL    ; Virtual register 27 to memory
    ; print_string(r27)
    LD HL, ($F036)    ; Virtual register 27 from memory
    CALL print_string
    ; r28 = load p
    LD HL, ($F00A)
    ; r29 = call test_interface_complete.Point.draw
    ; Call to test_interface_complete.Point.draw (args: 1)
    ; Register-based parameter passing
    ; Parameter self in HL
    ; Found function, UsesTrueSMC=false
    CALL test_interface_complete.Point.draw
    ; r30 = load c
    LD HL, ($F012)
    ; Register 30 already in HL
    ; r31 = call test_interface_complete.Circle.draw
    ; Call to test_interface_complete.Circle.draw (args: 1)
    ; Register-based parameter passing
    ; Register 30 already in HL
    ; Parameter self in HL
    ; Found function, UsesTrueSMC=false
    CALL test_interface_complete.Circle.draw
    ; r32 = string(str_20)
    LD HL, str_20
    ; print_string(r32)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
