; MinZ generated code
; Generated: 2025-08-02 13:03:26


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.hardware_registers.main
.Users_alice_dev_minz_ts_examples_hardware_registers_main:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -14
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    ; r2 = 18
    LD A, 18
    ; Register 2 already in A
    ; store , r2
    ; Register 2 already in A
    LD (IX_1), A
    ; r4 = load border_val
    LD A, (IX_1)
    LD ($F008), A     ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD (IX_2), L
    LD (IX_1), H
    ; r6 = load border
    LD L, (IX_2)
    LD H, (IX_1)
    ; Load bit field border_color (offset 0, width 3)
    LD A, E
    AND 7
    LD ($F00E), A     ; Virtual register 7 to memory
    ; store , r7
    LD A, ($F00E)     ; Virtual register 7 from memory
    LD (IX_3), A
    ; r9 = 1
    LD A, 1
    LD ($F012), A     ; Virtual register 9 to memory
    ; r10 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r11 = r9 << r10
    ; Shift left
    LD A, ($F012)     ; Virtual register 9 from memory
    LD B, A       ; B = value to shift
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_0
    LD B, C       ; B = counter
.shl_loop_0:
    DEC B
    JP M, .shl_done_0
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_0
.shl_done_0:
    LD L, A
    LD H, 0
    ; r12 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r13 = 8
    LD A, 8
    LD B, A         ; Store to physical register B
    ; r14 = r12 << r13
    ; Shift left
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD B, A       ; B = value to shift
    LD A, B
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_1
    LD B, C       ; B = counter
.shl_loop_1:
    DEC B
    JP M, .shl_done_1
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_1
.shl_done_1:
    LD L, A
    LD H, 0
    ; r15 = r11 | r14
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    ; r16 = 42
    LD A, 42
    LD ($F020), A     ; Virtual register 16 to memory
    ; r17 = r15 | r16
    LD D, H
    LD E, L
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    ; store , r17
    LD (IX_5), L
    LD (IX_4), H
    ; r19 = load mem_val
    LD L, (IX_5)
    LD H, (IX_4)
    ; store , r19
    LD (IX_7), L
    LD (IX_6), H
    ; r21 = load mapper
    LD L, (IX_7)
    LD H, (IX_6)
    ; Load bit field page_number (offset 0, width 8)
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    AND 255
    LD ($F02C), A     ; Virtual register 22 to memory
    ; store , r22
    LD A, ($F02C)     ; Virtual register 22 from memory
    LD (IX_8), A
    ; r24 = 150
    LD A, 150
    LD ($F030), A     ; Virtual register 24 to memory
    ; r25 = 8
    LD A, 8
    LD H, A         ; Store to physical register H
    ; r26 = r24 << r25
    ; Shift left
    LD A, ($F030)     ; Virtual register 24 from memory
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_2
    LD B, C       ; B = counter
.shl_loop_2:
    DEC B
    JP M, .shl_done_2
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_2
.shl_done_2:
    LD L, A
    LD H, 0
    ; r27 = 100
    LD A, 100
    LD ($F036), A     ; Virtual register 27 to memory
    ; r28 = r26 | r27
    LD D, H
    LD E, L
    LD HL, ($F036)    ; Virtual register 27 from memory
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    ; store , r28
    LD (IX_10), L
    LD (IX_9), H
    ; r30 = load sprite_val
    LD L, (IX_10)
    LD H, (IX_9)
    ; Register 30 already in HL
    ; store , r30
    ; Register 30 already in HL
    LD (IX_12), L
    LD (IX_11), H
    ; r32 = load sprite
    LD L, (IX_12)
    LD H, (IX_11)
    ; Load bit field x_coord (offset 0, width 8)
    LD A, L
    AND 255
    LD H, A         ; Store to physical register H
    ; store , r33
    LD A, H
    LD (IX_13), A
    ; r35 = load sprite
    LD L, (IX_12)
    LD H, (IX_11)
    ; Load bit field y_coord (offset 8, width 8)
    LD A, L
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    SRL A
    AND 255
    LD H, A         ; Store to physical register H
    ; store , r36
    LD A, H
    LD (IX_14), A
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
