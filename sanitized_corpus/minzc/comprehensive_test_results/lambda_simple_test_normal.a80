; MinZ generated code
; Generated: 2025-08-02 13:03:26


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: lambda_.Users.alice.dev.minz-ts.examples.lambda_simple_test.main_0
lambda_Users_alice_dev_minz_ts_examples_lambda_simple_test_main_0:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F000), A     ; Virtual register 0 to memory
    ; r0 = load x
    LD HL, ($F000)
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_simple_test.main
.Users_alice_dev_minz_ts_examples_lambda_simple_test_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = addr()
    LD HL, ($F000)    ; Virtual register 0 from memory
    ; r3 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 4 already in HL
    ; store , r4
    ; Register 4 already in HL
    LD ($F002), HL
    ; r6 = 10
    LD A, 10
    LD D, A         ; Store to physical register D
    ; r7 = load 
    LD HL, ($F002)
    ; r8 = call_indirect r7
    ; Indirect call through r7
    ; Register-based parameter passing for lambda
    ; Parameter 0 in HL
    PUSH HL       ; Save parameter for lambda
    EX (SP), HL   ; Swap function address with parameter
    EX DE, HL     ; Parameter in DE, function in HL
    EX (SP), HL   ; Function address on stack, parameter in HL
    POP DE        ; Function address in DE
EX_DE_HL_Swap: function in HL, parameter in DE
    PUSH DE       ; Push parameter
    CALL .call_indirect_0
    JR .call_indirect_end_0
.call_indirect_0:
    JP (HL)       ; Jump to function address
.call_indirect_end_0:
    POP DE        ; Clean up parameter
    ; store , r8
    LD ($F00A), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
