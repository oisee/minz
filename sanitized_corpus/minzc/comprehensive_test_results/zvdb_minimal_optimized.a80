; MinZ generated code
; Generated: 2025-08-02 13:03:29


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.zvdb_minimal.hamming8
.Users_alice_dev_minz_ts_examples_zvdb_minimal_hamming8:
; TRUE SMC function with immediate anchors
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
b_immOP:
    LD B, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    ; r36 = load count
    LD HL, ($F00E)
    ; return r36
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.zvdb_minimal.add_vector
.Users_alice_dev_minz_ts_examples_zvdb_minimal_add_vector:
; TRUE SMC function with immediate anchors
store_immOP:
    LD HL, 0       ; store anchor (will be patched)
store_imm0 EQU store_immOP+1
    LD ($F006), HL    ; Virtual register 3 to memory
    ; Load field count (offset 256)
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD DE, 256
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r5 = 255
    LD A, 255
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r6 = r4 >= r5
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP P, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r6, else_1
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_1
    ; return
    POP DE
    RET
    ; else_1:
else_1:
vec_immOP:
    LD A, 0        ; vec anchor (will be patched)
vec_imm0 EQU vec_immOP+1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    LD HL, (store_imm0)   ; Reuse from anchor
    LD D, H
    LD E, L
    LD HL, (store_imm0)   ; Reuse from anchor
    LD B, H
    LD C, L
    ; Store to array[index] (u8)
    ; Register 12 already in HL
    PUSH HL
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    POP HL
    LD (HL), A
    LD HL, (store_imm0)   ; Reuse from anchor
    ; Register 13 already in HL
    LD HL, (store_imm0)   ; Reuse from anchor
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return
    POP DE
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.zvdb_minimal.find_nearest
.Users_alice_dev_minz_ts_examples_zvdb_minimal_find_nearest:
; TRUE SMC function with immediate anchors
    ; loop_3:
loop_3:
    ; r9 = load i
    LD A, ($F00E)
    LD L, A         ; Store to HL (low byte)
store_immOP:
    LD HL, 0       ; store anchor (will be patched)
store_imm0 EQU store_immOP+1
    ; Load field count (offset 256)
    LD DE, 256
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F016), HL    ; Virtual register 11 to memory
    ; r12 = r9 < r11
    ; Register 9 already in HL
    LD D, H
    LD E, L
    LD HL, ($F016)    ; Virtual register 11 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r12, end_loop_4
    LD A, L
    OR A
    JP Z, end_loop_4
query_immOP:
    LD A, 0        ; query anchor (will be patched)
query_imm0 EQU query_immOP+1
    LD L, A         ; Store to HL (low byte)
    LD HL, (store_imm0)   ; Reuse from anchor
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F024), A     ; Virtual register 18 to memory
    ; r19 = call hamming8
    ; Call to hamming8 (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F024)    ; Virtual register 18 from memory
    PUSH HL       ; Argument 1
    ; Register 14 already in HL
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.zvdb_minimal.hamming8
    LD A, L
    LD (a_imm0), A        ; Patch a
    LD A, ($F024)     ; Virtual register 18 from memory
    LD (b_imm0), A        ; Patch b
    CALL .Users_alice_dev_minz_ts_examples_zvdb_minimal_hamming8
    ; Register 19 already in HL
    ; r20 = load dist
    LD HL, ($F01A)
    ; r21 = load best_dist
    LD A, ($F00A)
    LD L, A         ; Store to physical register L
    ; r22 = r20 < r21
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    LD ($F02C), HL    ; Virtual register 22 to memory
    ; jump_if_not r22, else_5
    LD A, ($F02C)     ; Virtual register 22 from memory
    OR A
    JP Z, else_5
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r28 = load best_idx
    LD A, ($F006)
    LD L, A         ; Store to HL (low byte)
    ; return r28
    ; Register 28 already in HL
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.zvdb_minimal.main
.Users_alice_dev_minz_ts_examples_zvdb_minimal_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r5 = &r4
    ; Address-of operation for register r4
    LD HL, $F008  ; Variable address
    ; r7 = call add_vector
    ; Call to add_vector (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.zvdb_minimal.add_vector
    LD (store_imm0), HL       ; Patch store (atomic)
    LD A, ($F00C)     ; Virtual register 6 from memory
    LD (vec_imm0), A        ; Patch vec
    CALL .Users_alice_dev_minz_ts_examples_zvdb_minimal_add_vector
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r9 = &r8
    ; Address-of operation for register r8
    LD HL, $F010  ; Variable address
    ; r11 = call add_vector
    ; Call to add_vector (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F014)    ; Virtual register 10 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.zvdb_minimal.add_vector
    LD (store_imm0), HL       ; Patch store (atomic)
    LD A, ($F014)     ; Virtual register 10 from memory
    LD (vec_imm0), A        ; Patch vec
    CALL .Users_alice_dev_minz_ts_examples_zvdb_minimal_add_vector
    LD ($F016), HL    ; Virtual register 11 to memory
    ; r13 = &r12
    ; Address-of operation for register r12
    LD HL, $F018  ; Variable address
    ; r15 = call add_vector
    ; Call to add_vector (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F01C)    ; Virtual register 14 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.zvdb_minimal.add_vector
    LD (store_imm0), HL       ; Patch store (atomic)
    LD A, ($F01C)     ; Virtual register 14 from memory
    LD (vec_imm0), A        ; Patch vec
    CALL .Users_alice_dev_minz_ts_examples_zvdb_minimal_add_vector
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; r17 = &r16
    ; Address-of operation for register r16
    LD HL, $F020  ; Variable address
    ; r19 = call add_vector
    ; Call to add_vector (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F024)    ; Virtual register 18 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.zvdb_minimal.add_vector
    LD (store_imm0), HL       ; Patch store (atomic)
    LD A, ($F024)     ; Virtual register 18 from memory
    LD (vec_imm0), A        ; Patch vec
    CALL .Users_alice_dev_minz_ts_examples_zvdb_minimal_add_vector
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r24 = &r23
    ; Address-of operation for register r23
    LD HL, $F02E  ; Variable address
    ; r26 = call find_nearest
    ; Call to find_nearest (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F032)    ; Virtual register 25 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.zvdb_minimal.find_nearest
    LD (store_imm0), HL       ; Patch store (atomic)
    LD A, ($F032)     ; Virtual register 25 from memory
    LD (query_imm0), A        ; Patch query
    CALL .Users_alice_dev_minz_ts_examples_zvdb_minimal_find_nearest
    ; Register 26 already in HL
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW a_imm0           ; .Users_alice_dev_minz_ts_examples_zvdb_minimal_hamming8_a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b_imm0           ; .Users_alice_dev_minz_ts_examples_zvdb_minimal_hamming8_b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW store_imm0           ; .Users_alice_dev_minz_ts_examples_zvdb_minimal_add_vector_store
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW vec_imm0           ; .Users_alice_dev_minz_ts_examples_zvdb_minimal_add_vector_vec
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW store_imm0           ; .Users_alice_dev_minz_ts_examples_zvdb_minimal_find_nearest_store
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW query_imm0           ; .Users_alice_dev_minz_ts_examples_zvdb_minimal_find_nearest_query
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
