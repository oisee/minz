; MinZ generated code
; Generated: 2025-08-02 13:03:26


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda$add_0
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_basic_lambda_add_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_basic_lambda_add_0_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_basic_lambda_add_0_param_y:
    LD DE, #0000   ; SMC parameter y (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_basic_lambda
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_basic_lambda:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 5
    LD A, 5
    LD E, A         ; Store to physical register E
    ; r2 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r3 = call add
    ; Call to add (args: 2)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    CALL add
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_reference$double_1
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_reference_double_1:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_reference_double_1_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r2 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r3 = r1 * r2
    ; 8-bit multiplication
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD B, A       ; B = multiplicand
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_reference
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_reference:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 10
    LD A, 10
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = call f
    ; Call to f (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F002)    ; Virtual register 1 from memory
    PUSH HL       ; Argument 0
    CALL f
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations$add5_2
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_with_operations_add5_2:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_with_operations_add5_2_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r2 = 5
    LD A, 5
    LD D, A         ; Store to physical register D
    ; r3 = r1 + r2
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations$mul2_3
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_with_operations_mul2_3:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_with_operations_mul2_3_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r2 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r3 = r1 * r2
    ; 8-bit multiplication
    ; Register 1 already in A
    LD B, A       ; B = multiplicand
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_1
.mul_loop_1:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_1
.mul_done_1:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_with_operations
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_with_operations:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = call add5
    ; Call to add5 (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    CALL add5
    LD ($F006), HL    ; Virtual register 3 to memory
    ; store , r3
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD ($F002), HL
    ; r5 = load a
    LD HL, ($F002)
    ; r6 = call mul2
    ; Call to mul2 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL mul2
    ; store , r6
    LD ($F008), HL
    ; r7 = load b
    LD HL, ($F008)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_in_expression$increment_4
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_in_expression_increment_4:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_in_expression_increment_4_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r2 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r3 = r1 + r2
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.test_lambda_in_expression
.Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_in_expression:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 5
    LD A, 5
    ; Register 1 already in A
    ; r2 = call increment
    ; Call to increment (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL increment
    ; r3 = 10
    LD A, 10
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = call increment
    ; Call to increment (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 0
    CALL increment
    ; r5 = r2 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.lambda_transform_test.main
.Users_alice_dev_minz_ts_examples_lambda_transform_test_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = call test_basic_lambda
    ; Call to test_basic_lambda (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_lambda_transform_test_test_basic_lambda
    LD ($F004), HL    ; Virtual register 2 to memory
    ; store , r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD ($F002), HL
    ; r4 = call test_lambda_reference
    ; Call to test_lambda_reference (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_reference
    ; store , r4
    LD ($F006), HL
    ; r6 = call test_lambda_with_operations
    ; Call to test_lambda_with_operations (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_with_operations
    ; store , r6
    LD ($F00A), HL
    ; r8 = call test_lambda_in_expression
    ; Call to test_lambda_in_expression (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_lambda_transform_test_test_lambda_in_expression
    ; store , r8
    LD ($F00E), HL
    ; r9 = load a
    LD HL, ($F002)
    ; r10 = load b
    LD HL, ($F006)
    ; r11 = r9 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    LD D, H
    LD E, L
    ; r12 = load c
    LD HL, ($F00A)
    ; Register 12 already in HL
    ; r13 = r11 + r12
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ; Register 12 already in HL
    ADD HL, DE
    LD B, H
    LD C, L
    ; r14 = load d
    LD HL, ($F00E)
    ; Register 14 already in HL
    ; r15 = r13 + r14
    LD H, B
    LD L, C
    LD D, H
    LD E, L
    ; Register 14 already in HL
    ADD HL, DE
    ; Register 15 already in HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
