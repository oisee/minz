; MinZ generated code
; Generated: 2025-08-02 13:03:29


; Data section
    ORG $F000

str_0:
    DB 38    ; Length
    DB "Traffic Light Simulation Starting..."
    DB 92
    DB "n"
str_1:
    DB 6    ; Length
    DB "Cycle "
str_2:
    DB 8    ; Length
DB: State "
str_3:
    DB 5    ; Length
    DB " for "
str_4:
    DB 10    ; Length
    DB " seconds"
    DB 92
    DB "n"
str_5:
    DB 39    ; Length
    DB 92
    DB "nEMERGENCY! Switching to flashing..."
    DB 92
    DB "n"
str_6:
    DB 17    ; Length
DB_Emergency_state: "
str_7:
    DB 2    ; Length
    DB 92
    DB "n"
str_8:
    DB 30    ; Length
    DB "Emergency over, resetting..."
    DB 92
    DB "n"
str_9:
    DB 16    ; Length
DB_Reset_to_state: "
str_10:
    DB 2    ; Length
    DB 92
    DB "n"

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition
.Users_alice_dev_minz_ts_examples_traffic_light_fsm_transition:
; TRUE SMC function with immediate anchors
current_immOP:
    LD A, 0        ; current anchor (will be patched)
current_imm0 EQU current_immOP+1
    ; jump_if r4, case_arm_0_2
    LD A, B
    OR A
    JP NZ, case_arm_0_2
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_timing
.Users_alice_dev_minz_ts_examples_traffic_light_fsm_get_timing:
; TRUE SMC function with immediate anchors
state_immOP:
    LD C, 0        ; state anchor (will be patched)
state_imm0 EQU state_immOP+1
    ; jump_if r3, case_arm_0_7
    LD A, D
    OR A
    JP NZ, case_arm_0_7
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code
.Users_alice_dev_minz_ts_examples_traffic_light_fsm_get_color_code:
; TRUE SMC function with immediate anchors
state_immOP:
    LD E, 0        ; state anchor (will be patched)
state_imm0 EQU state_immOP+1
    ; jump_if r3, case_arm_0_12
    LD A, H
    OR A
    JP NZ, case_arm_0_12
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.simulate_traffic_light
.Users_alice_dev_minz_ts_examples_traffic_light_fsm_simulate_traffic_light:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r5 = string(str_0)
    LD HL, str_0
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; print_string(r5)
    LD HL, ($F00A)    ; Virtual register 5 from memory
    CALL print_string
    ; loop_16:
loop_16:
    ; r6 = load cycle_count
    LD A, ($F006)
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r8 = r6 < r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r8, end_loop_17
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, end_loop_17
    ; r9 = string(str_1)
    LD HL, str_1
    ; print_string(r9)
    CALL print_string
    ; print_u8(r10)
    ; Register 10 already in A
    CALL print_u8_decimal
    ; r11 = string(str_2)
    LD HL, str_2
    LD ($F016), HL    ; Virtual register 11 to memory
    ; print_string(r11)
    LD HL, ($F016)    ; Virtual register 11 from memory
    CALL print_string
    ; r13 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code
    LD A, ($F018)     ; Virtual register 12 from memory
    LD (state_imm0), A        ; Patch state
    CALL .Users_alice_dev_minz_ts_examples_traffic_light_fsm_get_color_code
    ; print_u8(r13)
    ; Register 13 already in A
    CALL print_u8_decimal
    ; r14 = string(str_3)
    LD HL, str_3
    ; print_string(r14)
    CALL print_string
    ; r16 = call get_timing
    ; Call to get_timing (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F01E)    ; Virtual register 15 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_timing
    LD A, ($F01E)     ; Virtual register 15 from memory
    LD (state_imm0), A        ; Patch state
    CALL .Users_alice_dev_minz_ts_examples_traffic_light_fsm_get_timing
    ; print_u8(r16)
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    CALL print_u8_decimal
    ; r17 = string(str_4)
    LD HL, str_4
    LD ($F022), HL    ; Virtual register 17 to memory
    ; print_string(r17)
    LD HL, ($F022)    ; Virtual register 17 from memory
    CALL print_string
    ; r20 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F024)    ; Virtual register 18 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition
    LD A, ($F024)     ; Virtual register 18 from memory
    LD (current_imm0), A        ; Patch current
    LD A, ($F026)     ; Virtual register 19 from memory
    LD (event_imm0), A        ; Patch event
    CALL .Users_alice_dev_minz_ts_examples_traffic_light_fsm_transition
    ; jump loop_16
    JP loop_16
    ; end_loop_17:
end_loop_17:
    ; r24 = string(str_5)
    LD HL, str_5
    LD ($F030), HL    ; Virtual register 24 to memory
    ; print_string(r24)
    LD HL, ($F030)    ; Virtual register 24 from memory
    CALL print_string
    ; r27 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F034)    ; Virtual register 26 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F032)    ; Virtual register 25 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition
    LD A, ($F032)     ; Virtual register 25 from memory
    LD (current_imm0), A        ; Patch current
    LD A, ($F034)     ; Virtual register 26 from memory
    LD (event_imm0), A        ; Patch event
    CALL .Users_alice_dev_minz_ts_examples_traffic_light_fsm_transition
    ; r28 = string(str_6)
    LD HL, str_6
    ; print_string(r28)
    CALL print_string
    ; r30 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F03A)    ; Virtual register 29 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code
    LD A, ($F03A)     ; Virtual register 29 from memory
    LD (state_imm0), A        ; Patch state
    CALL .Users_alice_dev_minz_ts_examples_traffic_light_fsm_get_color_code
    ; print_u8(r30)
    LD A, L
    CALL print_u8_decimal
    ; r31 = string(str_7)
    LD HL, str_7
    ; print_string(r31)
    CALL print_string
    ; r32 = string(str_8)
    LD HL, str_8
    ; print_string(r32)
    CALL print_string
    ; r35 = call transition
    ; Call to transition (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F044)    ; Virtual register 34 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F042)    ; Virtual register 33 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.traffic_light_fsm.transition
    LD A, ($F042)     ; Virtual register 33 from memory
    LD (current_imm0), A        ; Patch current
    LD A, ($F044)     ; Virtual register 34 from memory
    LD (event_imm0), A        ; Patch event
    CALL .Users_alice_dev_minz_ts_examples_traffic_light_fsm_transition
    ; r36 = string(str_9)
    LD HL, str_9
    ; print_string(r36)
    CALL print_string
    ; r38 = call get_color_code
    ; Call to get_color_code (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F04A)    ; Virtual register 37 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.traffic_light_fsm.get_color_code
    LD A, ($F04A)     ; Virtual register 37 from memory
    LD (state_imm0), A        ; Patch state
    CALL .Users_alice_dev_minz_ts_examples_traffic_light_fsm_get_color_code
    ; print_u8(r38)
    LD A, B
    CALL print_u8_decimal
    ; r39 = string(str_10)
    LD HL, str_10
    ; print_string(r39)
    CALL print_string
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.traffic_light_fsm.main
.Users_alice_dev_minz_ts_examples_traffic_light_fsm_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r1 = call simulate_traffic_light
    ; Call to simulate_traffic_light (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_traffic_light_fsm_simulate_traffic_light
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW current_imm0           ; .Users_alice_dev_minz_ts_examples_traffic_light_fsm_transition_current
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW event_imm0           ; .Users_alice_dev_minz_ts_examples_traffic_light_fsm_transition_event
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW state_imm0           ; .Users_alice_dev_minz_ts_examples_traffic_light_fsm_get_timing_state
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW state_imm0           ; .Users_alice_dev_minz_ts_examples_traffic_light_fsm_get_color_code_state
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
