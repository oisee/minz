; MinZ generated code
; Generated: 2025-08-02 13:03:27


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_auto
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_auto:
; TRUE SMC function with immediate anchors
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
b_immOP:
    LD B, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_register
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_register:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_stack
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_stack:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_smc
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_smc:
; TRUE SMC function with immediate anchors
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
b_immOP:
    LD A, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    LD L, A         ; Store to physical register L
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.add_virtual
.Users_alice_dev_minz_ts_examples_test_abi_comparison_add_virtual:
; IsSMCDefault=false, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.complex_calc
.Users_alice_dev_minz_ts_examples_test_abi_comparison_complex_calc:
; TRUE SMC function with immediate anchors
a_immOP:
    LD A, 0        ; a anchor (will be patched)
a_imm0 EQU a_immOP+1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
b_immOP:
    LD A, 0        ; b anchor (will be patched)
b_imm0 EQU b_immOP+1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
e_immOP:
    LD A, 0        ; e anchor (will be patched)
e_imm0 EQU e_immOP+1
    LD ($F016), A     ; Virtual register 11 to memory
f_immOP:
    LD A, 0        ; f anchor (will be patched)
f_imm0 EQU f_immOP+1
    LD ($F01A), A     ; Virtual register 13 to memory
c_immOP:
    LD HL, 0       ; c anchor (will be patched)
c_imm0 EQU c_immOP+1
    LD ($F020), HL    ; Virtual register 16 to memory
d_immOP:
    LD HL, 0       ; d anchor (will be patched)
d_imm0 EQU d_immOP+1
    LD B, H
    LD C, L
    ; r19 = load sum1
    LD HL, ($F00E)
    ; r20 = load sum2
    LD HL, ($F01E)
    ; Register 20 already in HL
    ; r21 = r19 + r20
    LD D, H
    LD E, L
    ; Register 20 already in HL
    ADD HL, DE
    ; return r21
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.factorial
.Users_alice_dev_minz_ts_examples_test_abi_comparison_factorial:
; TRUE SMC function with immediate anchors
n_immOP:
    LD A, 0        ; n anchor (will be patched)
n_imm0 EQU n_immOP+1
    LD L, A         ; Store to physical register L
    ; r3 = 1
    LD A, 1
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 <= r3
    LD D, H
    LD E, L
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, H
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; return r5
    RET
    ; else_1:
else_1:
    LD A, (n_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    LD A, (n_imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r10 = call factorial
    ; Call to factorial (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_abi_comparison.factorial
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (n_imm0), A        ; Patch n
    CALL .Users_alice_dev_minz_ts_examples_test_abi_comparison_factorial
    ; r11 = r6 * r10
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_2
.mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_2
.mul_done_2:
    ; Register 11 already in HL
    ; return r11
    ; Register 11 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.timer_interrupt
.Users_alice_dev_minz_ts_examples_test_abi_comparison_timer_interrupt:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi_comparison.memcpy
.Users_alice_dev_minz_ts_examples_test_abi_comparison_memcpy:
; TRUE SMC function with immediate anchors
    ; loop_3:
loop_3:
count_immOP:
    LD HL, 0       ; count anchor (will be patched)
count_imm0 EQU count_immOP+1
    ; unknown op 57
