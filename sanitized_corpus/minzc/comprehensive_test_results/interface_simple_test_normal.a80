; MinZ generated code
; Generated: 2025-08-02 13:03:26


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.interface_simple_test.Circle.draw
.Users_alice_dev_minz_ts_examples_interface_simple_test_Circle_draw:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_interface_simple_test_Circle_draw_param_self:
    LD HL, #0000   ; SMC parameter self
    ; Register 2 already in HL
    ; Load field x (offset 0)
    ; Register 2 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD HL, (.Users_alice_dev_minz_ts_examples_interface_simple_test_Circle_draw_param_self)
    LD D, H
    LD E, L
    ; Load field y (offset 1)
    LD H, D
    LD L, E
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r6 = r3 + r5
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r6
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.interface_simple_test.Circle.get_area
.Users_alice_dev_minz_ts_examples_interface_simple_test_Circle_get_area:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_interface_simple_test_Circle_get_area_param_self:
    LD HL, #0000   ; SMC parameter self
    LD B, H
    LD C, L
    ; Load field radius (offset 2)
    LD H, B
    LD L, C
    LD DE, 2
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; store , r4
    LD ($F004), HL
    ; r5 = load r16
    LD HL, ($F004)
    ; r6 = load r16
    LD HL, ($F004)
    ; r7 = r5 * r6
    ; 16-bit multiplication
    LD (mul_src1_0), HL  ; Save multiplicand
    LD (mul_src2_0), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_0)  ; DE = multiplicand
    LD BC, (mul_src2_0)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_0
.mul16_loop_0:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_0
.mul16_done_0:
mul_src1_0: DW 0
mul_src2_0: DW 0
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r8 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; r9 = r7 * r8
    ; 16-bit multiplication
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD (mul_src1_1), HL  ; Save multiplicand
    ; Register 8 already in HL
    LD (mul_src2_1), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_1)  ; DE = multiplicand
    LD BC, (mul_src2_1)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_1
.mul16_loop_1:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_1
.mul16_done_1:
mul_src1_1: DW 0
mul_src2_1: DW 0
    ; Register 9 already in HL
    ; return r9
    ; Register 9 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.interface_simple_test.main
.Users_alice_dev_minz_ts_examples_interface_simple_test_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Circle
    LD HL, -3
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r3 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; Store to Circle.x
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r4 = 20
    LD A, 20
    LD L, A         ; Store to physical register L
    ; Store to Circle.y
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r5 = 5
    LD A, 5
    LD ($F00A), A     ; Virtual register 5 to memory
    ; Store to Circle.radius
    LD DE, 2
    ADD HL, DE
    PUSH HL
    LD HL, ($F00A)    ; Virtual register 5 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store , r2
    LD ($F002), HL
    ; r7 = load circle
    LD HL, ($F002)
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = call .Users.alice.dev.minz-ts.examples.interface_simple_test.Circle.draw
    ; Call to .Users.alice.dev.minz-ts.examples.interface_simple_test.Circle.draw (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_interface_simple_test_Circle_draw
    ; store , r8
    LD ($F00C), HL
    ; r10 = load circle
    LD HL, ($F002)
    LD ($F014), HL    ; Virtual register 10 to memory
    ; r11 = call .Users.alice.dev.minz-ts.examples.interface_simple_test.Circle.get_area
    ; Call to .Users.alice.dev.minz-ts.examples.interface_simple_test.Circle.get_area (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F014)    ; Virtual register 10 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_interface_simple_test_Circle_get_area
    ; store , r11
    LD ($F012), HL
    ; r12 = load area
    LD HL, ($F012)
    ; Register 12 already in HL
    ; r13 = 75
    LD A, 75
    LD H, A         ; Store to physical register H
    ; r14 = r12 == r13
    ; Register 12 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; jump_if_not r14, else_1
    LD A, ($F01C)     ; Virtual register 14 from memory
    OR A
    JP Z, else_1
    ; r15 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; return r15
    ; Register 15 already in HL
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; r16 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; return r16
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
