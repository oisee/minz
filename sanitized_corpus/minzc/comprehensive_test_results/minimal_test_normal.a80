; MinZ generated code
; Generated: 2025-08-02 13:03:27


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.minimal_test.add
.Users_alice_dev_minz_ts_examples_minimal_test_add:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_minimal_test_add_param_a:
    LD HL, #0000   ; SMC parameter a
    ; Register 3 already in HL
.Users_alice_dev_minz_ts_examples_minimal_test_add_param_b:
    LD DE, #0000   ; SMC parameter b
    EX DE, HL      ; Move to HL for storage
    LD D, H
    LD E, L
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.minimal_test.test_arithmetic
.Users_alice_dev_minz_ts_examples_minimal_test_test_arithmetic:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    ; Register 2 already in A
    ; store , r2
    LD ($F002), HL
    ; r4 = 20
    LD A, 20
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store , r4
    LD ($F006), HL
    ; r6 = load x
    LD HL, ($F002)
    ; r7 = load y
    LD HL, ($F006)
    ; Register 7 already in HL
    ; r8 = call add
    ; Call to add (args: 2)
    ; Stack-based parameter passing
    ; Register 7 already in HL
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_minimal_test_add
    ; store , r8
    LD ($F00A), HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.minimal_test.test_struct
.Users_alice_dev_minz_ts_examples_minimal_test_test_struct:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Allocate struct Point
    LD HL, -4
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r3 = 100
    LD A, 100
    LD L, A         ; Store to HL (low byte)
    ; Store to Point.x
    PUSH HL
    ; Register 3 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r4 = 200
    LD A, 200
    LD L, A         ; Store to HL (low byte)
    ; Store to Point.y
    LD DE, 2
    ADD HL, DE
    PUSH HL
    ; Register 4 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store , r2
    LD ($F002), HL
    ; r6 = load p
    LD HL, ($F002)
    ; Load field x (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = load p
    LD HL, ($F002)
    ; Register 8 already in HL
    ; Load field y (offset 2)
    ; Register 8 already in HL
    LD DE, 2
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Register 9 already in HL
    ; r10 = r7 + r9
    LD HL, ($F00E)    ; Virtual register 7 from memory
    LD D, H
    LD E, L
    ; Register 9 already in HL
    ADD HL, DE
    ; Register 10 already in HL
    ; store , r10
    ; Register 10 already in HL
    LD ($F00A), HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.minimal_test.test_array
.Users_alice_dev_minz_ts_examples_minimal_test_test_array:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = load arr
    LD HL, ($F002)
    ; r4 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; store , r5
    LD ($F004), HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.minimal_test.main
.Users_alice_dev_minz_ts_examples_minimal_test_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call test_arithmetic
    ; Call to test_arithmetic (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_minimal_test_test_arithmetic
    ; Register 1 already in HL
    ; r2 = call test_struct
    ; Call to test_struct (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_minimal_test_test_struct
    ; r3 = call test_array
    ; Call to test_array (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_minimal_test_test_array
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
