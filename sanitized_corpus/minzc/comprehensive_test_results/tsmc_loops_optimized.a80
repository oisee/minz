; MinZ generated code
; Generated: 2025-08-02 13:03:29


; Data section
    ORG $F000

.Users_alice_dev_minz_ts_examples_tsmc_loops_i:
    DW 0

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.tsmc_loops.sum_array_tsmc
.Users_alice_dev_minz_ts_examples_tsmc_loops_sum_array_tsmc:
; TRUE SMC function with immediate anchors
    ; loop_1:
loop_1:
    ; r7 = load i
    LD HL, ($F00A)
count_immOP:
    LD HL, 0       ; count anchor (will be patched)
count_imm0 EQU count_immOP+1
    ; Register 8 already in HL
    ; r9 = r7 < r8
    LD D, H
    LD E, L
    ; Register 8 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD B, H
    LD C, L
    ; jump_if_not r9, end_loop_2
    LD A, C
    OR A
    JP Z, end_loop_2
arr_immOP:
    LD HL, 0       ; arr anchor (will be patched)
arr_imm0 EQU arr_immOP+1
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r12 = *r11
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    LD HL, (arr_imm0)   ; Reuse from anchor
    ; Update TSMC reference arr
    LD (arr_imm0), HL    ; Update TSMC reference immediate
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r20 = load sum
    LD HL, ($F006)
    ; return r20
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.tsmc_loops.find_max_tsmc
.Users_alice_dev_minz_ts_examples_tsmc_loops_find_max_tsmc:
; TRUE SMC function with immediate anchors
count_immOP:
    LD HL, 0       ; count anchor (will be patched)
count_imm0 EQU count_immOP+1
    ; Register 3 already in HL
    ; unknown op 57
