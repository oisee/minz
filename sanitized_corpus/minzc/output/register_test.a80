; MinZ generated code
; Generated: 2025-07-28 12:22:38


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.register_test.simple_add
_examples_register_test_simple_add:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD C, A         ; Store to physical register C
    LD A, E       ; Get parameter b
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param a
    ; Load parameter a
    ; r4 = param b
    ; Load parameter b
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.register_test.complex_calc
_examples_register_test_complex_calc:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD B, H
    LD C, L
    EX DE, HL     ; Get parameter y from DE
    POP HL        ; Get parameter z from stack
    LD ($F006), HL    ; Virtual register 3 to memory
    ; r5 = param x
    ; Load parameter x
    ; r6 = param y
    ; Load parameter y
    ; r7 = r5 + r6
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; store , r7
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD ($F000), HL
    ; r9 = param y
    ; Load parameter y
    ; r10 = param z
    ; Load parameter z
    ; r11 = r9 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 11 already in HL
    ; store , r11
    ; Register 11 already in HL
    LD ($F002), HL
    ; r13 = param x
    ; Load parameter x
    ; r14 = param z
    ; Load parameter z
    ; r15 = r13 + r14
    LD HL, ($F01A)    ; Virtual register 13 from memory
    LD D, H
    LD E, L
    ; Register 14 already in HL
    ADD HL, DE
    ; store , r15
    LD ($F004), HL
    ; r16 = load t1
    LD HL, ($F000)
    ; Register 16 already in HL
    ; r17 = load t2
    LD HL, ($F002)
    ; r18 = r16 + r17
    ; Register 16 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 18 already in HL
    ; r19 = load t3
    LD HL, ($F004)
    ; Register 19 already in HL
    ; r20 = r18 + r19
    ; Register 18 already in HL
    LD D, H
    LD E, L
    ; Register 19 already in HL
    ADD HL, DE
    ; return r20
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.register_test.timer_isr
_examples_register_test_timer_isr:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r2
    LD ($F002), HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.register_test.main
_examples_register_test_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r3 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; r4 = call simple_add
    ; Call to simple_add (args: 2)
    ; Register-based parameter passing
    LD A, H
    ; Parameter a in A
    LD A, L
    LD E, A       ; Parameter b in E
    ; Found function, UsesTrueSMC=false
    CALL simple_add
    LD ($F008), HL    ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD ($F002), HL
    ; r6 = 100
    LD A, 100
    LD L, A         ; Store to physical register L
    ; r7 = 200
    LD A, 200
    LD L, A         ; Store to HL (low byte)
    ; r8 = 300
    LD HL, 300
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = call complex_calc
    ; Call to complex_calc (args: 3)
    ; Register-based parameter passing
    ; Parameter x in HL
    LD D, H
    LD E, L
    ; Parameter y in DE
    LD HL, ($F010)    ; Virtual register 8 from memory
    PUSH HL       ; Parameter z on stack
    ; Found function, UsesTrueSMC=false
    CALL complex_calc
    ; Register 9 already in HL
    ; store , r9
    ; Register 9 already in HL
    LD ($F00A), HL
    ; return
    RET

    END main
