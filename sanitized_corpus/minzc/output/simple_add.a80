; MinZ generated code
; Generated: 2025-07-28 12:22:38


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_add.add
_examples_simple_add_add:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD B, H
    LD C, L
    EX DE, HL     ; Get parameter b from DE
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = param a
    ; Load parameter a
    ; r4 = param b
    ; Load parameter b
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.simple_add.main
_examples_simple_add_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    ; Register 2 already in A
    ; r3 = 20
    LD A, 20
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r4 = call add
    ; Call to add (args: 2)
    ; Register-based parameter passing
    ; Parameter a in HL
    EXX               ; Switch to shadow registers
    ; Parameter b in DE
    ; Found function, UsesTrueSMC=false
    CALL add
    ; store , r4
    LD ($F002), HL
    ; return
    RET

    END main
