; MinZ generated code
; Generated: 2025-07-28 12:22:38


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_registers.add_numbers
_examples_test_registers_add_numbers:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD B, H
    LD C, L
    EX DE, HL     ; Get parameter b from DE
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = param a
    ; Load parameter a
    ; r4 = param b
    ; Load parameter b
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_registers.complex_calc
_examples_test_registers_complex_calc:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    EX DE, HL     ; Get parameter y from DE
    ; Register 2 already in HL
    POP HL        ; Get parameter z from stack
    LD ($F006), HL    ; Virtual register 3 to memory
    ; r5 = param x
    ; Load parameter x
    ; r6 = param y
    ; Load parameter y
    ; r7 = r5 + r6
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r7
    LD ($F000), HL
    ; r9 = param y
    ; Load parameter y
    ; r10 = param z
    ; Load parameter z
    ; r11 = r9 + r10
    ; Register 9 already in HL
    LD D, H
    LD E, L
    LD HL, ($F014)    ; Virtual register 10 from memory
    ADD HL, DE
    ; store , r11
    LD ($F002), HL
    ; r13 = load a
    LD HL, ($F000)
    ; Register 13 already in HL
    ; r14 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r15 = r13 * r14
    ; 16-bit multiplication
    ; Register 13 already in HL
    LD (mul_src1_0), HL  ; Save multiplicand
    LD (mul_src2_0), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_0)  ; DE = multiplicand
    LD BC, (mul_src2_0)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_0
.mul16_loop_0:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_0
.mul16_done_0:
mul_src1_0: DW 0
mul_src2_0: DW 0
    ; store , r15
    LD ($F004), HL
    ; r17 = load b
    LD HL, ($F002)
    ; r18 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; r19 = r17 * r18
    ; 16-bit multiplication
    LD (mul_src1_1), HL  ; Save multiplicand
    ; Register 18 already in HL
    LD (mul_src2_1), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_1)  ; DE = multiplicand
    LD BC, (mul_src2_1)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_1
.mul16_loop_1:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_1
.mul16_done_1:
mul_src1_1: DW 0
mul_src2_1: DW 0
    ; store , r19
    LD ($F006), HL
    ; r20 = load c
    LD HL, ($F004)
    ; r21 = load d
    LD HL, ($F006)
    ; Register 21 already in HL
    ; r22 = r20 + r21
    LD D, H
    LD E, L
    ; Register 21 already in HL
    ADD HL, DE
    ; Register 22 already in HL
    ; return r22
    ; Register 22 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_registers.timer_interrupt
_examples_test_registers_timer_interrupt:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; store , r2
    ; Register 2 already in HL
    LD ($F002), HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_registers.process_array
_examples_test_registers_process_array:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    ; Register 1 already in HL
    EX DE, HL     ; Get parameter len from DE
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r4 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r4
    LD ($F000), HL
    ; r6 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r6
    LD ($F002), HL
    ; loop_1:
loop_1:
    ; r7 = load i
    LD HL, ($F002)
    ; Register 7 already in HL
    ; r8 = param len
    ; Load parameter len
    ; r9 = r7 < r8
    ; Register 7 already in HL
    LD D, H
    LD E, L
    ; Register 8 already in HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r9, end_loop_2
    LD A, H
    OR A
    JP Z, end_loop_2
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r10 = load sum
    LD HL, ($F000)
    ; return r10
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_registers.main
_examples_test_registers_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; r4 = call add_numbers
    ; Call to add_numbers (args: 2)
    ; Register-based parameter passing
    LD HL, ($F004)    ; Virtual register 2 from memory
    ; Parameter a in HL
    ; Parameter b in DE
    ; Found function, UsesTrueSMC=false
    CALL add_numbers
    ; store , r4
    LD ($F002), HL
    ; r6 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r7 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; r8 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; r9 = call complex_calc
    ; Call to complex_calc (args: 3)
    ; Register-based parameter passing
    ; Parameter x in HL
    ; Parameter y in DE
    ; Register 8 already in HL
    PUSH HL       ; Parameter z on stack
    ; Found function, UsesTrueSMC=false
    CALL complex_calc
    ; store , r9
    LD ($F00A), HL
    ; return
    RET

    END main
