; MinZ generated code
; Generated: 2025-07-28 12:22:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.asm_integration_tests.test_smc
_examples_asm_integration_tests_test_smc:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD C, A         ; Store to physical register C
    LD A, E       ; Get parameter y
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param x
    ; Load parameter x
    ; r4 = param y
    ; Load parameter y
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.asm_integration_tests.test_register
_examples_asm_integration_tests_test_register:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    LD A, E       ; Get parameter b
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 * r4
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.asm_integration_tests.test_stack
_examples_asm_integration_tests_test_stack:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    LD A, E       ; Get parameter count
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = load data
    LD HL, ($F000)
    ; r4 = load count
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 5 already in HL
    ; return r5
    ; Register 5 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.asm_integration_tests.test_shadow
_examples_asm_integration_tests_test_shadow:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = load x
    LD HL, ($F000)
    ; r3 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; unknown op 45
    ; Shift left
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD B, A       ; B = value to shift
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_1
    LD B, C       ; B = counter
.shl_loop_1:
    DEC B
    JP M, .shl_done_1
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_1
.shl_done_1:
    LD L, A
    LD H, 0
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.asm_integration_tests.test_virtual
_examples_asm_integration_tests_test_virtual:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    EX DE, HL     ; Get parameter b from DE
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 - r4
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; Register 5 already in HL
    ; return r5
    ; Register 5 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.asm_integration_tests.process_with_assembly
_examples_asm_integration_tests_process_with_assembly:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    ; r3 = load data
    LD HL, ($F000)
    ; Register 3 already in HL
    ; r4 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r5 = r3 * r4
    ; 16-bit multiplication
    ; Register 3 already in HL
    LD (mul_src1_2), HL  ; Save multiplicand
    LD (mul_src2_2), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_2)  ; DE = multiplicand
    LD BC, (mul_src2_2)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_2
.mul16_loop_2:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_2
.mul16_done_2:
mul_src1_2: DW 0
mul_src2_2: DW 0
    ; store , r5
    LD ($F000), HL
    ; r6 = load result
    LD HL, ($F000)
    ; return r6
    LD SP, IX
    POP IX
    RET

    END main
