; MinZ generated code
; Generated: 2025-07-28 12:22:38


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_smc_patching.add_nums
_examples_test_smc_patching_add_nums:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD C, A         ; Store to physical register C
    LD A, E       ; Get parameter y
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param x
    ; Load parameter x
    ; r4 = param y
    ; Load parameter y
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_smc_patching.calculate
_examples_test_smc_patching_calculate:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD E, A         ; Store to physical register E
    ; r3 = 3
    LD A, 3
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = call add_nums
    ; Call to add_nums (args: 2)
    ; Register-based parameter passing
    LD A, E
    ; Parameter x in A
    LD A, ($F006)     ; Virtual register 3 from memory
    LD E, A       ; Parameter y in E
    ; Found function, UsesTrueSMC=false
    CALL add_nums
    LD ($F008), HL    ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD ($F002), HL
    ; r6 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r7 = 20
    LD A, 20
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r8 = call add_nums
    ; Call to add_nums (args: 2)
    ; Register-based parameter passing
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    ; Parameter x in A
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD E, A       ; Parameter y in E
    ; Found function, UsesTrueSMC=false
    CALL add_nums
    ; store , r8
    LD ($F00A), HL
    ; r10 = load a
    LD HL, ($F002)
    ; r11 = load b
    LD HL, ($F00A)
    ; r12 = call add_nums
    ; Call to add_nums (args: 2)
    ; Register-based parameter passing
    LD A, B
    ; Parameter x in A
    ; Register 11 already in A
    LD E, A       ; Parameter y in E
    ; Found function, UsesTrueSMC=false
    CALL add_nums
    ; store , r12
    LD ($F012), HL
    ; r13 = load c
    LD HL, ($F012)
    ; return r13
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_smc_patching.start
_examples_test_smc_patching_start:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call calculate
    ; Call to calculate (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL calculate
    ; return r1
    RET

    END main
