; MinZ generated code
; Generated: 2025-07-28 12:22:37


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.bit_manipulation.set_bit
_examples_bit_manipulation_set_bit:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD D, A         ; Store to physical register D
    LD A, E       ; Get parameter bit
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r5 = param bit
    ; Load parameter bit
    ; unknown op 45
    ; Shift left
    LD A, B
    LD B, A       ; B = value to shift
    LD A, C
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_0
    LD B, C       ; B = counter
.shl_loop_0:
    DEC B
    JP M, .shl_done_0
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_0
.shl_done_0:
    LD L, A
    LD H, 0
    ; unknown op 42
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    ; return r7
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.bit_manipulation.clear_bit
_examples_bit_manipulation_clear_bit:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    LD A, E       ; Get parameter bit
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 1
    LD A, 1
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = param bit
    ; Load parameter bit
    ; unknown op 45
    ; Shift left
    LD A, ($F008)     ; Virtual register 4 from memory
    LD B, A       ; B = value to shift
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_1
    LD B, C       ; B = counter
.shl_loop_1:
    DEC B
    JP M, .shl_done_1
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_1
.shl_done_1:
    LD L, A
    LD H, 0
    ; unknown op 44
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    CPL           ; Complement A
    LD L, A         ; Store to physical register L
    ; unknown op 41
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; return r8
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.bit_manipulation.toggle_bit
_examples_bit_manipulation_toggle_bit:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    ; Register 1 already in A
    LD A, E       ; Get parameter bit
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r5 = param bit
    ; Load parameter bit
    ; unknown op 45
    ; Shift left
    LD A, L
    LD B, A       ; B = value to shift
    LD A, ($F00A)     ; Virtual register 5 from memory
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_2
    LD B, C       ; B = counter
.shl_loop_2:
    DEC B
    JP M, .shl_done_2
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_2
.shl_done_2:
    LD L, A
    LD H, 0
    ; unknown op 43
    LD D, H
    LD E, L
    LD A, L
    XOR E
    LD L, A
    LD A, H
    XOR D
    LD H, A
    ; return r7
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.bit_manipulation.test_bit
_examples_bit_manipulation_test_bit:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    LD A, E       ; Get parameter bit
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 1
    LD A, 1
    LD E, A         ; Store to physical register E
    ; r5 = param bit
    ; Load parameter bit
    ; unknown op 45
    ; Shift left
    LD A, E
    LD B, A       ; B = value to shift
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_3
    LD B, C       ; B = counter
.shl_loop_3:
    DEC B
    JP M, .shl_done_3
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_3
.shl_done_3:
    LD L, A
    LD H, 0
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; unknown op 41
    LD D, H
    LD E, L
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r8 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r9 = r7 != r8
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; return r9
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.bit_manipulation.count_bits
_examples_bit_manipulation_count_bits:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r3 = 0
    LD A, 0
    LD ($F006), A     ; Virtual register 3 to memory
    ; store , r3
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD ($F000), HL
    ; loop_1:
loop_1:
    ; r4 = param value
    ; Load parameter value
    ; r5 = 0
    LD A, 0
    LD B, A         ; Store to physical register B
    ; r6 = r4 != r5
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; jump_if_not r6, end_loop_2
    LD A, ($F00C)     ; Virtual register 6 from memory
    OR A
    JP Z, end_loop_2
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r7 = load count
    LD HL, ($F000)
    ; return r7
    LD SP, IX
    POP IX
    RET

    END main
