; MinZ generated code
; Generated: 2025-08-06 19:56:11


; Data section
    ORG $F000

test_lambda_iterators_numbers:
    DS 5

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: iter_lambda_test_lambda_iterators.main_0
iter_lambda_test_lambda_iterators_main_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r0 = load x
    LD HL, ($F000)
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r1 = 2
    LD A, 2
    ; Register 1 already in A
    ; r2 = r0 * r1
    ; 8-bit multiplication
    LD A, ($F000)     ; Virtual register 0 from memory
    LD B, A       ; B = multiplicand
    ; Register 1 already in A
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, iter_lambda_test_lambda_iterators_main_0_mul_done_0
iter_lambda_test_lambda_iterators_main_0_mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, iter_lambda_test_lambda_iterators_main_0_mul_loop_0
iter_lambda_test_lambda_iterators_main_0_mul_done_0:
    ; Return lambda result
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: iter_lambda_test_lambda_iterators.main_1
iter_lambda_test_lambda_iterators_main_1:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r0 = load x
    LD HL, ($F000)
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r1 = 5
    LD A, 5
    LD C, A         ; Store to physical register C
    ; r2 = r0 > r1
    LD HL, ($F000)    ; Virtual register 0 from memory
    LD E, C        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, iter_lambda_test_lambda_iterators_main_1_gt_check_zero_1
    LD HL, 0       ; False (negative)
    JP iter_lambda_test_lambda_iterators_main_1_gt_done_1
iter_lambda_test_lambda_iterators_main_1_gt_check_zero_1:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, iter_lambda_test_lambda_iterators_main_1_gt_false_1
    LD HL, 1       ; True (positive and non_zero)
    JP iter_lambda_test_lambda_iterators_main_1_gt_done_1
iter_lambda_test_lambda_iterators_main_1_gt_false_1:
    LD HL, 0       ; False (zero)
iter_lambda_test_lambda_iterators_main_1_gt_done_1:
    ; Return lambda result
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: iter_lambda_test_lambda_iterators.main_2
iter_lambda_test_lambda_iterators_main_2:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r0 = load x
    LD HL, ($F000)
    LD ($F000), HL    ; Virtual register 0 to memory
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F000)    ; Virtual register 0 from memory
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; Return lambda result
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_lambda_iterators.main
test_lambda_iterators_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = addr(test_lambda_iterators.numbers)
    LD HL, test_lambda_iterators.numbers
    LD ($F002), HL    ; Virtual register 1 to memory
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD E, A         ; Store to physical register E
    ; Pointer to array start
    LD HL, ($F002)    ; Virtual register 1 from memory
    LD D, H
    LD E, L
    ; djnz_loop_1:
test_lambda_iterators_main_djnz_loop_1:
    ; Load element via pointer
    LD H, D
    LD L, E
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Call iterator lambda: iter_lambda_test_lambda_iterators.main_0
    ; Call to iter_lambda_test_lambda_iterators.main_0 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL iter_lambda_test_lambda_iterators.main_0
    ; Call iterator lambda: iter_lambda_test_lambda_iterators.main_1
    ; Call to iter_lambda_test_lambda_iterators.main_1 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL iter_lambda_test_lambda_iterators.main_1
    ; Skip if filter predicate is false
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, test_lambda_iterators_main_filter_continue_2
    ; Call iterator lambda: iter_lambda_test_lambda_iterators.main_2
    ; Call to iter_lambda_test_lambda_iterators.main_2 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL iter_lambda_test_lambda_iterators.main_2
    ; filter_continue_2:
test_lambda_iterators_main_filter_continue_2:
    ; Advance to next element
    LD H, D
    LD L, E
    INC HL
    LD D, H
    LD E, L
    ; DJNZ - decrement and loop
    LD A, E
    LD B, A
    DJNZ djnz_loop_1
    LD A, B
    LD E, A         ; Store to physical register E
    ; r8 = 42
    LD A, 42
    LD L, A         ; Store to HL (low byte)
    ; return r8
    ; Register 8 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_lambda_iterators.double_value$u8
test_lambda_iterators_double_value_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_lambda_iterators_double_value_u8_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 2
    LD A, 2
    LD L, A         ; Store to physical register L
    ; r4 = r2 * r3
    ; 8-bit multiplication
    LD A, H
    LD B, A       ; B = multiplicand
    LD A, L
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, test_lambda_iterators_double_value_u8_mul_done_2
test_lambda_iterators_double_value_u8_mul_loop_2:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, test_lambda_iterators_double_value_u8_mul_loop_2
test_lambda_iterators_double_value_u8_mul_done_2:
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_lambda_iterators.is_greater_than_5$u8
test_lambda_iterators_is_greater_than_5_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_lambda_iterators_is_greater_than_5_u8_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r4 = r2 > r3
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, test_lambda_iterators_is_greater_than_5_u8_gt_check_zero_3
    LD HL, 0       ; False (negative)
    JP test_lambda_iterators_is_greater_than_5_u8_gt_done_3
test_lambda_iterators_is_greater_than_5_u8_gt_check_zero_3:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, test_lambda_iterators_is_greater_than_5_u8_gt_false_3
    LD HL, 1       ; True (positive and non_zero)
    JP test_lambda_iterators_is_greater_than_5_u8_gt_done_3
test_lambda_iterators_is_greater_than_5_u8_gt_false_3:
    LD HL, 0       ; False (zero)
test_lambda_iterators_is_greater_than_5_u8_gt_done_3:
    ; Register 4 already in HL
    ; return r4
    ; Register 4 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_lambda_iterators.test_traditional
test_lambda_iterators_test_traditional:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = addr(test_lambda_iterators.numbers)
    LD HL, test_lambda_iterators.numbers
    LD B, H
    LD C, L
    ; DJNZ OPTIMIZED LOOP for array[5]
    NOP
    ; DJNZ counter = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; Pointer to array start
    LD H, B
    LD L, C
    ; djnz_loop_3:
test_lambda_iterators_test_traditional_djnz_loop_3:
    ; Load element via pointer
    LD A, (HL)
    LD ($F008), A     ; Virtual register 4 to memory
    ; Call test_lambda_iterators.double_value$u8
    ; Call to test_lambda_iterators.double_value$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_lambda_iterators_double_value_u8
    ; Call test_lambda_iterators.is_greater_than_5$u8
    ; Call to test_lambda_iterators.is_greater_than_5$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_lambda_iterators_is_greater_than_5_u8
    ; Register 6 already in HL
    ; Skip if filter predicate is false
    LD A, L
    OR A
    JP Z, test_lambda_iterators_test_traditional_filter_continue_4
    ; Call print_u8
    ; Call to print_u8 (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    CALL print_u8
    ; filter_continue_4:
test_lambda_iterators_test_traditional_filter_continue_4:
    ; Advance to next element
    INC HL
    ; DJNZ - decrement and loop
    LD A, L
    LD B, A
    DJNZ djnz_loop_3
    LD A, B
    LD L, A         ; Store to HL (low byte)
    ; r8 = 42
    LD A, 42
    LD L, A         ; Store to physical register L
    ; return r8
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
