; MinZ generated code
; Generated: 2025-08-11 09:43:34


; Data section
    ORG $F000

str_0:
    DB 33    ; Length
    DB "Factorial and Fibonacci computed!"
str_1:
    DB 25    ; Length
    DB "factorial(5) = 120 ", 226, 156, 147
str_2:
    DB 25    ; Length
    DB "factorial(6) = 720 ", 226, 156, 147
str_3:
    DB 24    ; Length
    DB "fibonacci(7) = 13 ", 226, 156, 147

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_ctie_factorial.factorial$u8
_test_ctie_factorial_factorial_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
_test_ctie_factorial_factorial_u8_param_n_op:
...test_ctie_factorial_factorial_u8_param_n equ ...test_ctie_factorial_factorial_u8_param_n_op + 1
    LD A, #00      ; Parameter n (gets patched)
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD E, B        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, ___test_ctie_factorial_factorial_u8_le_true_0
    JP Z, ___test_ctie_factorial_factorial_u8_le_true_0
    LD HL, 0       ; False
    JP ___test_ctie_factorial_factorial_u8_le_done_0
_test_ctie_factorial_factorial_u8_le_true_0:
    LD HL, 1       ; True
_test_ctie_factorial_factorial_u8_le_done_0:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, ___test_ctie_factorial_factorial_u8_else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; jump end_if_2
    JP ___test_ctie_factorial_factorial_u8_end_if_2
    ; else_1:
_test_ctie_factorial_factorial_u8_else_1:
    ; end_if_2:
_test_ctie_factorial_factorial_u8_end_if_2:
    LD A, (...test_ctie_factorial_factorial_u8_param_n)
    LD E, A         ; Store to physical register E
    LD A, (...test_ctie_factorial_factorial_u8_param_n)
    LD H, A         ; Store to physical register H
    ; r8 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r9 = r7 - r8
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    LD A, (...test_ctie_factorial_factorial_u8_param_n)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r11 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r12 = r10 - r11
    EXX               ; Switch to shadow registers
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_ctie_factorial.factorial$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_ctie_factorial_factorial_u8_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_ctie_factorial_factorial_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (...test_ctie_factorial_factorial_u8_param_n+1), A   ; Patch parameter immediate
    ; === SMC Recursive Context Save ===
    LD A, (...test_ctie_factorial_factorial_u8_param_n)
    PUSH AF
    ; === Update SMC Parameters ===
    CALL ...test_ctie_factorial_factorial_u8
    ; === SMC Recursive Context Restore ===
    POP AF
    LD (...test_ctie_factorial_factorial_u8_param_n), A
    ; r14 = r6 * r13
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    ; Register 13 already in A
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, ___test_ctie_factorial_factorial_u8_mul_done_1
_test_ctie_factorial_factorial_u8_mul_loop_1:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, ___test_ctie_factorial_factorial_u8_mul_loop_1
_test_ctie_factorial_factorial_u8_mul_done_1:
    ; Register 14 already in A

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
_test_ctie_factorial_factorial_u8_return_patch_op:
NOP_PATCH_POINT: NOP or RET (C9) for early return
_test_ctie_factorial_factorial_u8_store_addr_op:
...test_ctie_factorial_factorial_u8_store_addr equ ...test_ctie_factorial_factorial_u8_store_addr_op + 1
LD_0000_A_DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_ctie_factorial.fibonacci$u8
_test_ctie_factorial_fibonacci_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
_test_ctie_factorial_fibonacci_u8_param_n_op:
...test_ctie_factorial_fibonacci_u8_param_n equ ...test_ctie_factorial_fibonacci_u8_param_n_op + 1
    LD A, #00      ; Parameter n (gets patched)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r3 = 1
    LD A, 1
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 <= r3
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, ___test_ctie_factorial_fibonacci_u8_le_true_2
    JP Z, ___test_ctie_factorial_fibonacci_u8_le_true_2
    LD HL, 0       ; False
    JP ___test_ctie_factorial_fibonacci_u8_le_done_2
_test_ctie_factorial_fibonacci_u8_le_true_2:
    LD HL, 1       ; True
_test_ctie_factorial_fibonacci_u8_le_done_2:
    ; jump_if_not r4, else_3
    ; Register 4 already in A
    OR A
    JP Z, ___test_ctie_factorial_fibonacci_u8_else_3
    LD A, (...test_ctie_factorial_fibonacci_u8_param_n)
    LD ($F00A), A     ; Virtual register 5 to memory
    ; return r5
    LD HL, ($F00A)    ; Virtual register 5 from memory
    RET
    ; jump end_if_4
    JP ___test_ctie_factorial_fibonacci_u8_end_if_4
    ; else_3:
_test_ctie_factorial_fibonacci_u8_else_3:
    ; end_if_4:
_test_ctie_factorial_fibonacci_u8_end_if_4:
    LD A, (...test_ctie_factorial_fibonacci_u8_param_n)
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r8 = r6 - r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    LD ($F010), HL    ; Virtual register 8 to memory
    LD A, (...test_ctie_factorial_fibonacci_u8_param_n)
    LD ($F012), A     ; Virtual register 9 to memory
    ; r10 = 1
    LD A, 1
    ; Register 10 already in A
    ; r11 = r9 - r10
    LD HL, ($F012)    ; Virtual register 9 from memory
    LD E, A        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    LD ($F016), HL    ; Virtual register 11 to memory
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_ctie_factorial.fibonacci$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_ctie_factorial_fibonacci_u8_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_ctie_factorial_fibonacci_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (...test_ctie_factorial_fibonacci_u8_param_n+1), A   ; Patch parameter immediate
    ; === SMC Recursive Context Save ===
    LD A, (...test_ctie_factorial_fibonacci_u8_param_n)
    PUSH AF
    ; === Update SMC Parameters ===
    CALL ...test_ctie_factorial_fibonacci_u8
    ; === SMC Recursive Context Restore ===
    POP AF
    LD (...test_ctie_factorial_fibonacci_u8_param_n), A
    LD A, (...test_ctie_factorial_fibonacci_u8_param_n)
    LD E, A         ; Store to physical register E
    ; r14 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r15 = r13 - r14
    EXX               ; Switch to shadow registers
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    LD A, (...test_ctie_factorial_fibonacci_u8_param_n)
    ; Register 16 already in A
    ; r17 = 2
    LD A, 2
    ; Register 17 already in A
    ; r18 = r16 - r17
    LD E, A        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_ctie_factorial.fibonacci$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_ctie_factorial_fibonacci_u8_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_ctie_factorial_fibonacci_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (...test_ctie_factorial_fibonacci_u8_param_n+1), A   ; Patch parameter immediate
    ; === SMC Recursive Context Save ===
    LD A, (...test_ctie_factorial_fibonacci_u8_param_n)
    PUSH AF
    ; === Update SMC Parameters ===
    CALL ...test_ctie_factorial_fibonacci_u8
    ; === SMC Recursive Context Restore ===
    POP AF
    LD (...test_ctie_factorial_fibonacci_u8_param_n), A
    ; r20 = r12 + r19
    LD D, H
    LD E, L
    ADD HL, DE
    LD A, L

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
_test_ctie_factorial_fibonacci_u8_return_patch_op:
NOP_PATCH_POINT: NOP or RET (C9) for early return
_test_ctie_factorial_fibonacci_u8_store_addr_op:
...test_ctie_factorial_fibonacci_u8_store_addr equ ...test_ctie_factorial_fibonacci_u8_store_addr_op + 1
LD_0000_A_DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_ctie_factorial.main
_test_ctie_factorial_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r3 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_ctie_factorial.factorial$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_ctie_factorial_factorial_u8_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_ctie_factorial_factorial_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (...test_ctie_factorial_factorial_u8_param_n+1), A   ; Patch parameter immediate
    ; r4 = call ...test_ctie_factorial.factorial$u8
    ; Call to ...test_ctie_factorial.factorial$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...test_ctie_factorial_factorial_u8
    ; store fact5, r4
    LD ($F002), HL
    ; r6 = 6
    LD A, 6
    LD L, A         ; Store to HL (low byte)
    ; r7 = 6
    LD A, 6
    LD H, A         ; Store to physical register H
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_ctie_factorial.factorial$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_ctie_factorial_factorial_u8_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_ctie_factorial_factorial_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (...test_ctie_factorial_factorial_u8_param_n+1), A   ; Patch parameter immediate
    ; r8 = call ...test_ctie_factorial.factorial$u8
    ; Call to ...test_ctie_factorial.factorial$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...test_ctie_factorial_factorial_u8
    ; store fact6, r8
    LD ($F00A), HL
    ; r10 = 7
    LD A, 7
    LD L, A         ; Store to HL (low byte)
    ; r11 = 7
    LD A, 7
    LD H, A         ; Store to physical register H
    ; unknown op 39
    ; Smart patch 'store_u8' for ...test_ctie_factorial.fibonacci$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (...test_ctie_factorial_fibonacci_u8_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...test_ctie_factorial_fibonacci_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (...test_ctie_factorial_fibonacci_u8_param_n+1), A   ; Patch parameter immediate
    ; r12 = call ...test_ctie_factorial.fibonacci$u8
    ; Call to ...test_ctie_factorial.fibonacci$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...test_ctie_factorial_fibonacci_u8
    ; store fib7, r12
    LD ($F012), HL
    ; r13 = string(str_0)
    LD HL, str_0
    ; Register 13 already in HL
    ; Print "Factorial and Fibonacci computed!" (33 chars via loop)
    ; Register 13 already in HL
    CALL print_string
    ; r14 = load fact5
    LD HL, ($F002)
    ; r15 = 120
    LD A, 120
    LD L, A         ; Store to physical register L
    ; r16 = r14 == r15
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___test_ctie_factorial_main_eq_true_3
    LD HL, 0       ; False
    JP ___test_ctie_factorial_main_eq_done_3
_test_ctie_factorial_main_eq_true_3:
    LD HL, 1       ; True
_test_ctie_factorial_main_eq_done_3:
    LD ($F020), HL    ; Virtual register 16 to memory
    ; jump_if_not r16, else_5
    LD A, ($F020)     ; Virtual register 16 from memory
    OR A
    JP Z, ___test_ctie_factorial_main_else_5
    ; r17 = string(str_1)
    LD HL, str_1
    ; Register 17 already in HL
    ; Print "factorial(5) = 120 â" (25 chars via loop)
    ; Register 17 already in HL
    CALL print_string
    ; jump end_if_6
    JP ___test_ctie_factorial_main_end_if_6
    ; else_5:
_test_ctie_factorial_main_else_5:
    ; end_if_6:
_test_ctie_factorial_main_end_if_6:
    ; r18 = load fact6
    LD HL, ($F00A)
    ; r19 = 720
    LD HL, 720
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r20 = r18 == r19
    LD HL, ($F026)    ; Virtual register 19 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___test_ctie_factorial_main_eq_true_4
    LD HL, 0       ; False
    JP ___test_ctie_factorial_main_eq_done_4
_test_ctie_factorial_main_eq_true_4:
    LD HL, 1       ; True
_test_ctie_factorial_main_eq_done_4:
    LD D, H
    LD E, L
    ; jump_if_not r20, else_7
    LD A, E
    OR A
    JP Z, ___test_ctie_factorial_main_else_7
    ; r21 = string(str_2)
    LD HL, str_2
    ; Register 21 already in HL
    ; Print "factorial(6) = 720 â" (25 chars via loop)
    ; Register 21 already in HL
    CALL print_string
    ; jump end_if_8
    JP ___test_ctie_factorial_main_end_if_8
    ; else_7:
_test_ctie_factorial_main_else_7:
    ; end_if_8:
_test_ctie_factorial_main_end_if_8:
    ; r22 = load fib7
    LD HL, ($F012)
    ; r23 = 13
    LD A, 13
    LD L, A         ; Store to physical register L
    ; r24 = r22 == r23
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___test_ctie_factorial_main_eq_true_5
    LD HL, 0       ; False
    JP ___test_ctie_factorial_main_eq_done_5
_test_ctie_factorial_main_eq_true_5:
    LD HL, 1       ; True
_test_ctie_factorial_main_eq_done_5:
    LD ($F030), HL    ; Virtual register 24 to memory
    ; jump_if_not r24, else_9
    LD A, ($F030)     ; Virtual register 24 from memory
    OR A
    JP Z, ___test_ctie_factorial_main_else_9
    ; r25 = string(str_3)
    LD HL, str_3
    ; Register 25 already in HL
    ; Print "fibonacci(7) = 13 â" (24 chars via loop)
    ; Register 25 already in HL
    CALL print_string
    ; jump end_if_10
    JP ___test_ctie_factorial_main_end_if_10
    ; else_9:
_test_ctie_factorial_main_else_9:
    ; end_if_10:
_test_ctie_factorial_main_end_if_10:
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; ZX Spectrum ROM print
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
