; MinZ generated code
; Generated: 2025-08-12 12:32:02


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: release-v0.13.0.examples.fibonacci.fibonacci$u8
release_v0_13_0_examples_fibonacci_fibonacci_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
release_v0_13_0_examples_fibonacci_fibonacci_u8_param_n_op:
release_v0_13_0_examples_fibonacci_fibonacci_u8_param_n equ release_v0_13_0_examples_fibonacci_fibonacci_u8_param_n_op + 1
    LD A, #00      ; Parameter n (gets patched)
    ; Register 2 already in A
    ; r3 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r4 = r2 <= r3
    LD E, B        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, release_v0_13_0_examples_fibonacci_fibonacci_u8_le_true_0
    JP Z, release_v0_13_0_examples_fibonacci_fibonacci_u8_le_true_0
    LD HL, 0       ; False
    JP release_v0_13_0_examples_fibonacci_fibonacci_u8_le_done_0
release_v0_13_0_examples_fibonacci_fibonacci_u8_le_true_0:
    LD HL, 1       ; True
release_v0_13_0_examples_fibonacci_fibonacci_u8_le_done_0:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, release_v0_13_0_examples_fibonacci_fibonacci_u8_else_1
    LD A, (release_v0_13_0_examples_fibonacci_fibonacci_u8_param_n)
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; jump end_if_2
    JP release_v0_13_0_examples_fibonacci_fibonacci_u8_end_if_2
    ; else_1:
release_v0_13_0_examples_fibonacci_fibonacci_u8_else_1:
    ; end_if_2:
release_v0_13_0_examples_fibonacci_fibonacci_u8_end_if_2:
    ; r7 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; store a, r7
    LD ($F00C), HL
    ; r9 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; store b, r9
    LD ($F010), HL
    ; r11 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store i, r11
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD ($F014), A
    ; loop_3:
release_v0_13_0_examples_fibonacci_fibonacci_u8_loop_3:
    ; r12 = load i
    LD A, ($F014)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    LD A, (release_v0_13_0_examples_fibonacci_fibonacci_u8_param_n)
    LD ($F01A), A     ; Virtual register 13 to memory
    ; r14 = r12 <= r13
    LD HL, ($F01A)    ; Virtual register 13 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, release_v0_13_0_examples_fibonacci_fibonacci_u8_le_true_1
    JP Z, release_v0_13_0_examples_fibonacci_fibonacci_u8_le_true_1
    LD HL, 0       ; False
    JP release_v0_13_0_examples_fibonacci_fibonacci_u8_le_done_1
release_v0_13_0_examples_fibonacci_fibonacci_u8_le_true_1:
    LD HL, 1       ; True
release_v0_13_0_examples_fibonacci_fibonacci_u8_le_done_1:
    ; jump_if_not r14, end_loop_4
    LD A, H
    OR A
    JP Z, release_v0_13_0_examples_fibonacci_fibonacci_u8_end_loop_4
    ; r16 = load a
    LD HL, ($F00C)
    ; r17 = load b
    LD HL, ($F010)
    ; Register 17 already in HL
    ; r18 = r16 + r17
    LD D, H
    LD E, L
    ; Register 17 already in HL
    ADD HL, DE
    LD ($F024), HL    ; Virtual register 18 to memory
    ; store temp, r18
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD ($F01E), HL
    ; r19 = load b
    LD HL, ($F010)
    LD ($F026), HL    ; Virtual register 19 to memory
    ; store a, r19
    LD HL, ($F026)    ; Virtual register 19 from memory
    LD ($F00C), HL
    ; r20 = load temp
    LD HL, ($F01E)
    ; store b, r20
    LD ($F010), HL
    ; r21 = load i
    LD A, ($F014)
    LD ($F02A), A     ; Virtual register 21 to memory
    ; r22 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r23 = r21 + r22
    LD HL, ($F02A)    ; Virtual register 21 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r23
    LD A, L
    LD ($F014), A
    ; jump loop_3
    JP release_v0_13_0_examples_fibonacci_fibonacci_u8_loop_3
    ; end_loop_4:
release_v0_13_0_examples_fibonacci_fibonacci_u8_end_loop_4:
    ; r24 = load b
    LD HL, ($F010)
    ; Register 24 already in HL
    LD A, L

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
release_v0_13_0_examples_fibonacci_fibonacci_u8_return_patch_op:
NOP_PATCH_POINT: NOP or RET (C9) for early return
release_v0_13_0_examples_fibonacci_fibonacci_u8_store_addr_op:
release_v0_13_0_examples_fibonacci_fibonacci_u8_store_addr equ release_v0_13_0_examples_fibonacci_fibonacci_u8_store_addr_op + 1
LD_0000_A_DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: release-v0.13.0.examples.fibonacci.main
release_v0_13_0_examples_fibonacci_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; r3 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; unknown op 39
    ; Smart patch 'store_u8' for release-v0.13.0.examples.fibonacci.fibonacci$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (release_v0_13_0_examples_fibonacci_fibonacci_u8_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (release_v0_13_0_examples_fibonacci_fibonacci_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter n = 0
    LD A, 0               ; Parameter value
    LD (release_v0_13_0_examples_fibonacci_fibonacci_u8_param_n+1), A   ; Patch parameter immediate
    ; r4 = call release-v0.13.0.examples.fibonacci.fibonacci$u8
    ; Call to release-v0.13.0.examples.fibonacci.fibonacci$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL release_v0_13_0_examples_fibonacci_fibonacci_u8
    ; Register 4 already in HL
    ; store result, r4
    ; Register 4 already in HL
    LD ($F002), HL
    ; return
    RET

; Standard library routines
cls:
    LD HL, $4000       ; Screen start
    LD DE, $4001
    LD BC, $17FF       ; Screen size - 1
    LD (HL), 0
    LDIR               ; Clear screen
    LD HL, $5800       ; Attribute start
    LD DE, $5801
    LD BC, $02FF       ; Attribute size - 1
    LD (HL), $38       ; White ink on black paper
    LDIR               ; Clear attributes
    RET

print_newline:
    LD A, 13           ; CR
    RST 16
    RET

print_hex_u8:
    PUSH AF            ; Save value
    RRA
    RRA
    RRA
    RRA                ; High nibble to low
    CALL print_hex_nibble
    POP AF             ; Restore value
    ; Fall through to print low nibble
print_hex_nibble:
    AND $0F            ; Isolate low nibble
    ADD A, '0'         ; Convert to ASCII
    CP '9' + 1
    JR C, print_hex_digit
    ADD A, 'A' - '0' - 10  ; Adjust for A_F
print_hex_digit:
    RST 16             ; ZX Spectrum print
    RET

zx_set_border:
    POP HL             ; Return address
    POP BC             ; Get color argument
    PUSH HL            ; Restore return address
    LD A, C            ; Color to A
    AND 7              ; Mask to 0-7
    OUT (254), A       ; Set border
    RET

zx_clear_screen:
    JP cls             ; Use standard cls

zx_set_pixel:
    ; TODO: Implement pixel setting
    ; For now, just return
    RET

zx_set_ink:
    ; TODO: Implement ink color setting
    RET

zx_set_paper:
    ; TODO: Implement paper color setting
    RET

; Input routines
zx_read_keyboard:
    ; Scan keyboard matrix
    LD BC, $FEFE       ; First keyboard row
    IN A, (C)          ; Read keyboard
    CPL                ; Invert bits
    AND $1F            ; Mask relevant bits
    RET Z              ; Return 0 if no key
    ; Simple mapping - just return raw value for now
    RET

zx_wait_key:
wait_key_loop:
    CALL zx_read_keyboard
    OR A               ; Test if zero
    JR Z, wait_key_loop ; Loop if no key
    RET                ; Return key code in A

zx_is_key_pressed:
    POP HL             ; Return address
    POP BC             ; Get key code
    PUSH HL            ; Restore return address
    ; TODO: Implement specific key checking
    LD A, 0            ; Return false for now
    RET

; Sound routines
zx_beep:
    POP HL             ; Return address
    POP DE             ; Duration
    POP BC             ; Pitch
    PUSH HL            ; Restore return address
    ; Simple beep using OUT to speaker
beep_loop:
    LD A, 16           ; Speaker bit
    OUT (254), A       ; Speaker on
    PUSH BC
beep_delay1:
    DEC BC
    LD A, B
    OR C
    JR NZ, beep_delay1
    POP BC
    XOR A              ; Speaker off
    OUT (254), A
    PUSH BC
beep_delay2:
    DEC BC
    LD A, B
    OR C
    JR NZ, beep_delay2
    POP BC
    DEC DE
    LD A, D
    OR E
    JR NZ, beep_loop
    RET

zx_click:
    LD A, 16           ; Quick click
    OUT (254), A
    LD B, 10
click_delay:
    DJNZ click_delay
    XOR A
    OUT (254), A
    RET

abs:
    POP HL             ; Return address
    POP BC             ; Get argument
    PUSH HL            ; Restore return address
    LD A, C            ; Value to A
    OR A               ; Test sign
    JP P, abs_done     ; If positive, done
    NEG                ; Negate if negative
abs_done:
    RET

min:
    POP HL             ; Return address
    POP BC             ; First argument
    POP DE             ; Second argument
    PUSH HL            ; Restore return address
    LD A, C            ; First value
    CP E               ; Compare with second
    JR C, min_done     ; If first < second, keep first
    LD A, E            ; Otherwise use second
min_done:
    RET

max:
    POP HL             ; Return address
    POP BC             ; First argument
    POP DE             ; Second argument
    PUSH HL            ; Restore return address
    LD A, C            ; First value
    CP E               ; Compare with second
    JR NC, max_done    ; If first >= second, keep first
    LD A, E            ; Otherwise use second
max_done:
    RET


    END main
