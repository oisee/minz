; MinZ generated code
; Generated: 2025-08-05 21:11:07


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_lambda_comprehensive.test_basic_lambda$add_0
_test_lambda_comprehensive_test_basic_lambda_add_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
_test_lambda_comprehensive_test_basic_lambda_add_0_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
_test_lambda_comprehensive_test_basic_lambda_add_0_param_y:
    LD DE, #0000   ; SMC parameter y (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_lambda_comprehensive.test_basic_lambda
_test_lambda_comprehensive_test_basic_lambda:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 5
    LD A, 5
    LD E, A         ; Store to physical register E
    ; r2 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r3 = call ...test_lambda_comprehensive.test_basic_lambda$add_0
    ; Call to ...test_lambda_comprehensive.test_basic_lambda$add_0 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL ...test_lambda_comprehensive_test_basic_lambda_add_0
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_lambda_comprehensive.test_lambda_reference$double_1
_test_lambda_comprehensive_test_lambda_reference_double_1:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
_test_lambda_comprehensive_test_lambda_reference_double_1_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r2 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r3 = r1 * r2
    ; 8-bit multiplication
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD B, A       ; B = multiplicand
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_lambda_comprehensive.test_lambda_reference
_test_lambda_comprehensive_test_lambda_reference:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r2 = call ...test_lambda_comprehensive.test_lambda_reference$double_1
    ; Call to ...test_lambda_comprehensive.test_lambda_reference$double_1 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...test_lambda_comprehensive_test_lambda_reference_double_1
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_lambda_comprehensive.main
_test_lambda_comprehensive_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = call ...test_lambda_comprehensive.test_basic_lambda
    ; Call to ...test_lambda_comprehensive.test_basic_lambda (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...test_lambda_comprehensive.test_basic_lambda
    LD ($F004), HL    ; Virtual register 2 to memory
    ; store , r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD ($F002), HL
    ; r4 = call ...test_lambda_comprehensive.test_lambda_reference
    ; Call to ...test_lambda_comprehensive.test_lambda_reference (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...test_lambda_comprehensive.test_lambda_reference
    ; store , r4
    LD ($F006), HL
    ; r5 = load a
    LD HL, ($F002)
    ; r6 = load b
    LD HL, ($F006)
    ; r7 = r5 + r6
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 7 already in HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
