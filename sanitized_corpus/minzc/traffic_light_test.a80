; MinZ generated code
; Generated: 2025-08-11 21:32:45


; Data section
    ORG $F000

str_0:
    DB 37    ; Length
    DB "Traffic Light Simulation Starting...", 10
str_1:
    DB 9    ; Length
    DB " seconds", 10
str_2:
    DB 37    ; Length
    DB 10, "EMERGENCY! Switching to flashing...", 10
str_3:
    DB 17    ; Length
DB_Emergency_state: "
str_4:
    DB 29    ; Length
    DB "Emergency over, resetting...", 10
str_5:
    DB 16    ; Length
DB_Reset_to_state: "

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.traffic_light_fsm.transition$TrafficState$Event
_examples_traffic_light_fsm_transition_TrafficState_Event:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
_examples_traffic_light_fsm_transition_TrafficState_Event_param_current_op:
...examples_traffic_light_fsm_transition_TrafficState_Event_param_current equ ...examples_traffic_light_fsm_transition_TrafficState_Event_param_current_op + 1
    LD A, #00      ; Parameter current (gets patched)
    ; Register 3 already in A
    ; r4 = r3 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_transition_TrafficState_Event_eq_true_0
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_eq_done_0
_examples_traffic_light_fsm_transition_TrafficState_Event_eq_true_0:
    LD HL, 1       ; True
_examples_traffic_light_fsm_transition_TrafficState_Event_eq_done_0:
    ; jump_if r4, case_arm_0_2
    LD A, B
    OR A
    JP NZ, ___examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_0_2
    ; jump case_arm_1_3
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_1_3
    ; r5 = r3 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_transition_TrafficState_Event_eq_true_1
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_eq_done_1
_examples_traffic_light_fsm_transition_TrafficState_Event_eq_true_1:
    LD HL, 1       ; True
_examples_traffic_light_fsm_transition_TrafficState_Event_eq_done_1:
    ; jump_if r5, case_arm_1_3
    LD A, C
    OR A
    JP NZ, ___examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_1_3
    ; jump case_arm_2_4
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_2_4
    ; r6 = r3 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_transition_TrafficState_Event_eq_true_2
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_eq_done_2
_examples_traffic_light_fsm_transition_TrafficState_Event_eq_true_2:
    LD HL, 1       ; True
_examples_traffic_light_fsm_transition_TrafficState_Event_eq_done_2:
    ; jump_if r6, case_arm_2_4
    LD A, D
    OR A
    JP NZ, ___examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_2_4
    ; jump case_arm_3_5
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_3_5
    ; r7 = r3 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_transition_TrafficState_Event_eq_true_3
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_eq_done_3
_examples_traffic_light_fsm_transition_TrafficState_Event_eq_true_3:
    LD HL, 1       ; True
_examples_traffic_light_fsm_transition_TrafficState_Event_eq_done_3:
    ; jump_if r7, case_arm_3_5
    LD A, E
    OR A
    JP NZ, ___examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_3_5
    ; jump case_end_1
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_case_end_1
    ; case_arm_0_2:
_examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_0_2:
    ; jump case_end_1
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_case_end_1
    ; case_arm_1_3:
_examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_1_3:
    ; jump case_end_1
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_case_end_1
    ; case_arm_2_4:
_examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_2_4:
    ; jump case_end_1
    JP ___examples_traffic_light_fsm_transition_TrafficState_Event_case_end_1
    ; case_arm_3_5:
_examples_traffic_light_fsm_transition_TrafficState_Event_case_arm_3_5:
    ; case_end_1:
_examples_traffic_light_fsm_transition_TrafficState_Event_case_end_1:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.traffic_light_fsm.get_timing$TrafficState
_examples_traffic_light_fsm_get_timing_TrafficState:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
_examples_traffic_light_fsm_get_timing_TrafficState_param_state_op:
...examples_traffic_light_fsm_get_timing_TrafficState_param_state equ ...examples_traffic_light_fsm_get_timing_TrafficState_param_state_op + 1
    LD A, #00      ; Parameter state (gets patched)
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = r2 == r0
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_get_timing_TrafficState_eq_true_4
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_eq_done_4
_examples_traffic_light_fsm_get_timing_TrafficState_eq_true_4:
    LD HL, 1       ; True
_examples_traffic_light_fsm_get_timing_TrafficState_eq_done_4:
    ; jump_if r3, case_arm_0_7
    LD A, L
    OR A
    JP NZ, ___examples_traffic_light_fsm_get_timing_TrafficState_case_arm_0_7
    ; jump case_arm_1_8
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_case_arm_1_8
    ; r4 = r2 == r0
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_get_timing_TrafficState_eq_true_5
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_eq_done_5
_examples_traffic_light_fsm_get_timing_TrafficState_eq_true_5:
    LD HL, 1       ; True
_examples_traffic_light_fsm_get_timing_TrafficState_eq_done_5:
    LD ($F008), HL    ; Virtual register 4 to memory
    ; jump_if r4, case_arm_1_8
    LD A, ($F008)     ; Virtual register 4 from memory
    OR A
    JP NZ, ___examples_traffic_light_fsm_get_timing_TrafficState_case_arm_1_8
    ; jump case_arm_2_9
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_case_arm_2_9
    ; r5 = r2 == r0
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_get_timing_TrafficState_eq_true_6
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_eq_done_6
_examples_traffic_light_fsm_get_timing_TrafficState_eq_true_6:
    LD HL, 1       ; True
_examples_traffic_light_fsm_get_timing_TrafficState_eq_done_6:
    ; jump_if r5, case_arm_2_9
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    OR A
    JP NZ, ___examples_traffic_light_fsm_get_timing_TrafficState_case_arm_2_9
    ; jump case_arm_3_10
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_case_arm_3_10
    ; r6 = r2 == r0
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_get_timing_TrafficState_eq_true_7
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_eq_done_7
_examples_traffic_light_fsm_get_timing_TrafficState_eq_true_7:
    LD HL, 1       ; True
_examples_traffic_light_fsm_get_timing_TrafficState_eq_done_7:
    ; jump_if r6, case_arm_3_10
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP NZ, ___examples_traffic_light_fsm_get_timing_TrafficState_case_arm_3_10
    ; jump case_end_6
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_case_end_6
    ; case_arm_0_7:
_examples_traffic_light_fsm_get_timing_TrafficState_case_arm_0_7:
    ; r7 = 30
    LD A, 30
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; jump case_end_6
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_case_end_6
    ; case_arm_1_8:
_examples_traffic_light_fsm_get_timing_TrafficState_case_arm_1_8:
    ; r8 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; jump case_end_6
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_case_end_6
    ; case_arm_2_9:
_examples_traffic_light_fsm_get_timing_TrafficState_case_arm_2_9:
    ; r9 = 25
    LD A, 25
    LD B, A         ; Store to physical register B
    ; jump case_end_6
    JP ___examples_traffic_light_fsm_get_timing_TrafficState_case_end_6
    ; case_arm_3_10:
_examples_traffic_light_fsm_get_timing_TrafficState_case_arm_3_10:
    ; r10 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; case_end_6:
_examples_traffic_light_fsm_get_timing_TrafficState_case_end_6:

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
_examples_traffic_light_fsm_get_timing_TrafficState_return_patch_op:
NOP_PATCH_POINT: NOP or RET (C9) for early return
_examples_traffic_light_fsm_get_timing_TrafficState_store_addr_op:
...examples_traffic_light_fsm_get_timing_TrafficState_store_addr equ ...examples_traffic_light_fsm_get_timing_TrafficState_store_addr_op + 1
LD_0000_A_DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.traffic_light_fsm.get_color_code$TrafficState
_examples_traffic_light_fsm_get_color_code_TrafficState:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
_examples_traffic_light_fsm_get_color_code_TrafficState_param_state_op:
...examples_traffic_light_fsm_get_color_code_TrafficState_param_state equ ...examples_traffic_light_fsm_get_color_code_TrafficState_param_state_op + 1
    LD A, #00      ; Parameter state (gets patched)
    LD H, A         ; Store to physical register H
    ; r3 = r2 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_get_color_code_TrafficState_eq_true_8
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_eq_done_8
_examples_traffic_light_fsm_get_color_code_TrafficState_eq_true_8:
    LD HL, 1       ; True
_examples_traffic_light_fsm_get_color_code_TrafficState_eq_done_8:
    ; jump_if r3, case_arm_0_12
    LD A, B
    OR A
    JP NZ, ___examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_0_12
    ; jump case_arm_1_13
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_1_13
    ; r4 = r2 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_get_color_code_TrafficState_eq_true_9
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_eq_done_9
_examples_traffic_light_fsm_get_color_code_TrafficState_eq_true_9:
    LD HL, 1       ; True
_examples_traffic_light_fsm_get_color_code_TrafficState_eq_done_9:
    LD ($F008), HL    ; Virtual register 4 to memory
    ; jump_if r4, case_arm_1_13
    LD A, ($F008)     ; Virtual register 4 from memory
    OR A
    JP NZ, ___examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_1_13
    ; jump case_arm_2_14
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_2_14
    ; r5 = r2 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_get_color_code_TrafficState_eq_true_10
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_eq_done_10
_examples_traffic_light_fsm_get_color_code_TrafficState_eq_true_10:
    LD HL, 1       ; True
_examples_traffic_light_fsm_get_color_code_TrafficState_eq_done_10:
    ; jump_if r5, case_arm_2_14
    LD A, B
    OR A
    JP NZ, ___examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_2_14
    ; jump case_arm_3_15
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_3_15
    ; r6 = r2 == r0
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, ___examples_traffic_light_fsm_get_color_code_TrafficState_eq_true_11
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_eq_done_11
_examples_traffic_light_fsm_get_color_code_TrafficState_eq_true_11:
    LD HL, 1       ; True
_examples_traffic_light_fsm_get_color_code_TrafficState_eq_done_11:
    ; jump_if r6, case_arm_3_15
    LD A, B
    OR A
    JP NZ, ___examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_3_15
    ; jump case_end_11
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_case_end_11
    ; case_arm_0_12:
_examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_0_12:
    ; r7 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; jump case_end_11
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_case_end_11
    ; case_arm_1_13:
_examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_1_13:
    ; r8 = 2
    LD A, 2
    LD ($F010), A     ; Virtual register 8 to memory
    ; jump case_end_11
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_case_end_11
    ; case_arm_2_14:
_examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_2_14:
    ; r9 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; jump case_end_11
    JP ___examples_traffic_light_fsm_get_color_code_TrafficState_case_end_11
    ; case_arm_3_15:
_examples_traffic_light_fsm_get_color_code_TrafficState_case_arm_3_15:
    ; r10 = 4
    LD A, 4
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; case_end_11:
_examples_traffic_light_fsm_get_color_code_TrafficState_case_end_11:

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
_examples_traffic_light_fsm_get_color_code_TrafficState_return_patch_op:
NOP_PATCH_POINT: NOP or RET (C9) for early return
_examples_traffic_light_fsm_get_color_code_TrafficState_store_addr_op:
...examples_traffic_light_fsm_get_color_code_TrafficState_store_addr equ ...examples_traffic_light_fsm_get_color_code_TrafficState_store_addr_op + 1
LD_0000_A_DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.traffic_light_fsm.simulate_traffic_light
_examples_traffic_light_fsm_simulate_traffic_light:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; store state, r2
    LD ($F002), HL
    ; r4 = 0
    LD A, 0
    ; Register 4 already in A
    ; store cycle_count, r4
    ; Register 4 already in A
    LD ($F006), A
    ; r5 = string(str_0)
    LD HL, str_0
    ; Print "Traffic Light Simulation Starting...
" (37 chars via loop)
    CALL print_string
    ; loop_16:
_examples_traffic_light_fsm_simulate_traffic_light_loop_16:
    ; r6 = load cycle_count
    LD A, ($F006)
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = 10
    LD A, 10
    LD ($F00E), A     ; Virtual register 7 to memory
    ; r8 = r6 < r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD HL, ($F00E)    ; Virtual register 7 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, ___examples_traffic_light_fsm_simulate_traffic_light_lt_true_12
    LD HL, 0       ; False
    JP ___examples_traffic_light_fsm_simulate_traffic_light_lt_done_12
_examples_traffic_light_fsm_simulate_traffic_light_lt_true_12:
    LD HL, 1       ; True
_examples_traffic_light_fsm_simulate_traffic_light_lt_done_12:
    ; jump_if_not r8, end_loop_17
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    OR A
    JP Z, ___examples_traffic_light_fsm_simulate_traffic_light_end_loop_17
    ; Direct print "Cycle " (6 chars)
    ; Direct print "Cycle " (6 chars)
    LD A, 67
    RST 16         ; Print character
    LD A, 121
    RST 16         ; Print character
    LD A, 99
    RST 16         ; Print character
    LD A, 108
    RST 16         ; Print character
    LD A, 101
    RST 16         ; Print character
    LD A, 32
    RST 16         ; Print character
    ; Direct print ": State " (8 chars)
    ; Direct print ": State " (8 chars)
    LD A, 58
    RST 16         ; Print character
    LD A, 32
    RST 16         ; Print character
    LD A, 83
    RST 16         ; Print character
    LD A, 116
    RST 16         ; Print character
    LD A, 97
    RST 16         ; Print character
    LD A, 116
    RST 16         ; Print character
    LD A, 101
    RST 16         ; Print character
    LD A, 32
    RST 16         ; Print character
    ; r9 = load state
    LD HL, ($F002)
    ; r10 = load state
    LD HL, ($F002)
    LD ($F014), HL    ; Virtual register 10 to memory
    ; unknown op 39
    ; Smart patch 'store_u8' for ...examples.traffic_light_fsm.get_color_code$TrafficState_return_patch
    LD A, #00               ; NOP opcode
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_store_addr), HL
    ; unknown op 41
    ; Patch parameter state = 0
    LD A, 0               ; Parameter value
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_param_state+1), A   ; Patch parameter immediate
    ; r11 = call ...examples.traffic_light_fsm.get_color_code$TrafficState
    ; Call to ...examples.traffic_light_fsm.get_color_code$TrafficState (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...examples_traffic_light_fsm_get_color_code_TrafficState
    ; Direct print " for " (5 chars)
    ; Direct print " for " (5 chars)
    LD A, 32
    RST 16         ; Print character
    LD A, 102
    RST 16         ; Print character
    LD A, 111
    RST 16         ; Print character
    LD A, 114
    RST 16         ; Print character
    LD A, 32
    RST 16         ; Print character
    ; r12 = load state
    LD HL, ($F002)
    LD ($F018), HL    ; Virtual register 12 to memory
    ; r13 = load state
    LD HL, ($F002)
    ; unknown op 39
    ; Smart patch 'store_u8' for ...examples.traffic_light_fsm.get_timing$TrafficState_return_patch
    LD A, #00               ; NOP opcode
    LD (...examples_traffic_light_fsm_get_timing_TrafficState_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...examples_traffic_light_fsm_get_timing_TrafficState_store_addr), HL
    ; unknown op 41
    ; Patch parameter state = 0
    LD A, 0               ; Parameter value
    LD (...examples_traffic_light_fsm_get_timing_TrafficState_param_state+1), A   ; Patch parameter immediate
    ; r14 = call ...examples.traffic_light_fsm.get_timing$TrafficState
    ; Call to ...examples.traffic_light_fsm.get_timing$TrafficState (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...examples_traffic_light_fsm_get_timing_TrafficState
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; r15 = string(str_1)
    LD HL, str_1
    ; Print " seconds
" (9 chars via loop)
    CALL print_string
    ; r16 = load state
    LD HL, ($F002)
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r18 = load state
    LD HL, ($F002)
    LD ($F024), HL    ; Virtual register 18 to memory
    ; r19 = 0
    LD A, 0
    LD B, A         ; Store to physical register B
    ; r20 = call ...examples.traffic_light_fsm.transition$TrafficState$Event
    ; Call to ...examples.traffic_light_fsm.transition$TrafficState$Event (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL ...examples_traffic_light_fsm_transition_TrafficState_Event
    LD ($F028), HL    ; Virtual register 20 to memory
    ; store state, r20
    LD HL, ($F028)    ; Virtual register 20 from memory
    LD ($F002), HL
    ; r21 = load cycle_count
    LD A, ($F006)
    LD B, A         ; Store to physical register B
    ; r22 = 1
    LD A, 1
    LD ($F02C), A     ; Virtual register 22 to memory
    ; r23 = r21 + r22
    LD D, H
    LD E, L
    LD HL, ($F02C)    ; Virtual register 22 from memory
    ADD HL, DE
    ; store cycle_count, r23
    LD A, E
    LD ($F006), A
    ; jump loop_16
    JP ___examples_traffic_light_fsm_simulate_traffic_light_loop_16
    ; end_loop_17:
_examples_traffic_light_fsm_simulate_traffic_light_end_loop_17:
    ; r24 = string(str_2)
    LD HL, str_2
    ; Print "
EMERGENCY! Switching to flashing...
" (37 chars via loop)
    CALL print_string
    ; r25 = load state
    LD HL, ($F002)
    LD ($F032), HL    ; Virtual register 25 to memory
    ; r26 = 1
    LD A, 1
    LD E, A         ; Store to physical register E
    ; r27 = load state
    LD HL, ($F002)
    LD ($F036), HL    ; Virtual register 27 to memory
    ; r28 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r29 = call ...examples.traffic_light_fsm.transition$TrafficState$Event
    ; Call to ...examples.traffic_light_fsm.transition$TrafficState$Event (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL ...examples_traffic_light_fsm_transition_TrafficState_Event
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; store state, r29
    LD HL, ($F03A)    ; Virtual register 29 from memory
    LD ($F002), HL
    ; r30 = string(str_3)
    LD HL, str_3
    ; Print "Emergency state: " (17 chars via loop)
    CALL print_string
    ; r31 = load state
    LD HL, ($F002)
    ; r32 = load state
    LD HL, ($F002)
    ; unknown op 39
    ; Smart patch 'store_u8' for ...examples.traffic_light_fsm.get_color_code$TrafficState_return_patch
    LD A, #00               ; NOP opcode
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_store_addr), HL
    ; unknown op 41
    ; Patch parameter state = 0
    LD A, 0               ; Parameter value
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_param_state+1), A   ; Patch parameter immediate
    ; r33 = call ...examples.traffic_light_fsm.get_color_code$TrafficState
    ; Call to ...examples.traffic_light_fsm.get_color_code$TrafficState (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...examples_traffic_light_fsm_get_color_code_TrafficState
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16         ; Print character
    ; r34 = string(str_4)
    LD HL, str_4
    ; Print "Emergency over, resetting...
" (29 chars via loop)
    CALL print_string
    ; r35 = load state
    LD HL, ($F002)
    LD ($F046), HL    ; Virtual register 35 to memory
    ; r36 = 2
    LD A, 2
    LD B, A         ; Store to physical register B
    ; r37 = load state
    LD HL, ($F002)
    LD ($F04A), HL    ; Virtual register 37 to memory
    ; r38 = 2
    LD A, 2
    ; Register 38 already in A
    ; r39 = call ...examples.traffic_light_fsm.transition$TrafficState$Event
    ; Call to ...examples.traffic_light_fsm.transition$TrafficState$Event (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL ...examples_traffic_light_fsm_transition_TrafficState_Event
    ; store state, r39
    LD ($F002), HL
    ; r40 = string(str_5)
    LD HL, str_5
    ; Print "Reset to state: " (16 chars via loop)
    CALL print_string
    ; r41 = load state
    LD HL, ($F002)
    ; r42 = load state
    LD HL, ($F002)
    ; unknown op 39
    ; Smart patch 'store_u8' for ...examples.traffic_light_fsm.get_color_code$TrafficState_return_patch
    LD A, #00               ; NOP opcode
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_return_patch_op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_store_addr), HL
    ; unknown op 41
    ; Patch parameter state = 0
    LD A, 0               ; Parameter value
    LD (...examples_traffic_light_fsm_get_color_code_TrafficState_param_state+1), A   ; Patch parameter immediate
    ; r43 = call ...examples.traffic_light_fsm.get_color_code$TrafficState
    ; Call to ...examples.traffic_light_fsm.get_color_code$TrafficState (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL ...examples_traffic_light_fsm_get_color_code_TrafficState
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16         ; Print character
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.traffic_light_fsm.main
_examples_traffic_light_fsm_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call ...examples.traffic_light_fsm.simulate_traffic_light
    ; Call to ...examples.traffic_light_fsm.simulate_traffic_light (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ...examples.traffic_light_fsm.simulate_traffic_light
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; ZX Spectrum ROM print
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
