; MinZ generated code
; Generated: 2025-08-03 15:05:44


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_simple_asm.set_border_color
_examples_test_simple_asm_set_border_color:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm {         LD A, 2      ; Red color
        OUT (0xFE), A
     }
    LD A, 2      ; Red color
    OUT (0xFE), A
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_simple_asm.clear_screen
_examples_test_simple_asm_clear_screen:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm {         LD HL, 0x4000
        LD DE, 0x4001
        LD BC, 6143
        LD (HL), 0
        LDIR }
    LD HL, 0x4000
    LD DE, 0x4001
    LD BC, 6143
    LD (HL), 0
    LDIR
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_simple_asm.wait_loop
_examples_test_simple_asm_wait_loop:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; asm {         LD B, 255
wait_loop:
        DJNZ wait_loop
     }
    LD B, 255
wait_loop:
    DJNZ wait_loop
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_simple_asm.main
_examples_test_simple_asm_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r2 = call set_border_color
    ; Call to set_border_color (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F002)    ; Virtual register 1 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL ......examples.test_simple_asm.set_border_color
    ; r3 = call clear_screen
    ; Call to clear_screen (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ......examples.test_simple_asm.clear_screen
    ; r4 = call wait_loop
    ; Call to wait_loop (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL ......examples.test_simple_asm.wait_loop
    ; return
    POP DE
    POP BC
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
