; MinZ generated code
; Generated: 2025-08-03 15:05:44


; Data section
    ORG $F000

str_0:
    DB 18    ; Length
    DB "The value of x is "
str_1:
    DB 12    ; Length
    DB "Hello World!"

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ......examples.test_print_interpolation.main
_examples_test_print_interpolation_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r6 = string(str_0)
    LD HL, str_0
    ; Print "The value of x is " (18 chars via loop)
    CALL print_string
    ; print_u8(r7)
    LD A, B
    CALL print_u8_decimal
    ; Direct print "x = " (4 chars)
    ; Direct print "x = " (4 chars)
    LD A, 120
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    LD A, 61
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; print_u8(r8)
    LD A, C
    CALL print_u8_decimal
    ; Direct print ", y = " (6 chars)
    ; Direct print ", y = " (6 chars)
    LD A, 44
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    LD A, 121
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    LD A, 61
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; print_u16(r9)
    CALL print_u16_decimal
    ; Direct print "Flag is " (8 chars)
    ; Direct print "Flag is " (8 chars)
    LD A, 70
    RST 16             ; Print character
    LD A, 108
    RST 16             ; Print character
    LD A, 97
    RST 16             ; Print character
    LD A, 103
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    LD A, 105
    RST 16             ; Print character
    LD A, 115
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; print_bool(r10)
    LD A, E
    CALL print_bool
    ; print_u8(r11)
    LD A, H
    CALL print_u8_decimal
    ; print_u16(r12)
    CALL print_u16_decimal
    ; print_bool(r13)
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    CALL print_bool
    ; r14 = string(str_1)
    LD HL, str_1
    ; Print "Hello World!" (12 chars via loop)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD B, (HL)         ; B = length from first byte
    INC HL             ; HL -> string data
    LD A, B            ; Check if length is zero
    OR A
    RET Z              ; Return if empty string
print_loop:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop    ; Decrement B and loop
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
