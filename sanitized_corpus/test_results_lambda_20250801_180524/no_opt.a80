; MinZ generated code
; Generated: 2025-08-01 18:05:24


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.add_five_traditional
examples_lambda_basic_test_add_five_traditional:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples_lambda_basic_test_add_five_traditional_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 5
    LD A, 5
    LD B, A         ; Store to physical register B
    ; r4 = r2 + r3
    LD D, H
    LD E, L
    ADD HL, DE
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: lambda_examples.lambda_basic_test.test_lambda_basic_0
lambda_examples_lambda_basic_test_test_lambda_basic_0:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r0 = load x
    LD HL, ($F000)
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r1 = 5
    LD A, 5
    LD D, A         ; Store to physical register D
    ; r2 = r0 + r1
    LD HL, ($F000)    ; Virtual register 0 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; r3 = load x
    LD HL, ($F000)
    ; r4 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_basic
examples_lambda_basic_test_test_lambda_basic:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = addr()
    LD HL, ($F000)    ; Virtual register 0 from memory
    LD ($F004), HL    ; Virtual register 2 to memory
    ; store , r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD ($F002), HL
    ; r3 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r4 = load 
    LD HL, ($F002)
    ; r5 = call_indirect r4
    ; Indirect call through r4
    CALL .call_indirect_0
    JR .call_indirect_end_0
.call_indirect_0:
    JP (HL)       ; Jump to function address
.call_indirect_end_0:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: lambda_examples.lambda_basic_test.test_lambda_direct_1
lambda_examples_lambda_basic_test_test_lambda_direct_1:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r0 = load x
    LD HL, ($F000)
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r1 = 5
    LD A, 5
    ; Register 1 already in A
    ; r2 = r0 + r1
    LD HL, ($F000)    ; Virtual register 0 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r3 = load x
    LD HL, ($F000)
    ; r4 = 5
    LD A, 5
    ; Register 4 already in A
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_direct
examples_lambda_basic_test_test_lambda_direct:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = addr()
    LD HL, ($F000)    ; Virtual register 0 from memory
    ; store , r2
    LD ($F002), HL
    ; r3 = 10
    LD A, 10
    LD H, A         ; Store to physical register H
    ; r4 = load 
    LD HL, ($F002)
    ; r5 = call_indirect r4
    ; Indirect call through r4
    CALL .call_indirect_1
    JR .call_indirect_end_1
.call_indirect_1:
    JP (HL)       ; Jump to function address
.call_indirect_end_1:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: lambda_examples.lambda_basic_test.test_lambda_multiple_2
lambda_examples_lambda_basic_test_test_lambda_multiple_2:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r0 = load x
    LD HL, ($F000)
    LD ($F000), HL    ; Virtual register 0 to memory
    ; r1 = 5
    LD A, 5
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = r0 + r1
    LD HL, ($F000)    ; Virtual register 0 from memory
    LD D, H
    LD E, L
    LD HL, ($F002)    ; Virtual register 1 from memory
    ADD HL, DE
    ; r3 = load x
    LD HL, ($F000)
    ; r4 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.test_lambda_multiple
examples_lambda_basic_test_test_lambda_multiple:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = addr()
    LD HL, ($F000)    ; Virtual register 0 from memory
    LD ($F004), HL    ; Virtual register 2 to memory
    ; store , r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD ($F002), HL
    ; r4 = 10
    LD A, 10
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = load 
    LD HL, ($F002)
    ; r6 = call_indirect r5
    ; Indirect call through r5
    CALL .call_indirect_2
    JR .call_indirect_end_2
.call_indirect_2:
    JP (HL)       ; Jump to function address
.call_indirect_end_2:
    ; store , r6
    LD ($F006), HL
    ; r8 = 20
    LD A, 20
    LD E, A         ; Store to physical register E
    ; r9 = load 
    LD HL, ($F002)
    ; r10 = call_indirect r9
    ; Indirect call through r9
    CALL .call_indirect_3
    JR .call_indirect_end_3
.call_indirect_3:
    JP (HL)       ; Jump to function address
.call_indirect_end_3:
    ; store , r10
    LD ($F00E), HL
    ; r11 = load a
    LD HL, ($F006)
    LD D, H
    LD E, L
    ; r12 = load b
    LD HL, ($F00E)
    ; r13 = r11 + r12
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 13 already in HL
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.lambda_basic_test.main
examples_lambda_basic_test_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    ; Register 2 already in A
    ; r3 = call add_five_traditional
    ; Call to add_five_traditional (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.add_five_traditional
    LD ($F006), HL    ; Virtual register 3 to memory
    ; store , r3
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD ($F002), HL
    ; r5 = call test_lambda_basic
    ; Call to test_lambda_basic (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_basic
    ; store , r5
    LD ($F008), HL
    ; r7 = call test_lambda_direct
    ; Call to test_lambda_direct (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_direct
    ; store , r7
    LD ($F00C), HL
    ; r9 = call test_lambda_multiple
    ; Call to test_lambda_multiple (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL examples.lambda_basic_test.test_lambda_multiple
    ; Register 9 already in HL
    ; store , r9
    ; Register 9 already in HL
    LD ($F010), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
