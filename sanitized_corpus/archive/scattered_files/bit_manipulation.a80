; MinZ generated code
; Generated: 2025-07-30 11:01:43


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.bit_manipulation.set_bit
examples_bit_manipulation_set_bit:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD D, A         ; Store to physical register D
    LD A, E       ; Get parameter bit
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 1
    LD A, 1
    LD B, A         ; Store to physical register B
    ; r5 = param bit
    ; Load parameter bit
    ; r6 = r4 << r5
    ; Shift left
    LD A, B
    LD B, A       ; B = value to shift
    LD A, C
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_0
    LD B, C       ; B = counter
.shl_loop_0:
    DEC B
    JP M, .shl_done_0
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_0
.shl_done_0:
    LD L, A
    LD H, 0
    ; r7 = r3 | r6
    LD D, H
    LD E, L
    LD A, L
    OR E
    LD L, A
    LD A, H
    OR D
    LD H, A
    ; return r7
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.bit_manipulation.clear_bit
examples_bit_manipulation_clear_bit:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    LD A, E       ; Get parameter bit
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r5 = param bit
    ; Load parameter bit
    ; r6 = r4 << r5
    ; Shift left
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD B, A       ; B = value to shift
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_1
    LD B, C       ; B = counter
.shl_loop_1:
    DEC B
    JP M, .shl_done_1
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_1
.shl_done_1:
    LD L, A
    LD H, 0
    ; r7 = ~r6
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    CPL           ; Complement A
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r8 = r3 & r7
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; return r8
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.bit_manipulation.toggle_bit
examples_bit_manipulation_toggle_bit:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    ; Register 1 already in A
    LD A, E       ; Get parameter bit
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 1
    LD A, 1
    LD E, A         ; Store to physical register E
    ; r5 = param bit
    ; Load parameter bit
    ; r6 = r4 << r5
    ; Shift left
    LD A, E
    LD B, A       ; B = value to shift
    LD A, ($F00A)     ; Virtual register 5 from memory
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_2
    LD B, C       ; B = counter
.shl_loop_2:
    DEC B
    JP M, .shl_done_2
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_2
.shl_done_2:
    LD L, A
    LD H, 0
    ; r7 = r3 ^ r6
    LD D, H
    LD E, L
    LD A, L
    XOR E
    LD L, A
    LD A, H
    XOR D
    LD H, A
    ; return r7
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.bit_manipulation.test_bit
examples_bit_manipulation_test_bit:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD H, A         ; Store to physical register H
    LD A, E       ; Get parameter bit
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param value
    ; Load parameter value
    ; r4 = 1
    LD A, 1
    ; Register 4 already in A
    ; r5 = param bit
    ; Load parameter bit
    ; r6 = r4 << r5
    ; Shift left
    ; Register 4 already in A
    LD B, A       ; B = value to shift
    LD A, ($F00A)     ; Virtual register 5 from memory
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shl_done_3
    LD B, C       ; B = counter
.shl_loop_3:
    DEC B
    JP M, .shl_done_3
    SLA A         ; Shift left, 0 into bit 0
    JR .shl_loop_3
.shl_done_3:
    LD L, A
    LD H, 0
    ; r7 = r3 & r6
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r8 = 0
    LD A, 0
    ; Register 8 already in A
    ; r9 = r7 != r8
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; return r9
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.bit_manipulation.count_bits
examples_bit_manipulation_count_bits:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r3 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; store , r3
    LD A, C
    LD ($F000), A
    ; loop_1:
loop_1:
    ; r4 = param value
    ; Load parameter value
    ; r5 = 0
    LD A, 0
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = r4 != r5
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD D, H
    LD E, L
    LD HL, ($F00A)    ; Virtual register 5 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP NZ, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; jump_if_not r6, end_loop_2
    ; Register 6 already in A
    OR A
    JP Z, end_loop_2
    ; r7 = load count
    LD A, ($F000)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r8 = param value
    ; Load parameter value
    ; r9 = 1
    LD A, 1
    ; Register 9 already in A
    ; r10 = r8 & r9
    LD HL, ($F010)    ; Virtual register 8 from memory
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r11 = r7 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    ; store count, r11
    LD A, E
    LD ($F000), A
    ; r12 = param value
    ; Load parameter value
    ; r13 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r14 = r12 >> r13
    ; Shift right
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD B, A       ; B = value to shift
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, .shr_done_8
    LD B, C       ; B = counter
.shr_loop_8:
    DEC B
    JP M, .shr_done_8
    SRL A         ; Shift right, 0 into bit 7
    JR .shr_loop_8
.shr_done_8:
    LD L, A
    LD H, 0
    ; store value, r14
    LD ($F000), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r15 = load count
    LD A, ($F000)
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; return r15
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
