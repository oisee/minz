; MinZ generated code
; Generated: 2025-07-30 20:25:02


; Data section
    ORG $F000

str_0:
    DB 48    ; Length
DB_Started_facing_North_turned_right_now_facing: "
    DB 0               ; Null terminator
str_1:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_pattern_matching.turn_right
_test_pattern_matching_turn_right:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    ; r2 = param dir
    ; Load parameter dir
    ; r3 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if r3, case_arm_0_2
    LD A, B
    OR A
    JP NZ, case_arm_0_2
    ; jump case_arm_1_3
    JP case_arm_1_3
    ; r4 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if r4, case_arm_1_3
    LD A, C
    OR A
    JP NZ, case_arm_1_3
    ; jump case_arm_2_4
    JP case_arm_2_4
    ; r5 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if r5, case_arm_2_4
    LD A, D
    OR A
    JP NZ, case_arm_2_4
    ; jump case_arm_3_5
    JP case_arm_3_5
    ; r6 = r2 == r0
    LD D, H
    LD E, L
    LD HL, ($F000)    ; Virtual register 0 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    ; jump_if r6, case_arm_3_5
    LD A, E
    OR A
    JP NZ, case_arm_3_5
    ; jump case_end_1
    JP case_end_1
    ; case_arm_0_2:
case_arm_0_2:
    ; r7 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; jump case_end_1
    JP case_end_1
    ; case_arm_1_3:
case_arm_1_3:
    ; r8 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; jump case_end_1
    JP case_end_1
    ; case_arm_2_4:
case_arm_2_4:
    ; r9 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; jump case_end_1
    JP case_end_1
    ; case_arm_3_5:
case_arm_3_5:
    ; r10 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; case_end_1:
case_end_1:
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_pattern_matching.main
_test_pattern_matching_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD ($F004), A     ; Virtual register 2 to memory
    ; store , r2
    LD HL, ($F004)    ; Virtual register 2 from memory
    LD ($F002), HL
    ; r4 = load dir
    LD HL, ($F002)
    ; r5 = call turn_right
    ; Call to turn_right (args: 1)
    ; Register-based parameter passing
    LD A, B
    ; Parameter dir in A
    ; Found function, UsesTrueSMC=false
    CALL turn_right
    ; store , r5
    LD ($F006), HL
    ; r6 = string(str_0)
    LD HL, str_0
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; print_string(r6)
    LD HL, ($F00C)    ; Virtual register 6 from memory
    CALL print_string
    ; r7 = load new_dir
    LD HL, ($F006)
    ; print_u16(r7)
    CALL print_u16_decimal
    ; r8 = string(str_1)
    LD HL, str_1
    ; print_string(r8)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
