; MinZ generated code
; Generated: 2025-07-30 18:38:55


; Data section
    ORG $F000

str_0:
    DB 8    ; Length
    DB "BLACK = "
    DB 0               ; Null terminator
str_1:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_2:
    DB 6    ; Length
    DB "RED = "
    DB 0               ; Null terminator
str_3:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator
str_4:
    DB 8    ; Length
    DB "GREEN = "
    DB 0               ; Null terminator
str_5:
    DB 2    ; Length
    DB 92
    DB "n"
    DB 0               ; Null terminator

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...test_module_const.main
_test_module_const_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; Load constant screen.BLACK = 0
    LD A, 0
    ; Register 2 already in A
    ; store , r2
    LD ($F002), HL
    ; Load constant screen.RED = 0
    LD A, 0
    LD ($F008), A     ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD ($F006), HL
    ; Load constant screen.GREEN = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; store , r6
    LD ($F00A), HL
    ; r7 = string(str_0)
    LD HL, str_0
    ; print_string(r7)
    CALL print_string
    ; r8 = load black
    LD HL, ($F002)
    ; print_u16(r8)
    CALL print_u16_decimal
    ; r9 = string(str_1)
    LD HL, str_1
    LD ($F012), HL    ; Virtual register 9 to memory
    ; print_string(r9)
    LD HL, ($F012)    ; Virtual register 9 from memory
    CALL print_string
    ; r10 = string(str_2)
    LD HL, str_2
    ; print_string(r10)
    CALL print_string
    ; r11 = load red
    LD HL, ($F006)
    ; print_u16(r11)
    CALL print_u16_decimal
    ; r12 = string(str_3)
    LD HL, str_3
    ; print_string(r12)
    CALL print_string
    ; r13 = string(str_4)
    LD HL, str_4
    ; print_string(r13)
    CALL print_string
    ; r14 = load green
    LD HL, ($F00A)
    ; print_u16(r14)
    CALL print_u16_decimal
    ; r15 = string(str_5)
    LD HL, str_5
    ; print_string(r15)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
