; MinZ generated code
; Generated: 2025-07-28 07:45:41


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.enums.opposite
_examples_enums_opposite:
; TRUE SMC function with immediate anchors
dir_immOP:
    LD A, 0        ; dir anchor (will be patched)
dir_imm0 EQU dir_immOP+1
    ; Register 2 already in A
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD B, A         ; Store to physical register B
    ; r4 = r2 == r3
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r4, else_1
    LD A, C
    OR A
    JP Z, else_1
    ; r5 = 1
    LD A, 1
    LD D, A         ; Store to physical register D
    ; return r5
    RET
    ; else_1:
else_1:
    LD A, (dir_imm0)    ; Reuse from anchor
    LD E, A         ; Store to physical register E
    ; r7 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r8 = r6 == r7
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r8, else_3
    LD A, L
    OR A
    JP Z, else_3
    ; XOR A,A (optimized from LD A,0)
    XOR A
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; return r9
    RET
    ; else_3:
else_3:
    LD A, (dir_imm0)    ; Reuse from anchor
    LD ($F014), A     ; Virtual register 10 to memory
    ; r11 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r12 = r10 == r11
    LD HL, ($F014)    ; Virtual register 10 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r12, else_5
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_5
    ; r13 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; return r13
    RET
    ; else_5:
else_5:
    ; r14 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.enums.next_state
_examples_enums_next_state:
; TRUE SMC function with immediate anchors
current_immOP:
    LD A, 0        ; current anchor (will be patched)
current_imm0 EQU current_immOP+1
    LD B, A         ; Store to physical register B
    ; XOR A,A (optimized from LD A,0)
    XOR A
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = r3 == r4
    LD D, H
    LD E, L
    LD HL, ($F008)    ; Virtual register 4 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; jump_if_not r5, else_7
    LD A, ($F00A)     ; Virtual register 5 from memory
    OR A
    JP Z, else_7
input_immOP:
    LD A, 0        ; input anchor (will be patched)
input_imm0 EQU input_immOP+1
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = 4
    LD A, 4
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r8 = r6 == r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L9
    LD HL, 0
    JP .L10
.L9:
    LD HL, 1
.L10:
    ; jump_if_not r8, else_9
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    OR A
    JP Z, else_9
    ; r9 = 1
    LD A, 1
    LD ($F012), A     ; Virtual register 9 to memory
    ; return r9
    LD HL, ($F012)    ; Virtual register 9 from memory
    RET
    ; else_9:
else_9:
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    LD A, (current_imm0)    ; Reuse from anchor
    LD E, A         ; Store to physical register E
    ; r11 = 1
    LD A, 1
    LD ($F016), A     ; Virtual register 11 to memory
    ; r12 = r10 == r11
    LD D, H
    LD E, L
    LD HL, ($F016)    ; Virtual register 11 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L11
    LD HL, 0
    JP .L12
.L11:
    LD HL, 1
.L12:
    LD ($F018), HL    ; Virtual register 12 to memory
    ; jump_if_not r12, else_11
    LD A, ($F018)     ; Virtual register 12 from memory
    OR A
    JP Z, else_11
    LD A, (input_imm0)    ; Reuse from anchor
    LD E, A         ; Store to physical register E
    ; r14 = 3
    LD A, 3
    ; Register 14 already in A
    ; r15 = r13 == r14
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L13
    LD HL, 0
    JP .L14
.L13:
    LD HL, 1
.L14:
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; jump_if_not r15, else_13
    LD A, ($F01E)     ; Virtual register 15 from memory
    OR A
    JP Z, else_13
    ; r16 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; return r16
    RET
    ; else_13:
else_13:
    LD A, (input_imm0)    ; Reuse from anchor
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; XOR A,A (optimized from LD A,0)
    XOR A
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r19 = r17 == r18
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L15
    LD HL, 0
    JP .L16
.L15:
    LD HL, 1
.L16:
    LD ($F026), HL    ; Virtual register 19 to memory
    ; jump_if_not r19, else_15
    LD A, ($F026)     ; Virtual register 19 from memory
    OR A
    JP Z, else_15
    ; r20 = 3
    LD A, 3
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; return r20
    RET
    ; else_15:
else_15:
    ; jump end_if_12
    JP end_if_12
    ; else_11:
else_11:
    LD A, (current_imm0)    ; Reuse from anchor
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r22 = 2
    LD A, 2
    LD D, A         ; Store to physical register D
    ; r23 = r21 == r22
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L17
    LD HL, 0
    JP .L18
.L17:
    LD HL, 1
.L18:
    ; jump_if_not r23, else_17
    LD A, D
    OR A
    JP Z, else_17
    LD A, (input_imm0)    ; Reuse from anchor
    LD B, A         ; Store to physical register B
    ; r25 = 3
    LD A, 3
    LD B, A         ; Store to physical register B
    ; r26 = r24 == r25
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L19
    LD HL, 0
    JP .L20
.L19:
    LD HL, 1
.L20:
    ; jump_if_not r26, else_19
    LD A, B
    OR A
    JP Z, else_19
    ; r27 = 1
    LD A, 1
    ; Register 27 already in A
    ; return r27
    RET
    ; else_19:
else_19:
    ; jump end_if_18
    JP end_if_18
    ; else_17:
else_17:
    ; end_if_18:
end_if_18:
    ; end_if_12:
end_if_12:
    ; end_if_8:
end_if_8:
    LD A, (current_imm0)    ; Reuse from anchor
    ; Register 28 already in A
    ; return r28
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.enums.main
_examples_enums_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; XOR A,A (optimized from LD A,0)
    XOR A
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; store , r2
    LD ($F002), HL
    ; r4 = 3
    LD A, 3
    ; Register 4 already in A
    ; store , r4
    LD ($F006), HL
    ; r7 = call opposite
    ; Call to opposite (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to ...examples.enums.opposite
    LD A, ($F00C)     ; Virtual register 6 from memory
    LD (dir_imm0), A        ; Patch dir
    CALL ...examples.enums.opposite
    ; store , r7
    LD ($F00A), HL
    ; return
    POP DE
    POP BC
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW dir_imm0           ; ...examples.enums.opposite.dir
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW current_imm0           ; ...examples.enums.next_state.current
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW input_imm0           ; ...examples.enums.next_state.input
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

    END main
