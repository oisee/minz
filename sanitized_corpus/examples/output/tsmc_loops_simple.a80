; MinZ generated code
; Generated: 2025-08-01 09:30:35


; Data section
    ORG $F000

_examples_tsmc_loops_simple_i:
    DW 0

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.tsmc_loops_simple.sum_array_tsmc
_examples_tsmc_loops_simple_sum_array_tsmc:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r4 = 0
    LD A, 0
    ; Register 4 already in A
    ; store , r4
    LD ($F006), HL
    ; r6 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; store , r6
    LD ($F00A), HL
    ; loop_1:
loop_1:
    ; r7 = load i
    LD HL, ($F00A)
_examples_tsmc_loops_simple_sum_array_tsmc_param_count:
    LD DE, #0000   ; SMC parameter count
    EX DE, HL      ; Move to HL for storage
    LD ($F010), HL    ; Virtual register 8 to memory
    ; r9 = r7 < r8
    LD D, H
    LD E, L
    LD HL, ($F010)    ; Virtual register 8 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD B, H
    LD C, L
    ; jump_if_not r9, end_loop_2
    LD A, C
    OR A
    JP Z, end_loop_2
    ; r10 = load sum
    LD HL, ($F006)
; TSMC reference parameter arr
arr_immOP:
    LD HL, 0000      ; TSMC ref address for arr
arr_imm0 EQU arr_immOP+1
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r12 = *r11
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD A, (HL)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r13 = r10 + r12
    LD D, H
    LD E, L
    ADD HL, DE
    ; store sum, r13
    LD ($F006), HL
    LD HL, (arr_imm0) ; Reload TSMC ref address
    ; r15 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r16 = r14 + r15
    LD D, H
    LD E, L
    ; Register 15 already in HL
    ADD HL, DE
    LD ($F020), HL    ; Virtual register 16 to memory
    ; Update TSMC reference arr
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD (arr_imm0), HL    ; Update TSMC reference immediate
    ; r17 = load i
    LD HL, ($F00A)
    ; Register 17 already in HL
    ; r18 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r19 = r17 + r18
    ; Register 17 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F026), HL    ; Virtual register 19 to memory
    ; store i, r19
    LD HL, ($F026)    ; Virtual register 19 from memory
    LD ($F00A), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r20 = load sum
    LD HL, ($F006)
    ; Register 20 already in HL
    ; return r20
    ; Register 20 already in HL
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
