; MinZ generated code
; Generated: 2025-07-28 08:45:58


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.shadow_registers.update_sprites
_examples_shadow_registers_update_sprites:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    ; Register 2 already in A
    ; store , r2
    LD ($F002), HL
    ; loop_1:
loop_1:
    ; r3 = load i
    LD HL, ($F002)
    ; r4 = 8
    LD A, 8
    LD D, A         ; Store to physical register D
    ; r5 = r3 < r4
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r5, end_loop_2
    LD A, E
    OR A
    JP Z, end_loop_2
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.shadow_registers.setup_interrupts
_examples_shadow_registers_setup_interrupts:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = load IM2_TABLE
    LD HL, ($F000)
    ; store , r2
    LD ($F002), HL
    ; loop_3:
loop_3:
    ; r4 = load addr
    LD HL, ($F002)
    ; r5 = load IM2_TABLE
    LD HL, ($F000)
    ; r6 = 257
    LD HL, 257
    ; Register 6 already in HL
    ; r7 = r5 + r6
    LD D, H
    LD E, L
    ; Register 6 already in HL
    ADD HL, DE
    LD D, H
    LD E, L
    ; r8 = r4 < r7
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD B, H
    LD C, L
    ; jump_if_not r8, end_loop_4
    LD A, C
    OR A
    JP Z, end_loop_4
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.shadow_registers.main
_examples_shadow_registers_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r2
    LD ($F002), HL
    ; loop_5:
loop_5:
    ; r3 = load i
    LD HL, ($F002)
    ; Register 3 already in HL
    ; r4 = 8
    LD A, 8
    LD H, A         ; Store to physical register H
    ; r5 = r3 < r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r5, end_loop_6
    LD A, L
    OR A
    JP Z, end_loop_6
    ; jump loop_5
    JP loop_5
    ; end_loop_6:
end_loop_6:
    ; return
    RET

    END main
