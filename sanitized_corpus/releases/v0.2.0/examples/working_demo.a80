; MinZ generated code
; Generated: 2025-07-26 20:41:33


; Data section
counter:
    DW 0
buffer:
    DS 16

; Code section
    ORG $8000


; Function: examples.working_demo.init
examples_working_demo_init:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 0
    LD A, 0
    LD ($F002), A
    ; store counter, r1
    LD HL, ($F002)
    LD ($F000), HL
    ; r3 = 0
    LD A, 0
    LD ($F006), A
    ; store , r3
    LD HL, ($F006)
    LD ($F004), HL
    ; loop_1:
loop_1:
    ; r4 = load i
    LD HL, ($F000)
    LD ($F008), HL
    ; r5 = 16
    LD A, 16
    LD ($F00A), A
    ; r6 = r4 < r5
    LD HL, ($F008)
    LD D, H
    LD E, L
    LD HL, ($F00A)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    LD ($F00C), HL
    ; jump_if_not r6, end_loop_2
    LD A, ($F00C)
    OR A
    JP Z, end_loop_2
    ; r7 = load i
    LD HL, ($F000)
    LD ($F00E), HL
    ; r8 = addr(buffer)
    LD HL, buffer
    LD ($F010), HL
    ; r9 = load i
    LD HL, ($F000)
    LD ($F012), HL
    ; Calculate array element address
    LD HL, ($F010)
    LD D, H
    LD E, L
    LD HL, ($F012)
    ADD HL, DE
    LD ($F014), HL
    ; Store to array[index] (u8)
    LD HL, ($F014)
    PUSH HL
    LD A, ($F00E)
    POP HL
    LD (HL), A
    ; r11 = load i
    LD HL, ($F000)
    LD ($F016), HL
    ; r12 = 1
    LD A, 1
    LD ($F018), A
    ; r13 = r11 + r12
    LD HL, ($F016)
    LD D, H
    LD E, L
    LD HL, ($F018)
    ADD HL, DE
    LD ($F01A), HL
    ; store i, r13
    LD HL, ($F01A)
    LD ($F004), HL
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; return
    RET

; Function: examples.working_demo.process
examples_working_demo_process:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD ($F004), A
    ; store , r2
    LD HL, ($F004)
    LD ($F002), HL
    ; loop_3:
loop_3:
    ; r3 = load i
    LD HL, ($F000)
    LD ($F006), HL
    ; r4 = 16
    LD A, 16
    LD ($F008), A
    ; r5 = r3 < r4
    LD HL, ($F006)
    LD D, H
    LD E, L
    LD HL, ($F008)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    LD ($F00A), HL
    ; jump_if_not r5, end_loop_4
    LD A, ($F00A)
    OR A
    JP Z, end_loop_4
    ; r7 = addr(buffer)
    LD HL, buffer
    LD ($F00E), HL
    ; r8 = load i
    LD HL, ($F000)
    LD ($F010), HL
    ; Load array element (u8)
    LD HL, ($F00E)
    PUSH HL
    LD A, ($F010)
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F012), A
    ; store , r9
    LD HL, ($F012)
    LD ($F00C), HL
    ; r10 = load val
    LD HL, ($F000)
    LD ($F014), HL
    ; r11 = 1
    LD A, 1
    LD ($F016), A
    ; r12 = r10 + r11
    LD HL, ($F014)
    LD D, H
    LD E, L
    LD HL, ($F016)
    ADD HL, DE
    LD ($F018), HL
    ; r13 = addr(buffer)
    LD HL, buffer
    LD ($F01A), HL
    ; r14 = load i
    LD HL, ($F000)
    LD ($F01C), HL
    ; Calculate array element address
    LD HL, ($F01A)
    LD D, H
    LD E, L
    LD HL, ($F01C)
    ADD HL, DE
    LD ($F01E), HL
    ; Store to array[index] (u8)
    LD HL, ($F01E)
    PUSH HL
    LD A, ($F018)
    POP HL
    LD (HL), A
    ; r16 = load i
    LD HL, ($F000)
    LD ($F020), HL
    ; r17 = 1
    LD A, 1
    LD ($F022), A
    ; r18 = r16 + r17
    LD HL, ($F020)
    LD D, H
    LD E, L
    LD HL, ($F022)
    ADD HL, DE
    LD ($F024), HL
    ; store i, r18
    LD HL, ($F024)
    LD ($F002), HL
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r19 = load counter
    LD HL, ($F000)
    LD ($F026), HL
    ; r20 = 1
    LD A, 1
    LD ($F028), A
    ; r21 = r19 + r20
    LD HL, ($F026)
    LD D, H
    LD E, L
    LD HL, ($F028)
    ADD HL, DE
    LD ($F02A), HL
    ; store counter, r21
    LD HL, ($F02A)
    LD ($F000), HL
    ; return
    RET

; Function: examples.working_demo.is_done
examples_working_demo_is_done:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = load counter
    LD HL, ($F000)
    LD ($F002), HL
    ; r2 = 10
    LD A, 10
    LD ($F004), A
    ; r3 = r1 >= r2
    LD HL, ($F002)
    LD D, H
    LD E, L
    LD HL, ($F004)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP P, .L5
    JP Z, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    LD ($F006), HL
    ; return r3
    LD HL, ($F006)
    RET

; Function: examples.working_demo.main
examples_working_demo_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = call init
    ; Call to init (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL init
    LD ($F002), HL
    ; loop_5:
loop_5:
    ; r2 = call is_done
    ; Call to is_done (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL is_done
    LD ($F004), HL
    ; unknown op 44
    LD HL, ($F004)
    LD A, L
    CPL
    LD L, A
    LD A, H
    CPL
    LD H, A
    LD ($F006), HL
    ; jump_if_not r3, end_loop_6
    LD A, ($F006)
    OR A
    JP Z, end_loop_6
    ; r4 = call process
    ; Call to process (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL process
    LD ($F008), HL
    ; jump loop_5
    JP loop_5
    ; end_loop_6:
end_loop_6:
    ; r5 = addr(buffer)
    LD HL, buffer
    LD ($F00A), HL
    ; r6 = 0
    LD A, 0
    LD ($F00C), A
    ; Load array element (u8)
    LD HL, ($F00A)
    PUSH HL
    LD A, ($F00C)
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F00E), A
    ; r8 = 10
    LD A, 10
    LD ($F010), A
    ; r9 = r7 == r8
    LD HL, ($F00E)
    LD D, H
    LD E, L
    LD HL, ($F010)
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L7
    LD HL, 0
    JP .L8
.L7:
    LD HL, 1
.L8:
    LD ($F012), HL
    ; jump_if_not r9, else_7
    LD A, ($F012)
    OR A
    JP Z, else_7
    ; asm { ld a, 0x55
ld (0x4000), a }
    ld a, 0x55
    ld (0x4000), a
    ; jump end_if_8
    JP end_if_8
    ; else_7:
else_7:
    ; end_if_8:
end_if_8:
    ; return
    RET

    END main
