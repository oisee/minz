; MinZ generated code
; Generated: 2025-08-01 12:18:52


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi.smc_function
.Users_alice_dev_minz_ts_examples_test_abi_smc_function:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_test_abi_smc_function_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
.Users_alice_dev_minz_ts_examples_test_abi_smc_function_param_y:
    LD DE, #0000   ; SMC parameter y (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi.register_function
.Users_alice_dev_minz_ts_examples_test_abi_register_function:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    LD A, E       ; Get parameter b
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = load a
    LD HL, ($F000)
    ; r4 = load b
    LD HL, ($F000)
    ; r5 = r3 * r4
    ; 8-bit multiplication
    LD A, E
    LD B, A       ; B = multiplicand
    LD A, H
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_0
.mul_loop_0:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_0
.mul_done_0:
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi.mapped_function
.Users_alice_dev_minz_ts_examples_test_abi_mapped_function:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), A     ; Virtual register 1 to memory
    LD A, E       ; Get parameter y
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = load x
    LD HL, ($F000)
    ; r4 = load y
    LD HL, ($F000)
    ; r5 = r3 - r4
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    ; return r5
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi.stack_function
.Users_alice_dev_minz_ts_examples_test_abi_stack_function:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    LD A, E       ; Get parameter count
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = load data
    LD HL, ($F000)
    LD D, H
    LD E, L
    ; r4 = load count
    LD HL, ($F000)
    ; r5 = r3 + r4
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 5 already in HL
    ; return r5
    ; Register 5 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_abi.external_function
.Users_alice_dev_minz_ts_examples_test_abi_external_function:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -8
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    LD ($F002), HL    ; Virtual register 1 to memory
    EX DE, HL     ; Get parameter size from DE
    LD ($F004), HL    ; Virtual register 2 to memory
    ; r4 = 5
    LD A, 5
    ; Register 4 already in A
    ; r5 = 10
    LD A, 10
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = call smc_function
    ; Call to smc_function (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F00A)    ; Virtual register 5 from memory
    PUSH HL       ; Argument 1
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_abi_smc_function
    ; store , r6
    LD (IX_2), L
    LD (IX_1), H
    ; r8 = 3
    LD A, 3
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = 4
    LD A, 4
    LD H, A         ; Store to physical register H
    ; r10 = call register_function
    ; Call to register_function (args: 2)
    ; Register-based parameter passing
    LD A, ($F010)     ; Virtual register 8 from memory
    ; Parameter a in A
    LD A, H
    LD E, A       ; Parameter b in E
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_abi_register_function
    ; store , r10
    LD (IX_4), L
    LD (IX_3), H
    ; r12 = 20
    LD A, 20
    LD H, A         ; Store to physical register H
    ; r13 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r14 = call mapped_function
    ; Call to mapped_function (args: 2)
    ; Register-based parameter passing
    LD A, H
    ; Parameter x in A
    LD A, L
    LD E, A       ; Parameter y in E
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_abi_mapped_function
    ; Register 14 already in HL
    ; store , r14
    ; Register 14 already in HL
    LD (IX_6), L
    LD (IX_5), H
    ; r16 = 1000
    LD HL, 1000
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = 50
    LD A, 50
    LD L, A         ; Store to HL (low byte)
    ; r18 = call stack_function
    ; Call to stack_function (args: 2)
    ; Register-based parameter passing
    LD HL, ($F020)    ; Virtual register 16 from memory
    ; Parameter data in HL
    LD A, L
    LD E, A       ; Parameter count in E
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_abi_stack_function
    ; store , r18
    LD (IX_8), L
    LD (IX_7), H
    ; return
    LD SP, IX
    POP IX
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
