; MinZ generated code
; Generated: 2025-08-01 12:18:56


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_what_works.add_numbers
.Users_alice_dev_minz_ts_examples_test_what_works_add_numbers:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_test_what_works_add_numbers_param_a:
    LD HL, #0000   ; SMC parameter a (u8->u16)
.Users_alice_dev_minz_ts_examples_test_what_works_add_numbers_param_b:
    LD DE, #0000   ; SMC parameter b (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_what_works.test_for_loops
.Users_alice_dev_minz_ts_examples_test_what_works_test_for_loops:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; store , r2
    LD ($F002), HL
    ; r3 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r4 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Initialize loop variable i
    ; for_loop_1:
for_loop_1:
    ; Check i < end
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r6, for_end_2
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, for_end_2
    ; r7 = load sum
    LD HL, ($F002)
    ; r8 = load i
    LD HL, ($F000)
    ; r9 = r7 + r8
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F012), HL    ; Virtual register 9 to memory
    ; store sum, r9
    LD HL, ($F012)    ; Virtual register 9 from memory
    LD ($F002), HL
    ; r10 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Increment i
    LD D, H
    LD E, L
    ; Register 10 already in HL
    ADD HL, DE
    ; jump for_loop_1
    JP for_loop_1
    ; for_end_2:
for_end_2:
    ; r11 = load sum
    LD HL, ($F002)
    ; return r11
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_what_works.test_arrays
.Users_alice_dev_minz_ts_examples_test_what_works_test_arrays:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; r3 = load arr
    LD HL, ($F002)
    ; Register 3 already in HL
    ; r4 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; Calculate array element address
    ; Register 3 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; Store to array[index] (u8)
    LD HL, ($F00A)    ; Virtual register 5 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r6 = 20
    LD A, 20
    LD L, A         ; Store to HL (low byte)
    ; r7 = load arr
    LD HL, ($F002)
    ; r8 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Calculate array element address
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F012), HL    ; Virtual register 9 to memory
    ; Store to array[index] (u8)
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r10 = load arr
    LD HL, ($F002)
    LD ($F014), HL    ; Virtual register 10 to memory
    ; r11 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; Load array element (u8)
    LD HL, ($F014)    ; Virtual register 10 from memory
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r13 = load arr
    LD HL, ($F002)
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; r14 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; Load array element (u8)
    LD HL, ($F01A)    ; Virtual register 13 from memory
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r16 = r12 + r15
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 16 already in HL
    ; return r16
    ; Register 16 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_what_works.test_structs
.Users_alice_dev_minz_ts_examples_test_what_works_test_structs:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 15
    LD A, 15
    LD H, A         ; Store to physical register H
    ; r3 = load p
    LD HL, ($F002)
    ; Store to field x (offset 0)
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r4 = 25
    LD A, 25
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = load p
    LD HL, ($F002)
    ; Store to field y (offset 1)
    LD DE, 1
    ADD HL, DE
    PUSH HL
    LD HL, ($F008)    ; Virtual register 4 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r6 = load p
    LD HL, ($F002)
    ; Load field x (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r8 = load p
    LD HL, ($F002)
    ; Load field y (offset 1)
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r10 = r7 + r9
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 10 already in HL
    ; return r10
    ; Register 10 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_what_works.test_while
.Users_alice_dev_minz_ts_examples_test_what_works_test_while:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r2
    LD A, L
    LD ($F002), A
    ; r4 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r4
    LD A, H
    LD ($F006), A
    ; loop_3:
loop_3:
    ; r5 = load i
    LD A, ($F002)
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = 5
    LD A, 5
    LD H, A         ; Store to physical register H
    ; r7 = r5 < r6
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r7, end_loop_4
    LD A, L
    OR A
    JP Z, end_loop_4
    ; r8 = load sum
    LD A, ($F006)
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = load i
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r10 = r8 + r9
    LD HL, ($F010)    ; Virtual register 8 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store sum, r10
    LD A, L
    LD ($F006), A
    ; r11 = load i
    LD A, ($F002)
    LD ($F016), A     ; Virtual register 11 to memory
    ; r12 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r13 = r11 + r12
    LD HL, ($F016)    ; Virtual register 11 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r13
    LD A, L
    LD ($F002), A
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r14 = load sum
    LD A, ($F006)
    LD H, A         ; Store to physical register H
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_what_works.test_if
.Users_alice_dev_minz_ts_examples_test_what_works_test_if:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
.Users_alice_dev_minz_ts_examples_test_what_works_test_if_param_x:
    LD HL, #0000   ; SMC parameter x (u8->u16)
    ; r3 = 10
    LD A, 10
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 > r3
    LD D, H
    LD E, L
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L6
    JP P, .L5
    LD HL, 0
    JP .L6
.L5:
    LD HL, 1
.L6:
    ; jump_if_not r4, else_5
    LD A, H
    OR A
    JP Z, else_5
    LD A, (.Users_alice_dev_minz_ts_examples_test_what_works_test_if_param_x)
    LD L, A         ; Store to physical register L
    ; r6 = 2
    LD A, 2
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = r5 * r6
    ; 8-bit multiplication
    LD A, L
    LD B, A       ; B = multiplicand
    LD A, ($F00C)     ; Virtual register 6 from memory
    LD C, A       ; C = multiplier
    LD HL, 0      ; HL = result
    LD A, C
    OR A          ; Check if multiplier is 0
    JR Z, .mul_done_6
.mul_loop_6:
    LD D, 0
    LD E, B
    ADD HL, DE    ; Add multiplicand to result
    DEC C
    JR NZ, .mul_loop_6
.mul_done_6:
    ; return r7
    RET
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    LD A, (.Users_alice_dev_minz_ts_examples_test_what_works_test_if_param_x)
    LD L, A         ; Store to physical register L
    ; r9 = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ; Register 9 already in HL
    ADD HL, DE
    ; return r10
    RET
    ; end_if_6:
end_if_6:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_what_works.test_tsmc
.Users_alice_dev_minz_ts_examples_test_what_works_test_tsmc:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; TSMC reference parameter ptr
ptr_immOP:
    LD HL, 0000      ; TSMC ref address for ptr
ptr_imm0 EQU ptr_immOP+1
    ; r4 = *r3
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; store , r4
    LD A, L
    LD ($F004), A
    LD HL, (ptr_imm0) ; Reload TSMC ref address
    LD D, H
    LD E, L
    ; r6 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; r7 = r5 + r6
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ; Register 6 already in HL
    ADD HL, DE
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; Update TSMC reference ptr
    LD HL, ($F00E)    ; Virtual register 7 from memory
    LD (ptr_imm0), HL    ; Update TSMC reference immediate
    ; r8 = load result
    LD A, ($F004)
    LD L, A         ; Store to HL (low byte)
    ; return r8
    ; Register 8 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_what_works.main
.Users_alice_dev_minz_ts_examples_test_what_works_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r2
    LD ($F002), HL
    ; r3 = load result
    LD HL, ($F002)
    ; Register 3 already in HL
    ; r4 = call test_for_loops
    ; Call to test_for_loops (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_what_works_test_for_loops
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; store result, r5
    LD HL, ($F00A)    ; Virtual register 5 from memory
    LD ($F002), HL
    ; r6 = load result
    LD HL, ($F002)
    ; Register 6 already in HL
    ; r7 = call test_arrays
    ; Call to test_arrays (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_what_works_test_arrays
    ; r8 = r6 + r7
    ; Register 6 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F010), HL    ; Virtual register 8 to memory
    ; store result, r8
    LD HL, ($F010)    ; Virtual register 8 from memory
    LD ($F002), HL
    ; r9 = load result
    LD HL, ($F002)
    ; Register 9 already in HL
    ; r10 = call test_structs
    ; Call to test_structs (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_what_works_test_structs
    ; r11 = r9 + r10
    ; Register 9 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F016), HL    ; Virtual register 11 to memory
    ; store result, r11
    LD HL, ($F016)    ; Virtual register 11 from memory
    LD ($F002), HL
    ; r12 = load result
    LD HL, ($F002)
    ; Register 12 already in HL
    ; r13 = call test_while
    ; Call to test_while (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_what_works_test_while
    ; r14 = r12 + r13
    ; Register 12 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; store result, r14
    LD HL, ($F01C)    ; Virtual register 14 from memory
    LD ($F002), HL
    ; r15 = load result
    LD HL, ($F002)
    ; Register 15 already in HL
    ; r16 = 15
    LD A, 15
    LD H, A         ; Store to physical register H
    ; r17 = call test_if
    ; Call to test_if (args: 1)
    ; Stack-based parameter passing
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=false
    CALL .Users_alice_dev_minz_ts_examples_test_what_works_test_if
    ; r18 = r15 + r17
    ; Register 15 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F024), HL    ; Virtual register 18 to memory
    ; store result, r18
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD ($F002), HL
    ; r19 = load result
    LD HL, ($F002)
    ; Register 19 already in HL
    ; return r19
    ; Register 19 already in HL
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
