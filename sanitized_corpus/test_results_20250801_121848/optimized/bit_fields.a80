; MinZ generated code
; Generated: 2025-08-01 12:18:56


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.bit_fields.set_screen_attr
.Users_alice_dev_minz_ts_examples_bit_fields_set_screen_attr:
; TRUE SMC function with immediate anchors
    ; r5 = 22528
    LD HL, 22528
    ; Register 5 already in HL
y_immOP:
    LD A, 0        ; y anchor (will be patched)
y_imm0 EQU y_immOP+1
    ; Register 6 already in A
    ; r7 = 32
    LD A, 32
    LD C, A         ; Store to physical register C
    ; r8 = r6 * r7
    ; 16-bit multiplication
    LD (mul_src1_0), HL  ; Save multiplicand
    LD (mul_src2_0), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_0)  ; DE = multiplicand
    LD BC, (mul_src2_0)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_0
.mul16_loop_0:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_0
.mul16_done_0:
mul_src1_0: DW 0
mul_src2_0: DW 0
    LD D, H
    LD E, L
    ; r9 = r5 + r8
    ; Register 5 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    LD B, H
    LD C, L
x_immOP:
    LD A, 0        ; x anchor (will be patched)
x_imm0 EQU x_immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r11 = r9 + r10
    LD H, B
    LD L, C
    LD D, H
    LD E, L
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; store , r11
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD ($F008), HL
    ; return
    POP DE
    POP BC
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.bit_fields.main
.Users_alice_dev_minz_ts_examples_bit_fields_main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 71
    LD A, 71
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; store , r2
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; r4 = load raw_value
    LD A, ($F002)
    LD ($F008), A     ; Virtual register 4 to memory
    ; store , r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    LD ($F006), HL
    ; r6 = load attr
    LD HL, ($F006)
    ; store , r6
    LD A, L
    LD ($F00A), A
    ; Load bit field ink (offset 0, width 3)
    LD A, L
    AND 7
    LD H, A         ; Store to physical register H
    ; store , r9
    LD ($F00E), HL
    ; return
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW x_imm0           ; .Users_alice_dev_minz_ts_examples_bit_fields_set_screen_attr_x
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y_imm0           ; .Users_alice_dev_minz_ts_examples_bit_fields_set_screen_attr_y
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW attr_imm0           ; .Users_alice_dev_minz_ts_examples_bit_fields_set_screen_attr_attr
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
