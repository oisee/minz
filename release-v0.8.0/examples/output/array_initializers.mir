; MinZ Intermediate Representation (MIR)
; Module: main

Function ...examples.array_initializers.main() -> void
  @smc
  Locals:
    r1 = colors: [3]u8
    r2 = matrix: [2][2]u8
    r3 = empty: [0]u8
    r4 = traditional: [3]u8
  Instructions:
      0: 83
      1: 82
      2: r6 = load colors
      3: r7 = 0
      4: 15 ; Load array element (u8)
      5: 77
      6: 83
      7: 82
      8: r10 = load colors
      9: r11 = 1
     10: 15 ; Load array element (u8)
     11: 77
     12: 83
     13: 82
     14: r14 = load colors
     15: r15 = 2
     16: 15 ; Load array element (u8)
     17: 77
     18: 83
     19: 82
     20: 83
     21: 82
     22: r19 = load matrix
     23: r20 = 0
     24: 15 ; Load array element ([2]u8)
     25: r22 = 0
     26: 15 ; Load array element (u8)
     27: 77
     28: 83
     29: 82
     30: r25 = load matrix
     31: r26 = 0
     32: 15 ; Load array element ([2]u8)
     33: r28 = 1
     34: 15 ; Load array element (u8)
     35: 77
     36: 83
     37: 82
     38: r31 = load matrix
     39: r32 = 1
     40: 15 ; Load array element ([2]u8)
     41: r34 = 0
     42: 15 ; Load array element (u8)
     43: 77
     44: 83
     45: 82
     46: r37 = load matrix
     47: r38 = 1
     48: 15 ; Load array element ([2]u8)
     49: r40 = 1
     50: 15 ; Load array element (u8)
     51: 77
     52: 83
     53: 82
     54: return

Function ...examples.array_initializers.sum_array(arr: *[4]u8) -> u8
  Locals:
    r2 = sum: u8
  Instructions:
      0: r3 = 0
      1: store , r3
      2: r4 = 0
      3: r5 = 4
      4: r6 = r4 ; Initialize loop variable i
      5: for_loop_1:
      6: r7 = r6 < r5 ; Check i < end
      7: jump_if_not r7, for_end_2
      8: r8 = load sum
      9: 12
     10: r10 = load i
     11: 15 ; Load array element (u8)
     12: r12 = r8 + r11
     13: store sum, r12
     14: r13 = 1
     15: r6 = r6 + r13 ; Increment i
     16: jump for_loop_1
     17: for_end_2:
     18: r14 = load sum
     19: return r14

Function ...examples.array_initializers.test_sum() -> void
  @smc
  Locals:
    r1 = numbers: [4]u8
    r2 = total: u16
  Instructions:
      0: r3 = load numbers
      1: 64
      2: r5 = call sum_array
      3: store , r5
      4: 83
      5: 82
      6: r7 = load total
      7: 78
      8: return

