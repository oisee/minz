; MinZ Intermediate Representation (MIR)
; Module: main

Function ...examples.test_compound_assignment.test_compound_ops() -> u16
  @smc
  Locals:
    r1 = x: u8
    r3 = y: u16
  Instructions:
      0: r2 = 10
      1: store , r2
      2: r4 = 100
      3: store , r4
      4: r5 = 5
      5: r6 = load x
      6: r7 = r6 + r5 ; Compound assignment x +=
      7: store x, r7
      8: r8 = 3
      9: r9 = load x
     10: r10 = r9 - r8 ; Compound assignment x -=
     11: store x, r10
     12: r11 = 2
     13: r12 = load x
     14: r13 = r12 * r11 ; Compound assignment x *=
     15: store x, r13
     16: r14 = 4
     17: r15 = load x
     18: 42 ; Compound assignment x /=
     19: store x, r16
     20: r17 = 4
     21: r18 = load x
     22: 43 ; Compound assignment x %=
     23: store x, r19
     24: r20 = 50
     25: r21 = load y
     26: r22 = r21 + r20 ; Compound assignment y +=
     27: store y, r22
     28: r23 = 25
     29: r24 = load y
     30: r25 = r24 - r23 ; Compound assignment y -=
     31: store y, r25
     32: r26 = 3
     33: r27 = load y
     34: r28 = r27 * r26 ; Compound assignment y *=
     35: store y, r28
     36: r29 = 5
     37: r30 = load y
     38: 42 ; Compound assignment y /=
     39: store y, r31
     40: r32 = load y
     41: r33 = load x
     42: r34 = r32 + r33
     43: return r34

Function ...examples.test_compound_assignment.test_compound_in_expressions() -> u8
  @smc
  Locals:
    r1 = a: u8
    r3 = b: u8
    r5 = result: u8
  Instructions:
      0: r2 = 5
      1: store , r2
      2: r4 = 10
      3: store , r4
      4: r6 = 3
      5: r7 = load a
      6: r8 = r7 + r6 ; Compound assignment a +=
      7: store a, r8
      8: r9 = 2
      9: r10 = load b
     10: r11 = r10 * r9 ; Compound assignment b *=
     11: store b, r11
     12: r12 = r8 + r11
     13: store , r12
     14: r13 = load result
     15: return r13

Function ...examples.test_compound_assignment.main() -> u16
  @smc
  Locals:
    r1 = basic: u16
    r3 = expr: u8
  Instructions:
      0: r2 = call test_compound_ops
      1: store , r2
      2: r4 = call test_compound_in_expressions
      3: store , r4
      4: r5 = load basic
      5: r6 = load expr
      6: r7 = r5 + r6
      7: return r7

