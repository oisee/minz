// Comprehensive @abi Assembly Integration Test Suite
// Tests all aspects of seamless assembly integration

// =============================================================================
// 1. BASIC CALLING CONVENTIONS
// =============================================================================

@abi("smc")
fun test_smc(x: u8, y: u8) -> u8 {
    return x + y;
}

@abi("register")  
fun test_register(a: u8, b: u8) -> u8 {
    return a * b;
}

@abi("stack")
fun test_stack(data: u16, count: u8) -> u16 {
    return data + count;
}

@abi("shadow")
fun test_shadow(x: u8) -> u8 {
    return x << 1;
}

@abi("virtual") 
fun test_virtual(a: u16, b: u16) -> u16 {
    return a - b;
}

// =============================================================================
// 2. PRECISE REGISTER MAPPING FOR ASSEMBLY INTEGRATION  
// =============================================================================

// Single register mapping
@abi("register: A=value")
@extern
fun asm_set_border(value: u8) -> void;

// Multiple register mapping
@abi("register: HL=src, DE=dst") 
@extern
fun asm_copy_16bit(src: u16, dst: u16) -> void;

// Complex register mapping
@abi("register: HL=buffer, DE=size, A=flags, BC=extra")
@extern  
fun asm_process_buffer(buffer: *u8, size: u16, flags: u8, extra: u16) -> void;

// =============================================================================
// 3. ZX SPECTRUM ROM INTEGRATION TESTS
// =============================================================================

// ZX Spectrum ROM print character (RST 16)
@abi("register: A=char")
@extern
fun rom_print_char(c: u8) -> void;

// ZX Spectrum ROM scroll screen
@abi("register: B=lines")
@extern  
fun rom_scroll_screen(lines: u8) -> void;

// ZX Spectrum ROM clear screen
@abi("naked")
@extern
fun rom_clear_screen() -> void;

// =============================================================================
// 4. HARDWARE DRIVER INTEGRATION TESTS
// ============================================================================= 

// AY-3-8912 Sound Chip
@abi("register: A=reg, C=value")
@extern
fun ay_write_register(reg: u8, value: u8) -> void;

// Memory banking
@abi("register: A=bank")
@extern
fun set_memory_bank(bank: u8) -> void;

// Port I/O
@abi("register: BC=port, A=value") 
@extern
fun write_port(port: u16, value: u8) -> void;

@abi("register: BC=port")
@extern  
fun read_port(port: u16) -> u8;

// =============================================================================
// 5. MIXED HIGH-LEVEL AND ASSEMBLY INTEGRATION
// =============================================================================

@abi("register: HL=data")
fun process_with_assembly(data: u16) -> u16 {
    // High-level logic
    let result = data * 2;
    
    // Call assembly function for optimization
    asm_multiply_by_3(result);
    
    return result;
}

@abi("register: HL=value")
@extern
fun asm_multiply_by_3(value: u16) -> u16;

// =============================================================================
// 6. PERFORMANCE CRITICAL FUNCTIONS
// =============================================================================

// Ultra-fast pixel plotting  
@abi("register: H=x, L=y, A=color")
@extern
fun fast_plot_pixel(x: u8, y: u8, color: u8) -> void;

// Fast memory fill
@abi("register: HL=addr, BC=count, A=value")
@extern  
fun fast_memory_fill(addr: u16, count: u16, value: u8) -> void;

// Fast string comparison
@abi("register: HL=str1, DE=str2")
@extern
fun fast_string_compare(str1: *u8, str2: *u8) -> u8;

// =============================================================================
// 7. MAIN TEST FUNCTION - COMPREHENSIVE INTEGRATION TEST
// =============================================================================

fun main() {
    // Test basic calling conventions
    let smc_result = test_smc(10, 20);
    let reg_result = test_register(3, 4); 
    let stack_result = test_stack(1000, 50);
    let shadow_result = test_shadow(8);
    let virtual_result = test_virtual(100, 25);
    
    // Test ROM integration (would work on real ZX Spectrum)
    rom_print_char(65);  // Print 'A'
    rom_scroll_screen(1); // Scroll one line
    rom_clear_screen();   // Clear screen
    
    // Test hardware integration  
    set_memory_bank(1);   // Switch to bank 1
    ay_write_register(7, 0x3F); // AY register 7 = all channels on
    write_port(0xFE, 2);  // Set border to red
    let port_value = read_port(0xFE); // Read border port
    
    // Test mixed high-level/assembly
    let mixed_result = process_with_assembly(42);
    
    // Test performance functions
    fast_plot_pixel(10, 20, 1);     // Plot white pixel at 10,20
    fast_memory_fill(0x4000, 768, 0); // Clear top third of screen
    let cmp_result = fast_string_compare("hello", "world");
    
    // Test buffer processing
    let buffer = 0x8000 as *u8;
    asm_process_buffer(buffer, 256, 0x80, 0x1234);
}