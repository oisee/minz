; MinZ generated code
; Generated: 2025-07-28 08:45:59


; Data section
    ORG $F000

items:
    DS 2

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: ...examples.test_loop_debug.main
...examples.test_loop_debug.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = addr(items)
    LD HL, items
    LD ($F002), HL    ; Virtual register 1 to memory
    ; Load table base address
    LD HL, ($F002)    ; Virtual register 1 from memory
    ; Load table base for end calculation
    LD HL, ($F002)    ; Virtual register 1 from memory
    ; Calculate table end (+ 2 elements * 1 bytes)
    LD DE, 2
    ADD HL, DE
    ; Load loop counter
    LD A, 2
    LD C, A         ; Store to physical register C
    ; loop_start_1:
loop_start_1:
    ; Check if reached end of table
    LD D, H
    LD E, L
    OR A      ; Clear carry
    SBC HL, DE
    ; Exit if done
    LD A, D
    OR A
    JP NZ, loop_end_2
    ; Copy element to buffer at $F000
    LD DE, $F000    ; Buffer address
    LD BC, 1       ; Size
    LDIR            ; Copy to buffer
    ; Load item.value from buffer at $F000
    LD A, ($F000)
    LD E, A         ; Store to physical register E
    ; store , r7
    LD ($F00C), HL
    ; r9 = load old_val
    LD HL, ($F00C)
    ; r10 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r11 = r9 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    ; store , r11
    LD ($F010), HL
    ; Copy buffer back to element at $F000
    EX DE, HL       ; DE = destination
    LD HL, $F000    ; Buffer address
    LD BC, 1       ; Size
    LDIR            ; Copy from buffer
    ; Advance to next element (+1 bytes)
    LD DE, 1
    ADD HL, DE
    ; Decrement counter and loop if not zero
    LD A, C
    LD B, A
    DJNZ loop_start_1
    LD A, B
    LD C, A         ; Store to physical register C
    ; loop_end_2:
loop_end_2:
    ; return
    RET

    END main
