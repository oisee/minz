// Comprehensive test for v0.3.2 features
module test_all_features;

// Test 1: Global variable initializers
global u8 g_version = 3;
global u16 g_magic = 0xCAFE;
global bool g_enabled = true;
global u8 g_computed = 10 + 20;      // Constant expression
global u16 g_shifted = 1 << 10;      // 1024
global u8 g_masked = 0xFF & 0x3C;    // 0x3C = 60

// Test 2: Local variable addressing
fun test_locals() -> u16 {
    let u8 a = 10;
    let u8 b = 20;
    let u8 c = 30;
    let u16 sum = a + b + c;  // Should be 60
    
    // Verify each variable has unique address
    let u8 d = a;  // Copy a
    let u8 e = b;  // Copy b
    let u8 f = c;  // Copy c
    
    return sum + d + e + f;  // Should be 120
}

// Test 3: 16-bit arithmetic operations
fun test_16bit_ops() -> void {
    let u16 x = 1000;
    let u16 y = 234;
    
    // Test multiplication (16-bit)
    let u16 product = x * y;  // 234000, but truncated to 16-bit = 37392
    
    // Test shifts (16-bit)
    let u16 left_shift = x << 2;   // 4000
    let u16 right_shift = x >> 2;  // 250
    
    // Store results for verification
    g_magic = product & 0xFFFF;
}

// Test 4: Type propagation
fun test_type_aware_ops() -> u16 {
    // Small numbers should use 8-bit ops
    let u8 small_a = 5;
    let u8 small_b = 10;
    let u8 small_product = small_a * small_b;  // 50 (8-bit mul)
    
    // Large numbers should use 16-bit ops
    let u16 large_a = 500;
    let u16 large_b = 100;
    let u16 large_product = large_a * large_b;  // 50000 (16-bit mul)
    
    // Mixed operations
    let u16 mixed = large_a + small_a;  // Type promotion
    
    return mixed;
}

// Test 5: Complex expressions with proper types
fun test_complex_expr() -> bool {
    let u16 base = 1000;
    let u8 offset = 50;
    
    // Complex expression with multiple operations
    let u16 result = (base << 1) + (offset * 2) - 100;
    // = (1000 << 1) + (50 * 2) - 100
    // = 2000 + 100 - 100
    // = 2000
    
    return result == 2000;
}

// Main test runner
fun main() -> void {
    // Test global initializers
    if g_version != 3 {
        return;  // FAIL
    }
    
    if g_computed != 30 {
        return;  // FAIL
    }
    
    if g_shifted != 1024 {
        return;  // FAIL
    }
    
    if g_masked != 60 {
        return;  // FAIL
    }
    
    // Test local variables
    let u16 local_result = test_locals();
    if local_result != 120 {
        return;  // FAIL
    }
    
    // Test 16-bit operations
    test_16bit_ops();
    
    // Test type-aware operations
    let u16 type_result = test_type_aware_ops();
    if type_result != 505 {
        return;  // FAIL
    }
    
    // Test complex expressions
    let bool complex_result = test_complex_expr();
    if !complex_result {
        return;  // FAIL
    }
    
    // All tests passed!
    g_enabled = true;
}