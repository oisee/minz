; MinZ Intermediate Representation (MIR)
; Module: main

Function screen_addr(x: u8, y: u8) -> u16
  @smc
  Locals:
    r3 = y_high: u8
    r7 = y_mid: u8
    r13 = y_low: u8
    r19 = addr: u16
  Instructions:
      0: 10
      1: r5 = 192
      2: r6 = r4 & r5
      3: store , r6
      4: 10
      5: r9 = 56
      6: r10 = r8 & r9
      7: r11 = 2
      8: 34
      9: store , r12
     10: 10
     11: r15 = 7
     12: r16 = r14 & r15
     13: r17 = 8
     14: 34
     15: store , r18
     16: r20 = 16384
     17: r21 = load y_low
     18: r22 = r20 | r21
     19: r23 = load y_mid
     20: r24 = r22 | r23
     21: r25 = load y_high
     22: r26 = 5
     23: 34
     24: r28 = r24 | r27
     25: 10
     26: r30 = 3
     27: 35
     28: r32 = r28 | r31
     29: store , r32
     30: r33 = load addr
     31: return r33

Function draw_sprite(x: u8, y: u8, data: *u8) -> void
  @smc
  Locals:
    r4 = row: u8
    r9 = addr: u16
    r15 = byte: *u8
  Instructions:
      0: r5 = 0
      1: store , r5
      2: loop_1:
      3: r6 = load row
      4: r7 = 8
      5: r8 = r6 < r7
      6: jump_if_not r8, end_loop_2
      7: 10
      8: 10
      9: r12 = load row
     10: r13 = r11 + r12
     11: r14 = call screen_addr
     12: store , r14
     13: 10
     14: store , r16
     15: jump loop_1
     16: end_loop_2:
     17: return

Function main() -> void
  @smc
  Instructions:
      0: return

