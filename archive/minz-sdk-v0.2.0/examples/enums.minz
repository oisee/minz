// Example demonstrating enum usage in MinZ

// Game state enum
enum GameState {
    Menu,
    Playing,
    Paused,
    GameOver,
}

// Direction enum for player movement
enum Direction {
    Up,
    Down,
    Left,
    Right,
}

// Input key codes
enum Key {
    KeyQ,
    KeyA,
    KeyO,
    KeyP,
    KeySpace,
}

// Function to get opposite direction
fn opposite(dir: Direction) -> Direction {
    if dir == Direction.Up {
        return Direction.Down;
    } else if dir == Direction.Down {
        return Direction.Up;
    } else if dir == Direction.Left {
        return Direction.Right;
    } else {
        return Direction.Left;
    }
}

// Function to handle game state transitions
fn next_state(current: GameState, input: Key) -> GameState {
    if current == GameState.Menu {
        if input == Key.KeySpace {
            return GameState.Playing;
        }
    } else if current == GameState.Playing {
        if input == Key.KeyP {
            return GameState.Paused;
        } else if input == Key.KeyQ {
            return GameState.GameOver;
        }
    } else if current == GameState.Paused {
        if input == Key.KeyP {
            return GameState.Playing;
        }
    }
    
    return current;
}

fn main() -> void {
    // Initialize game state
    let mut state = GameState.Menu;
    let mut player_dir = Direction.Right;
    
    // Simulate game loop
    state = next_state(state, Key.KeySpace);  // Start game
    
    // Move player
    player_dir = Direction.Up;
    let opposite_dir = opposite(player_dir);
    
    // Pause game
    state = next_state(state, Key.KeyP);
}