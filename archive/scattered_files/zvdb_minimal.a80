; MinZ generated code
; Generated: 2025-07-30 11:01:43


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.zvdb_minimal.hamming8
examples.zvdb_minimal.hamming8:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    LD C, A         ; Store to physical register C
    LD A, E       ; Get parameter b
    LD ($F004), A     ; Virtual register 2 to memory
    ; r4 = param a
    ; Load parameter a
    ; r5 = param b
    ; Load parameter b
    ; r6 = r4 ^ r5
    LD D, H
    LD E, L
    LD A, L
    XOR E
    LD L, A
    LD A, H
    XOR D
    LD H, A
    ; store , r6
    LD ($F000), HL
    ; r8 = load xor
    LD HL, ($F000)
    ; store , r8
    LD ($F002), HL
    ; r9 = load count
    LD HL, ($F002)
    ; r10 = 85
    LD A, 85
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r11 = r9 & r10
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r12 = load count
    LD HL, ($F002)
    ; r13 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; r14 = r12 >> r13
    ; 16-bit shift right
    EXX               ; Switch to shadow registers
    LD A, E'         ; From shadow E'
    EXX               ; Switch back to main registers
    LD B, A       ; B = shift count
    OR A
    JR Z, .shr16_done_0
.shr16_loop_0:
    SRL H         ; Shift high byte right
    RR L          ; Rotate right through carry
    DJNZ .shr16_loop_0
.shr16_done_0:
    LD D, H
    LD E, L
    ; r15 = 85
    LD A, 85
    LD L, A         ; Store to HL (low byte)
    ; r16 = r14 & r15
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ; Register 15 already in HL
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = r11 + r16
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    LD D, H
    LD E, L
    LD HL, ($F020)    ; Virtual register 16 from memory
    ADD HL, DE
    LD B, H
    LD C, L
    ; store count, r17
    LD H, B
    LD L, C
    LD ($F002), HL
    ; r18 = load count
    LD HL, ($F002)
    ; Register 18 already in HL
    ; r19 = 51
    LD A, 51
    LD H, A         ; Store to physical register H
    ; r20 = r18 & r19
    ; Register 18 already in HL
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; Register 20 already in HL
    ; r21 = load count
    LD HL, ($F002)
    ; Register 21 already in HL
    ; r22 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r23 = r21 >> r22
    ; 16-bit shift right
    ; Register 21 already in HL
    LD A, H
    LD B, A       ; B = shift count
    OR A
    JR Z, .shr16_done_1
.shr16_loop_1:
    SRL H         ; Shift high byte right
    RR L          ; Rotate right through carry
    DJNZ .shr16_loop_1
.shr16_done_1:
    ; Register 23 already in HL
    ; r24 = 51
    LD A, 51
    LD L, A         ; Store to HL (low byte)
    ; r25 = r23 & r24
    ; Register 23 already in HL
    LD D, H
    LD E, L
    ; Register 24 already in HL
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    LD ($F032), HL    ; Virtual register 25 to memory
    ; r26 = r20 + r25
    ; Register 20 already in HL
    LD D, H
    LD E, L
    LD HL, ($F032)    ; Virtual register 25 from memory
    ADD HL, DE
    ; Register 26 already in HL
    ; store count, r26
    ; Register 26 already in HL
    LD ($F002), HL
    ; r27 = load count
    LD HL, ($F002)
    ; r28 = 15
    LD A, 15
    LD L, A         ; Store to physical register L
    ; r29 = r27 & r28
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; Register 29 already in HL
    ; r30 = load count
    LD HL, ($F002)
    ; Register 30 already in HL
    ; r31 = 4
    LD A, 4
    LD H, A         ; Store to physical register H
    ; r32 = r30 >> r31
    ; 16-bit shift right
    ; Register 30 already in HL
    LD A, H
    LD B, A       ; B = shift count
    OR A
    JR Z, .shr16_done_2
.shr16_loop_2:
    SRL H         ; Shift high byte right
    RR L          ; Rotate right through carry
    DJNZ .shr16_loop_2
.shr16_done_2:
    ; Register 32 already in HL
    ; r33 = 15
    LD A, 15
    LD L, A         ; Store to HL (low byte)
    ; r34 = r32 & r33
    ; Register 32 already in HL
    LD D, H
    LD E, L
    ; Register 33 already in HL
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    LD ($F044), HL    ; Virtual register 34 to memory
    ; r35 = r29 + r34
    ; Register 29 already in HL
    LD D, H
    LD E, L
    LD HL, ($F044)    ; Virtual register 34 from memory
    ADD HL, DE
    ; Register 35 already in HL
    ; store count, r35
    ; Register 35 already in HL
    LD ($F002), HL
    ; r36 = load count
    LD HL, ($F002)
    ; return r36
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.zvdb_minimal.add_vector
examples.zvdb_minimal.add_vector:
; Using absolute addressing for locals
    PUSH IX
    LD IX, SP
    ; Load parameters from registers
    ; Register 1 already in HL
    LD A, E       ; Get parameter vec
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = param store
    ; Load parameter store
    ; Load field count (offset 256)
    LD DE, 256
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r5 = 255
    LD A, 255
    LD L, A         ; Store to physical register L
    ; r6 = r4 >= r5
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP P, .L4
    JP Z, .L4
    LD HL, 0
    JP .L5
.L4:
    LD HL, 1
.L5:
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; jump_if_not r6, else_1
    LD A, ($F00C)     ; Virtual register 6 from memory
    OR A
    JP Z, else_1
    ; return
    LD SP, IX
    POP IX
    RET
    ; jump end_if_2
    JP end_if_2
    ; else_1:
else_1:
    ; end_if_2:
end_if_2:
    ; r7 = param vec
    ; Load parameter vec
    ; r8 = param store
    ; Load parameter store
    ; Load field vectors (offset 0)
    LD HL, ($F010)    ; Virtual register 8 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Register 9 already in HL
    ; r10 = param store
    ; Load parameter store
    ; Load field count (offset 256)
    ; Register 10 already in HL
    LD DE, 256
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Calculate array element address
    ; Register 9 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F018), HL    ; Virtual register 12 to memory
    ; Store to array[index] (u8)
    LD HL, ($F018)    ; Virtual register 12 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r13 = param store
    ; Load parameter store
    ; Load field count (offset 256)
    LD HL, ($F01A)    ; Virtual register 13 from memory
    LD DE, 256
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r15 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r16 = r14 + r15
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 16 already in HL
    ; r17 = param store
    ; Load parameter store
    ; Store to field count (offset 256)
    ; Register 17 already in HL
    LD DE, 256
    ADD HL, DE
    PUSH HL
    ; Register 16 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; return
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.zvdb_minimal.find_nearest
examples.zvdb_minimal.find_nearest:
; Using stack-based locals (IX+offset)
    PUSH IX
    LD IX, SP
    LD HL, -5
    ADD HL, SP
    LD SP, HL
    ; Load parameters from registers
    LD A, E       ; Get parameter query
    LD ($F004), A     ; Virtual register 2 to memory
    ; r4 = 0
    LD A, 0
    LD ($F008), A     ; Virtual register 4 to memory
    ; store , r4
    LD A, ($F008)     ; Virtual register 4 from memory
    LD (IX-1), A
    ; r6 = 255
    LD A, 255
    LD L, A         ; Store to physical register L
    ; store , r6
    LD A, L
    LD (IX-2), A
    ; r8 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store , r8
    LD A, H
    LD (IX-3), A
    ; loop_3:
loop_3:
    ; r9 = load i
    LD A, (IX-3)
    LD L, A         ; Store to HL (low byte)
    ; r10 = param store
    ; Load parameter store
    ; Load field count (offset 256)
    LD DE, 256
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F016), HL    ; Virtual register 11 to memory
    ; r12 = r9 < r11
    ; Register 9 already in HL
    LD D, H
    LD E, L
    LD HL, ($F016)    ; Virtual register 11 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L6
    LD HL, 0
    JP .L7
.L6:
    LD HL, 1
.L7:
    ; jump_if_not r12, end_loop_4
    LD A, L
    OR A
    JP Z, end_loop_4
    ; r14 = param query
    ; Load parameter query
    ; r15 = param store
    ; Load parameter store
    ; Load field vectors (offset 0)
    LD HL, ($F01E)    ; Virtual register 15 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Register 16 already in HL
    ; r17 = load i
    LD A, (IX-3)
    LD ($F022), A     ; Virtual register 17 to memory
    ; Load array element (u8)
    ; Register 16 already in HL
    PUSH HL
    LD A, ($F022)     ; Virtual register 17 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r19 = call hamming8
    ; Call to hamming8 (args: 2)
    ; Register-based parameter passing
    LD A, L
    ; Parameter a in A
    LD A, H
    LD E, A       ; Parameter b in E
    ; Found function, UsesTrueSMC=false
    CALL hamming8
    ; store , r19
    LD (IX-5), L
    LD (IX-4), H
    ; r20 = load dist
    LD L, (IX-5)
    LD H, (IX-4)
    ; r21 = load best_dist
    LD A, (IX-2)
    LD L, A         ; Store to physical register L
    ; r22 = r20 < r21
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L8
    LD HL, 0
    JP .L9
.L8:
    LD HL, 1
.L9:
    LD ($F02C), HL    ; Virtual register 22 to memory
    ; jump_if_not r22, else_5
    LD A, ($F02C)     ; Virtual register 22 from memory
    OR A
    JP Z, else_5
    ; r23 = load dist
    LD L, (IX-5)
    LD H, (IX-4)
    LD ($F02E), HL    ; Virtual register 23 to memory
    ; store best_dist, r23
    LD A, ($F02E)     ; Virtual register 23 from memory
    LD (IX-2), A
    ; r24 = load i
    LD A, (IX-3)
    LD L, A         ; Store to physical register L
    ; store best_idx, r24
    LD A, L
    LD (IX-1), A
    ; jump end_if_6
    JP end_if_6
    ; else_5:
else_5:
    ; end_if_6:
end_if_6:
    ; r25 = load i
    LD A, (IX-3)
    LD ($F032), A     ; Virtual register 25 to memory
    ; r26 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r27 = r25 + r26
    LD HL, ($F032)    ; Virtual register 25 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r27
    LD A, L
    LD (IX-3), A
    ; jump loop_3
    JP loop_3
    ; end_loop_4:
end_loop_4:
    ; r28 = load best_idx
    LD A, (IX-1)
    LD L, A         ; Store to HL (low byte)
    ; return r28
    ; Register 28 already in HL
    LD SP, IX
    POP IX
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.zvdb_minimal.main
examples.zvdb_minimal.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r3 = load store
    LD HL, ($F002)
    ; Store to field count (offset 256)
    LD DE, 256
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r4 = load store
    LD HL, ($F002)
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = &r4
    ; Address-of operation for register r4
    LD HL, $F008  ; Variable address
    ; r6 = 170
    LD A, 170
    LD L, A         ; Store to physical register L
    ; r7 = call add_vector
    ; Call to add_vector (args: 2)
    ; Register-based parameter passing
    ; Parameter store in HL
    LD A, L
    LD E, A       ; Parameter vec in E
    ; Found function, UsesTrueSMC=false
    CALL add_vector
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = load store
    LD HL, ($F002)
    ; r9 = &r8
    ; Address-of operation for register r8
    LD HL, $F010  ; Variable address
    ; r10 = 85
    LD A, 85
    LD ($F014), A     ; Virtual register 10 to memory
    ; r11 = call add_vector
    ; Call to add_vector (args: 2)
    ; Register-based parameter passing
    ; Parameter store in HL
    LD A, ($F014)     ; Virtual register 10 from memory
    LD E, A       ; Parameter vec in E
    ; Found function, UsesTrueSMC=false
    CALL add_vector
    ; r12 = load store
    LD HL, ($F002)
    ; r13 = &r12
    ; Address-of operation for register r12
    LD HL, $F018  ; Variable address
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; r14 = 240
    LD A, 240
    LD H, A         ; Store to physical register H
    ; r15 = call add_vector
    ; Call to add_vector (args: 2)
    ; Register-based parameter passing
    LD HL, ($F01A)    ; Virtual register 13 from memory
    ; Parameter store in HL
    LD A, H
    LD E, A       ; Parameter vec in E
    ; Found function, UsesTrueSMC=false
    CALL add_vector
    ; r16 = load store
    LD HL, ($F002)
    LD ($F020), HL    ; Virtual register 16 to memory
    ; r17 = &r16
    ; Address-of operation for register r16
    LD HL, $F020  ; Variable address
    ; r18 = 15
    LD A, 15
    LD L, A         ; Store to physical register L
    ; r19 = call add_vector
    ; Call to add_vector (args: 2)
    ; Register-based parameter passing
    ; Parameter store in HL
    LD A, L
    LD E, A       ; Parameter vec in E
    ; Found function, UsesTrueSMC=false
    CALL add_vector
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r21 = 171
    LD A, 171
    LD H, A         ; Store to physical register H
    ; store , r21
    LD A, H
    LD ($F028), A
    ; r23 = load store
    LD HL, ($F002)
    LD ($F02E), HL    ; Virtual register 23 to memory
    ; r24 = &r23
    ; Address-of operation for register r23
    LD HL, $F02E  ; Variable address
    ; r25 = load query
    LD A, ($F028)
    LD L, A         ; Store to physical register L
    ; r26 = call find_nearest
    ; Call to find_nearest (args: 2)
    ; Register-based parameter passing
    ; Parameter store in HL
    LD A, L
    LD E, A       ; Parameter query in E
    ; Found function, UsesTrueSMC=false
    CALL find_nearest
    ; Register 26 already in HL
    ; store , r26
    ; Register 26 already in HL
    LD ($F02C), HL
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
