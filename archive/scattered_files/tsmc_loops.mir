; MinZ Intermediate Representation (MIR)
; Module: main

; Globals:
;   examples.tsmc_loops.i: u16

Function examples.tsmc_loops.sum_array_tsmc(arr: *u8, count: u16) -> u16
  @smc
  Locals:
    r3 = sum: u16
    r5 = i: u16
  Instructions:
      0: r4 = 0
      1: store , r4
      2: r6 = 0
      3: store , r6
      4: loop_1:
      5: r7 = load i
      6: 12
      7: r9 = r7 < r8
      8: jump_if_not r9, end_loop_2
      9: r10 = load sum
     10: 12
     11: 63
     12: r13 = r10 + r12
     13: store sum, r13
     14: 12
     15: r15 = 1
     16: r16 = r14 + r15
     17: 29 ; Update TSMC reference arr
     18: r17 = load i
     19: r18 = 1
     20: r19 = r17 + r18
     21: store i, r19
     22: jump loop_1
     23: end_loop_2:
     24: r20 = load sum
     25: return r20

Function examples.tsmc_loops.find_max_tsmc(arr: *u8, count: u16) -> u8
  @smc
  Locals:
    r7 = max: u8
    r13 = i: u16
  Instructions:
      0: 12
      1: r4 = 0
      2: r5 = r3 == r4
      3: jump_if_not r5, else_3
      4: r6 = 0
      5: return r6
      6: jump end_if_4
      7: else_3:
      8: end_if_4:
      9: 12
     10: 63
     11: store , r9
     12: 12
     13: r11 = 1
     14: r12 = r10 + r11
     15: 29 ; Update TSMC reference arr
     16: r14 = 1
     17: store , r14
     18: loop_5:
     19: r15 = load i
     20: 12
     21: r17 = r15 < r16
     22: jump_if_not r17, end_loop_6
     23: 12
     24: 63
     25: r20 = load max
     26: r21 = r19 > r20
     27: jump_if_not r21, else_7
     28: 12
     29: 63
     30: store max, r23
     31: jump end_if_8
     32: else_7:
     33: end_if_8:
     34: 12
     35: r25 = 1
     36: r26 = r24 + r25
     37: 29 ; Update TSMC reference arr
     38: r27 = load i
     39: r28 = 1
     40: r29 = r27 + r28
     41: store i, r29
     42: jump loop_5
     43: end_loop_6:
     44: r30 = load max
     45: return r30

Function examples.tsmc_loops.strcmp_tsmc(s1: *u8, s2: *u8) -> i8
  @smc
  Instructions:
      0: loop_9:
      1: 12
      2: 63
      3: r5 = 0
      4: 12
      5: 63
      6: 62
      7: r9 = r5 & r8
      8: r10 = r4 != r9
      9: 12
     10: 63
     11: r13 = r10 == r12
     12: jump_if_not r13, end_loop_10
     13: 12
     14: r15 = 1
     15: r16 = r14 + r15
     16: 29 ; Update TSMC reference s1
     17: 12
     18: r18 = 1
     19: r19 = r17 + r18
     20: 29 ; Update TSMC reference s2
     21: jump loop_9
     22: end_loop_10:
     23: 12
     24: 63
     25: 12
     26: 63
     27: r24 = r21 < r23
     28: jump_if_not r24, else_11
     29: r25 = 1
     30: 42
     31: return r26
     32: jump end_if_12
     33: else_11:
     34: 12
     35: 63
     36: 12
     37: 63
     38: r31 = r28 > r30
     39: jump_if_not r31, else_13
     40: r32 = 1
     41: return r32
     42: jump end_if_14
     43: else_13:
     44: r33 = 0
     45: return r33
     46: end_if_14:
     47: end_if_12:
     48: return

Function examples.tsmc_loops.count_char_tsmc(str: *u8, ch: u8) -> u16
  @smc
  Locals:
    r3 = count: u16
  Instructions:
      0: r4 = 0
      1: store , r4
      2: loop_15:
      3: 12
      4: 63
      5: r7 = 0
      6: r8 = r6 != r7
      7: jump_if_not r8, end_loop_16
      8: 12
      9: 63
     10: 12
     11: r12 = r10 == r11
     12: jump_if_not r12, else_17
     13: r13 = load count
     14: r14 = 1
     15: r15 = r13 + r14
     16: store count, r15
     17: jump end_if_18
     18: else_17:
     19: end_if_18:
     20: 12
     21: r17 = 1
     22: r18 = r16 + r17
     23: 29 ; Update TSMC reference str
     24: jump loop_15
     25: end_loop_16:
     26: r19 = load count
     27: return r19

