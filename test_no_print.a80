; MinZ generated code
; Generated: 2025-08-06 22:21:20


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.simple_add.add$u16$u16
examples.simple_add.add$u16$u16:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
examples.simple_add.add$u16$u16_param_a:
    LD HL, #0000   ; SMC parameter a
    ; Register 3 already in HL
examples.simple_add.add$u16$u16_param_b:
    LD DE, #0000   ; SMC parameter b
    EX DE, HL      ; Move to HL for storage
    LD D, H
    LD E, L
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: examples.simple_add.main
examples.simple_add.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 10
    LD A, 10
    ; Register 2 already in A
    ; r3 = 20
    LD A, 20
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = 10
    LD A, 10
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r5 = 20
    LD A, 20
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r6 = call examples.simple_add.add$u16$u16
    ; Call to examples.simple_add.add$u16$u16 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL examples.simple_add.add$u16$u16
    ; store x, r6
    LD ($F002), HL
    ; return
    RET

    END main
