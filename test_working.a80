; MinZ generated code
; Generated: 2025-08-11 20:50:23


; Data section
    ORG $F000

test_working_features.counter:
    DB 0

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_working_features.add$u8$u8
test_working_features.add$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_working_features.add$u8$u8_param_a.op:
test_working_features.add$u8$u8_param_a equ test_working_features.add$u8$u8_param_a.op + 1
    LD A, #00      ; Parameter a (gets patched)
    ; Register 3 already in A
test_working_features.add$u8$u8_param_b.op:
test_working_features.add$u8$u8_param_b equ test_working_features.add$u8$u8_param_b.op + 1
    LD B, #00      ; Parameter b (gets patched)
    LD A, B
    LD B, A         ; Store to physical register B
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    LD A, D

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
test_working_features.add$u8$u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
test_working_features.add$u8$u8_store_addr.op:
test_working_features.add$u8$u8_store_addr equ test_working_features.add$u8$u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_working_features.sum_array$a5_u8
test_working_features.sum_array$a5_u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 0
    LD A, 0
    LD E, A         ; Store to physical register E
    ; store sum, r3
    LD A, E
    LD ($F004), A
    ; r4 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r5 = 5
    LD A, 5
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; Initialize loop variable i
    ; for_loop_1:
test_working_features_sum_array_a5_u8_for_loop_1:
    ; Check i < end
    EXX               ; Switch to shadow registers
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, test_working_features_sum_array_a5_u8_lt_true_0
    LD HL, 0       ; False
    JP test_working_features_sum_array_a5_u8_lt_done_0
test_working_features_sum_array_a5_u8_lt_true_0:
    LD HL, 1       ; True
test_working_features_sum_array_a5_u8_lt_done_0:
    ; jump_if_not r7, for_end_2
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, test_working_features_sum_array_a5_u8_for_end_2
    ; r8 = load sum
    LD A, ($F004)
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
test_working_features.sum_array$a5_u8_param_arr.op:
test_working_features.sum_array$a5_u8_param_arr equ test_working_features.sum_array$a5_u8_param_arr.op + 1
    LD HL, #0000   ; SMC parameter arr
    ; r10 = load i
    LD HL, ($F000)
    LD ($F014), HL    ; Virtual register 10 to memory
    ; Load array element (u8)
    PUSH HL
    LD A, ($F014)     ; Virtual register 10 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r12 = r8 + r11
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 12 already in HL
    ; store sum, r12
    LD A, L
    LD ($F004), A
    ; r13 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_1
    JP test_working_features_sum_array_a5_u8_for_loop_1
    ; for_end_2:
test_working_features_sum_array_a5_u8_for_end_2:
    ; r14 = load sum
    LD A, ($F004)
    LD L, A         ; Store to physical register L
    LD A, L

    ; *** SMART PATCHABLE RETURN SEQUENCE ***
    ; Default: Store to memory (most common complex case)
    ; For immediate use: Patch first NOP to RET for early return
test_working_features.sum_array$a5_u8_return_patch.op:
    NOP                     ; PATCH POINT: NOP or RET (C9) for early return
test_working_features.sum_array$a5_u8_store_addr.op:
test_working_features.sum_array$a5_u8_store_addr equ test_working_features.sum_array$a5_u8_store_addr.op + 1
    LD (0000), A            ; DEFAULT: Store result (address gets patched)
    RET                     ; Return after store
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_working_features.print$u8
test_working_features.print$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_working_features.print$u8_param_val.op:
test_working_features.print$u8_param_val equ test_working_features.print$u8_param_val.op + 1
    LD A, #00      ; Parameter val (gets patched)
    LD L, A         ; Store to HL (low byte)
    ; Call runtime print_u8_decimal
    ; Call to print_u8_decimal (args: 1)
    ; Stack-based parameter passing
    ; Register 2 already in HL
    PUSH HL       ; Argument 0
    CALL print_u8_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_working_features.print$u16
test_working_features.print$u16:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_working_features.print$u16_param_val.op:
test_working_features.print$u16_param_val equ test_working_features.print$u16_param_val.op + 1
    LD HL, #0000   ; SMC parameter val
    ; Register 2 already in HL
    ; Call runtime print_u16_decimal
    ; Call to print_u16_decimal (args: 1)
    ; Stack-based parameter passing
    ; Register 2 already in HL
    PUSH HL       ; Argument 0
    CALL print_u16_decimal
    LD ($F000), HL    ; Virtual register 0 to memory
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_working_features.main
test_working_features.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 5
    LD A, 5
    LD ($F004), A     ; Virtual register 2 to memory
    ; r3 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r4 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; r5 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; unknown op 39
    ; Smart patch 'store_u8' for test_working_features.add$u8$u8_return_patch
    LD A, #00               ; NOP opcode
    LD (test_working_features.add$u8$u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (test_working_features.add$u8$u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter a = 0
    LD A, 0               ; Parameter value
    LD (test_working_features.add$u8$u8_param_a+1), A   ; Patch parameter immediate
    ; unknown op 41
    ; Patch parameter b = 0
    LD A, 0               ; Parameter value
    LD (test_working_features.add$u8$u8_param_b+1), A   ; Patch parameter immediate
    ; r6 = call test_working_features.add$u8$u8
    ; Call to test_working_features.add$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL test_working_features.add$u8$u8
    ; store result, r6
    LD ($F002), HL
    ; r7 = load result
    LD HL, ($F002)
    ; Register 7 already in HL
    ; r8 = load result
    LD HL, ($F002)
    ; r9 = call test_working_features.print$u16
    ; Call to test_working_features.print$u16 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_working_features.print$u16
    ; Allocate struct Point
    LD HL, -2
    ADD HL, SP
    LD SP, HL
    EX DE, HL
    LD HL, SP
    ; r12 = 10
    LD A, 10
    LD L, A         ; Store to HL (low byte)
    ; Store to Point.x
    PUSH HL
    ; Register 12 already in HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r13 = 20
    LD A, 20
    LD L, A         ; Store to physical register L
    ; Store to Point.y
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; store p, r11
    LD ($F014), HL
    ; r14 = load p
    LD HL, ($F014)
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; Load field x (offset 0)
    LD HL, ($F01C)    ; Virtual register 14 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; r16 = load p
    LD HL, ($F014)
    ; Load field x (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F022), HL    ; Virtual register 17 to memory
    ; r18 = call test_working_features.print$u8
    ; Call to test_working_features.print$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_working_features.print$u8
    ; r21 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r22 = 2
    LD A, 2
    LD L, A         ; Store to HL (low byte)
    ; r23 = 3
    LD A, 3
    LD H, A         ; Store to physical register H
    ; r24 = 4
    LD A, 4
    LD L, A         ; Store to physical register L
    ; r25 = 5
    LD A, 5
    LD L, A         ; Store to HL (low byte)
    ; Array initializer with 5 elements
    ; Initialize array with 5 elements
    ; Array allocated at $F028
    LD HL, $F028
    ; Initialize array[0]
    PUSH HL        ; Save array base
    LD DE, 0
    ADD HL, DE     ; Calculate element address
    PUSH HL        ; Save element address
    LD A, L
    POP HL         ; Restore element address
    LD (HL), A
    POP HL         ; Restore array base
    PUSH HL        ; Save field address
    LD A, ($F000)     ; Virtual register 0 from memory
    POP HL         ; Restore field address
    LD (HL), A
    ; Initialize array[1]
    PUSH HL        ; Save array base
    LD DE, 1
    ADD HL, DE     ; Calculate element address
    PUSH HL        ; Save element address
    LD A, L
    POP HL         ; Restore element address
    LD (HL), A
    POP HL         ; Restore array base
    PUSH HL        ; Save field address
    LD A, ($F000)     ; Virtual register 0 from memory
    POP HL         ; Restore field address
    LD (HL), A
    ; Initialize array[2]
    PUSH HL        ; Save array base
    LD DE, 2
    ADD HL, DE     ; Calculate element address
    PUSH HL        ; Save element address
    LD A, H
    POP HL         ; Restore element address
    LD (HL), A
    POP HL         ; Restore array base
    PUSH HL        ; Save field address
    LD A, ($F000)     ; Virtual register 0 from memory
    POP HL         ; Restore field address
    LD (HL), A
    ; Initialize array[3]
    PUSH HL        ; Save array base
    LD DE, 3
    ADD HL, DE     ; Calculate element address
    PUSH HL        ; Save element address
    LD A, L
    POP HL         ; Restore element address
    LD (HL), A
    POP HL         ; Restore array base
    PUSH HL        ; Save field address
    LD A, ($F000)     ; Virtual register 0 from memory
    POP HL         ; Restore field address
    LD (HL), A
    ; Initialize array[4]
    PUSH HL        ; Save array base
    LD DE, 4
    ADD HL, DE     ; Calculate element address
    PUSH HL        ; Save element address
    LD A, L
    POP HL         ; Restore element address
    LD (HL), A
    POP HL         ; Restore array base
    PUSH HL        ; Save field address
    LD A, ($F000)     ; Virtual register 0 from memory
    POP HL         ; Restore field address
    LD (HL), A
    ; r26 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Load array arr base address
    LD HL, ($F026)
    LD ($F036), HL    ; Virtual register 27 to memory
    ; Store element 0
    PUSH HL
    LD A, ($F000)     ; Virtual register 0 from memory
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD (HL), 0    ; TODO: Need value source
    ; r28 = 2
    LD A, 2
    LD L, A         ; Store to HL (low byte)
    ; Load array arr base address
    LD HL, ($F026)
    LD ($F03A), HL    ; Virtual register 29 to memory
    ; r30 = 1
    LD A, 1
    LD E, A         ; Store to DE (low byte)
    ; r31 = r29 + r30
    LD HL, ($F03A)    ; Virtual register 29 from memory
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    LD B, H
    LD C, L
    ; Store element 1
    LD A, L
    LD ($0000), A
    ; r32 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; Load array arr base address
    LD HL, ($F026)
    LD ($F042), HL    ; Virtual register 33 to memory
    ; r34 = 2
    LD A, 2
    EXX               ; Switch to shadow registers
    LD L', A         ; Store to shadow HL'
    EXX               ; Switch back to main registers
    ; r35 = r33 + r34
    LD HL, ($F042)    ; Virtual register 33 from memory
    LD D, H
    LD E, L
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    ADD HL, DE
    ; Register 35 already in HL
    ; Store element 2
    LD A, L
    LD ($0000), A
    ; r36 = 4
    LD A, 4
    LD L, A         ; Store to HL (low byte)
    ; Load array arr base address
    LD HL, ($F026)
    ; Register 37 already in HL
    ; r38 = 3
    LD A, 3
    LD L, A         ; Store to HL (low byte)
    ; r39 = r37 + r38
    ; Register 37 already in HL
    LD D, H
    LD E, L
    ; Register 38 already in HL
    ADD HL, DE
    ; Store element 3
    LD A, L
    LD ($0000), A
    ; r40 = 5
    LD A, 5
    LD L, A         ; Store to physical register L
    ; Load array arr base address
    LD HL, ($F026)
    LD ($F052), HL    ; Virtual register 41 to memory
    ; r42 = 4
    LD A, 4
    LD L, A         ; Store to HL (low byte)
    ; r43 = r41 + r42
    LD HL, ($F052)    ; Virtual register 41 from memory
    LD D, H
    LD E, L
    ; Register 42 already in HL
    ADD HL, DE
    ; Store element 4
    LD A, L
    LD ($0000), A
    ; r45 = load arr
    LD HL, ($F026)
    ; r46 = load arr
    LD HL, ($F026)
    ; Register 46 already in HL
    ; unknown op 39
    ; Smart patch 'store_u8' for test_working_features.sum_array$a5_u8_return_patch
    LD A, #00               ; NOP opcode
    LD (test_working_features.sum_array$a5_u8_return_patch.op), A
    ; unknown op 40
    ; Patch storage address: temp_result
    LD HL, temp_result
    LD (test_working_features.sum_array$a5_u8_store_addr), HL
    ; unknown op 41
    ; Patch parameter arr = 0
    LD HL, 0              ; Parameter value
    LD (test_working_features.sum_array$a5_u8_param_arr+1), HL  ; Patch parameter immediate
    ; r47 = call test_working_features.sum_array$a5_u8
    ; Call to test_working_features.sum_array$a5_u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_working_features.sum_array$a5_u8
    ; store total, r47
    LD ($F058), HL
    ; r48 = load total
    LD HL, ($F058)
    LD ($F060), HL    ; Virtual register 48 to memory
    ; r49 = load total
    LD HL, ($F058)
    ; r50 = call test_working_features.print$u16
    ; Call to test_working_features.print$u16 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_working_features.print$u16
    ; r51 = 42
    LD A, 42
    LD ($F066), A     ; Virtual register 51 to memory
    ; store counter, r51
    LD HL, ($F066)    ; Virtual register 51 from memory
    LD ($F000), HL
    ; r52 = load test_working_features.counter
    LD HL, ($F000)
    ; r53 = load test_working_features.counter
    LD HL, ($F000)
    ; r54 = call test_working_features.print$u8
    ; Call to test_working_features.print$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_working_features.print$u8
    ; Register 54 already in HL
    ; r56 = 1000
    LD HL, 1000
    LD ($F070), HL    ; Virtual register 56 to memory
    ; store big, r56
    LD HL, ($F070)    ; Virtual register 56 from memory
    LD ($F06E), HL
    ; r57 = load big
    LD HL, ($F06E)
    ; Register 57 already in HL
    ; r58 = load big
    LD HL, ($F06E)
    ; r59 = call test_working_features.print$u16
    ; Call to test_working_features.print$u16 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL test_working_features.print$u16
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; ZX Spectrum ROM print
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
