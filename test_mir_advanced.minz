// Advanced @mir demonstration

fun mir_multiply(a: u8, b: u8) -> u16 {
    @mir[[[
        r1 = load_param 0    ; Load 'a'
        r2 = load_param 1    ; Load 'b' 
        r3 = mul r1, r2      ; Multiply
        ret r3
    ]]]
}

fun mir_conditional(x: u8) -> u8 {
    @mir[[[
        r1 = load_param 0
        r2 = load_const 10
        r3 = cmp r1, r2
        jle skip
        r4 = load_const 100
        ret r4
    skip:
        r5 = load_const 50
        ret r5
    ]]]
}

fun mir_loop_sum(n: u8) -> u16 {
    @mir[[[
        r1 = load_param 0    ; Counter
        r2 = load_const 0    ; Sum
    loop_start:
        r3 = cmp r1, 0
        jz loop_end
        r2 = add r2, r1
        r1 = sub r1, 1
        jmp loop_start
    loop_end:
        ret r2
    ]]]
}

fun main() -> u8 {
    @print("=== @mir Advanced Demo ===");
    
    let prod = mir_multiply(5, 7);
    @print("5 * 7 = { prod }");
    
    let val1 = mir_conditional(5);
    @print("conditional(5) = { val1 }");
    
    let val2 = mir_conditional(15);
    @print("conditional(15) = { val2 }");
    
    let sum = mir_loop_sum(5);
    @print("sum(1..5) = { sum }");
    
    return 0;
}