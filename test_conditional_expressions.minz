// Test all new conditional expressions in MinZ

fun safe_divide(a: u8, b: u8) -> u8 {
    if b == 0 {
        return 0;  // Return 0 for divide by zero
    }
    return a / b;
}

fun main() -> void {
    let x: u8 = 10;
    let y: u8 = 2;
    let z: u8 = 0;
    
    // 1. Nil coalescing operator (??) - MinZ revolutionary feature!
    let safe_result1 = safe_divide(x, y) ?? 99;   // Returns 5 (no error)
    let safe_result2 = safe_divide(x, z) ?? 99;   // Returns 99 (division by zero)
    
    // 2. Python-style ternary expression (value if condition else value)
    let max_value = x if x > y else y;            // Returns 10
    let min_value = x if x < y else y;            // Returns 2
    
    // 3. If expressions (Rust-style - return values)
    let category = if x > 5 { 1 } else { 0 };     // Returns 1
    
    // 4. Chaining different conditional expressions
    let complex = (safe_divide(x, y) ?? 1) if x > 0 else 0;  // Chain ?? with ternary
    
    // 5. Nested conditionals
    let nested = if x > 0 { 
        y if y > 0 else 1 
    } else { 
        0 
    };  // Returns 2
    
    @print("Safe results: {} {}", safe_result1, safe_result2);
    @print("Max/Min: {} {}", max_value, min_value);
    @print("Category: {}", category);
    @print("Complex: {}", complex);
    @print("Nested: {}", nested);
}