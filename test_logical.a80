; MinZ generated code
; Generated: 2025-08-09 21:28:21


; Data section
    ORG $F000

str_0:
    DB 14    ; Length
    DB "OR test passed"
str_1:
    DB 15    ; Length
    DB "AND test passed"
str_2:
    DB 19    ; Length
    DB "Complex test passed"

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_logical_keywords.test_simple_or$u8$u8
test_logical_keywords.test_simple_or$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_logical_keywords.test_simple_or$u8$u8_param_a.op:
test_logical_keywords.test_simple_or$u8$u8_param_a equ test_logical_keywords.test_simple_or$u8$u8_param_a.op + 1
    LD A, #00      ; Parameter a (gets patched)
    ; Register 3 already in A
    ; r4 = 100
    LD A, 100
    LD B, A         ; Store to physical register B
    ; r5 = r3 > r4
    LD E, B        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, test_logical_keywords_test_simple_or_u8_u8_gt_check_zero_0
    LD HL, 0       ; False (negative)
    JP test_logical_keywords_test_simple_or_u8_u8_gt_done_0
test_logical_keywords_test_simple_or_u8_u8_gt_check_zero_0:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, test_logical_keywords_test_simple_or_u8_u8_gt_false_0
    LD HL, 1       ; True (positive and non-zero)
    JP test_logical_keywords_test_simple_or_u8_u8_gt_done_0
test_logical_keywords_test_simple_or_u8_u8_gt_false_0:
    LD HL, 0       ; False (zero)
test_logical_keywords_test_simple_or_u8_u8_gt_done_0:
test_logical_keywords.test_simple_or$u8$u8_param_b.op:
test_logical_keywords.test_simple_or$u8$u8_param_b equ test_logical_keywords.test_simple_or$u8$u8_param_b.op + 1
    LD B, #00      ; Parameter b (gets patched)
    LD A, B
    LD D, A         ; Store to physical register D
    ; r7 = 100
    LD A, 100
    LD H, A         ; Store to physical register H
    ; r8 = r6 > r7
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, test_logical_keywords_test_simple_or_u8_u8_gt_check_zero_1
    LD HL, 0       ; False (negative)
    JP test_logical_keywords_test_simple_or_u8_u8_gt_done_1
test_logical_keywords_test_simple_or_u8_u8_gt_check_zero_1:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, test_logical_keywords_test_simple_or_u8_u8_gt_false_1
    LD HL, 1       ; True (positive and non-zero)
    JP test_logical_keywords_test_simple_or_u8_u8_gt_done_1
test_logical_keywords_test_simple_or_u8_u8_gt_false_1:
    LD HL, 0       ; False (zero)
test_logical_keywords_test_simple_or_u8_u8_gt_done_1:
    ; unknown op 61
    LD A, C
    OR A           ; Test if zero
    JR NZ, lor_true_2      ; Skip if first operand is true
    LD A, L
    OR A           ; Test if zero
    JR NZ, lor_true_2      ; Skip if second operand is true
    XOR A          ; Result is false
    JR lor_end_3
lor_true_2:
    LD A, 1        ; Result is true (1)
lor_end_3:
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; return r9
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_logical_keywords.test_simple_and$u8$u8
test_logical_keywords.test_simple_and$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_logical_keywords.test_simple_and$u8$u8_param_a.op:
test_logical_keywords.test_simple_and$u8$u8_param_a equ test_logical_keywords.test_simple_and$u8$u8_param_a.op + 1
    LD A, #00      ; Parameter a (gets patched)
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = 50
    LD A, 50
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = r3 < r4
    LD HL, ($F006)    ; Virtual register 3 from memory
    LD HL, ($F008)    ; Virtual register 4 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, test_logical_keywords_test_simple_and_u8_u8_lt_true_4
    LD HL, 0       ; False
    JP test_logical_keywords_test_simple_and_u8_u8_lt_done_4
test_logical_keywords_test_simple_and_u8_u8_lt_true_4:
    LD HL, 1       ; True
test_logical_keywords_test_simple_and_u8_u8_lt_done_4:
test_logical_keywords.test_simple_and$u8$u8_param_b.op:
test_logical_keywords.test_simple_and$u8$u8_param_b equ test_logical_keywords.test_simple_and$u8$u8_param_b.op + 1
    LD B, #00      ; Parameter b (gets patched)
    LD A, B
    LD C, A         ; Store to physical register C
    ; r7 = 50
    LD A, 50
    ; Register 7 already in A
    ; r8 = r6 < r7
    LD E, A        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, test_logical_keywords_test_simple_and_u8_u8_lt_true_5
    LD HL, 0       ; False
    JP test_logical_keywords_test_simple_and_u8_u8_lt_done_5
test_logical_keywords_test_simple_and_u8_u8_lt_true_5:
    LD HL, 1       ; True
test_logical_keywords_test_simple_and_u8_u8_lt_done_5:
    ; unknown op 60
    LD A, B
    OR A           ; Test if zero
    JR Z, land_false_6       ; Skip if first operand is false
    ; Register 8 already in A
    OR A           ; Test if zero
    JR Z, land_false_6       ; Skip if second operand is false
    LD A, 1        ; Result is true
    JR land_end_7
land_false_6:
    XOR A          ; Result is false (0)
land_end_7:
    LD B, A         ; Store to physical register B
    ; return r9
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_logical_keywords.test_complex$u8$u8
test_logical_keywords.test_complex$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
test_logical_keywords.test_complex$u8$u8_param_a.op:
test_logical_keywords.test_complex$u8$u8_param_a equ test_logical_keywords.test_complex$u8$u8_param_a.op + 1
    LD A, #00      ; Parameter a (gets patched)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r4 = 200
    LD A, 200
    LD ($F008), A     ; Virtual register 4 to memory
    ; r5 = r3 > r4
    LD HL, ($F008)    ; Virtual register 4 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, test_logical_keywords_test_complex_u8_u8_gt_check_zero_8
    LD HL, 0       ; False (negative)
    JP test_logical_keywords_test_complex_u8_u8_gt_done_8
test_logical_keywords_test_complex_u8_u8_gt_check_zero_8:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, test_logical_keywords_test_complex_u8_u8_gt_false_8
    LD HL, 1       ; True (positive and non-zero)
    JP test_logical_keywords_test_complex_u8_u8_gt_done_8
test_logical_keywords_test_complex_u8_u8_gt_false_8:
    LD HL, 0       ; False (zero)
test_logical_keywords_test_complex_u8_u8_gt_done_8:
test_logical_keywords.test_complex$u8$u8_param_b.op:
test_logical_keywords.test_complex$u8$u8_param_b equ test_logical_keywords.test_complex$u8$u8_param_b.op + 1
    LD B, #00      ; Parameter b (gets patched)
    LD A, B
    LD D, A         ; Store to physical register D
    ; r7 = 200
    LD A, 200
    LD H, A         ; Store to physical register H
    ; r8 = r6 > r7
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, test_logical_keywords_test_complex_u8_u8_gt_check_zero_9
    LD HL, 0       ; False (negative)
    JP test_logical_keywords_test_complex_u8_u8_gt_done_9
test_logical_keywords_test_complex_u8_u8_gt_check_zero_9:
    LD A, H
    OR L           ; Check if result is zero
    JP Z, test_logical_keywords_test_complex_u8_u8_gt_false_9
    LD HL, 1       ; True (positive and non-zero)
    JP test_logical_keywords_test_complex_u8_u8_gt_done_9
test_logical_keywords_test_complex_u8_u8_gt_false_9:
    LD HL, 0       ; False (zero)
test_logical_keywords_test_complex_u8_u8_gt_done_9:
    ; unknown op 61
    ; Register 5 already in A
    OR A           ; Test if zero
    JR NZ, lor_true_10      ; Skip if first operand is true
    LD A, D
    OR A           ; Test if zero
    JR NZ, lor_true_10      ; Skip if second operand is true
    XOR A          ; Result is false
    JR lor_end_11
lor_true_10:
    LD A, 1        ; Result is true (1)
lor_end_11:
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; jump_if_not r9, else_1
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, test_logical_keywords_test_complex_u8_u8_else_1
    ; r10 = 1
    LD A, 1
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; return r10
    RET
    ; jump end_if_2
    JP test_logical_keywords_test_complex_u8_u8_end_if_2
    ; else_1:
test_logical_keywords_test_complex_u8_u8_else_1:
    ; end_if_2:
test_logical_keywords_test_complex_u8_u8_end_if_2:
    ; r11 = 0
    LD A, 0
    LD C, A         ; Store to physical register C
    ; return r11
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: test_logical_keywords.main
test_logical_keywords.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 150
    LD A, 150
    LD ($F004), A     ; Virtual register 2 to memory
    ; store x, r2
    LD A, ($F004)     ; Virtual register 2 from memory
    LD ($F002), A
    ; r4 = 250
    LD A, 250
    LD ($F008), A     ; Virtual register 4 to memory
    ; store y, r4
    LD A, ($F008)     ; Virtual register 4 from memory
    LD ($F006), A
    ; r5 = load x
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r6 = load y
    LD A, ($F006)
    LD ($F00C), A     ; Virtual register 6 to memory
    ; r7 = load x
    LD A, ($F002)
    LD E, A         ; Store to physical register E
    ; r8 = load y
    LD A, ($F006)
    LD ($F010), A     ; Virtual register 8 to memory
    ; r9 = call test_logical_keywords.test_simple_or$u8$u8
    ; Call to test_logical_keywords.test_simple_or$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL test_logical_keywords.test_simple_or$u8$u8
    ; jump_if_not r9, else_3
    EXX               ; Switch to shadow registers
    LD A, C'         ; From shadow C'
    EXX               ; Switch back to main registers
    OR A
    JP Z, test_logical_keywords_main_else_3
    ; r10 = string(str_0)
    LD HL, str_0
    LD ($F014), HL    ; Virtual register 10 to memory
    ; Print "OR test passed" (14 chars via loop)
    LD HL, ($F014)    ; Virtual register 10 from memory
    CALL print_string
    ; jump end_if_4
    JP test_logical_keywords_main_end_if_4
    ; else_3:
test_logical_keywords_main_else_3:
    ; end_if_4:
test_logical_keywords_main_end_if_4:
    ; r11 = 30
    LD A, 30
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r12 = 40
    LD A, 40
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r13 = 30
    LD A, 30
    LD C, A         ; Store to physical register C
    ; r14 = 40
    LD A, 40
    LD C, A         ; Store to physical register C
    ; r15 = call test_logical_keywords.test_simple_and$u8$u8
    ; Call to test_logical_keywords.test_simple_and$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL test_logical_keywords.test_simple_and$u8$u8
    ; jump_if_not r15, else_5
    ; Register 15 already in A
    OR A
    JP Z, test_logical_keywords_main_else_5
    ; r16 = string(str_1)
    LD HL, str_1
    ; Print "AND test passed" (15 chars via loop)
    CALL print_string
    ; jump end_if_6
    JP test_logical_keywords_main_end_if_6
    ; else_5:
test_logical_keywords_main_else_5:
    ; end_if_6:
test_logical_keywords_main_end_if_6:
    ; r17 = load x
    LD A, ($F002)
    LD E, A         ; Store to physical register E
    ; r18 = load y
    LD A, ($F006)
    LD E, A         ; Store to physical register E
    ; r19 = load x
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r20 = load y
    LD A, ($F006)
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; r21 = call test_logical_keywords.test_complex$u8$u8
    ; Call to test_logical_keywords.test_complex$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL test_logical_keywords.test_complex$u8$u8
    ; jump_if_not r21, else_7
    EXX               ; Switch to shadow registers
    LD A, D'         ; From shadow D'
    EXX               ; Switch back to main registers
    OR A
    JP Z, test_logical_keywords_main_else_7
    ; r22 = string(str_2)
    LD HL, str_2
    ; Print "Complex test passed" (19 chars via loop)
    CALL print_string
    ; jump end_if_8
    JP test_logical_keywords_main_end_if_8
    ; else_7:
test_logical_keywords_main_else_7:
    ; end_if_8:
test_logical_keywords_main_end_if_8:
    ; return
    RET

    END main
