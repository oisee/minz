; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.test_complex_assign_simple.test_arrays() -> u8
  @smc
  Locals:
    r1 = arr: [5]u8
    r14 = i: u8
  Instructions:
      0: UNKNOWN_OP_63 ; Store to array[index] (u8)
      1: UNKNOWN_OP_63 ; Store to array[index] (u8)
      2: UNKNOWN_OP_63 ; Store to array[index] (u8)
      3: r15 = 3
      4: store , r15
      5: UNKNOWN_OP_63 ; Store to array[index] (u8)
      6: LOAD_INDEX ; Load array element (u8)
      7: LOAD_INDEX ; Load array element (u8)
      8: r26 = r22 + r25
      9: LOAD_INDEX ; Load array element (u8)
     10: r30 = r26 + r29
     11: LOAD_INDEX ; Load array element (u8)
     12: r34 = r30 + r33
     13: return r34

Function .Users.alice.dev.minz-ts.examples.test_complex_assign_simple.test_structs() -> u8
  @smc
  Locals:
    r1 = v: .Users.alice.dev.minz-ts.examples.test_complex_assign_simple.Vec2
  Instructions:
      0: r2 = 100
      1: r3 = load v
      2: STORE_FIELD ; Store to field x (offset 0)
      3: r4 = 50
      4: r5 = load v
      5: STORE_FIELD ; Store to field y (offset 1)
      6: r6 = load v
      7: LOAD_FIELD ; Load field x (offset 0)
      8: r8 = load v
      9: LOAD_FIELD ; Load field y (offset 1)
     10: r10 = r7 + r9
     11: return r10

Function .Users.alice.dev.minz-ts.examples.test_complex_assign_simple.main() -> u8
  @smc
  Locals:
    r1 = a: u8
    r3 = s: u8
  Instructions:
      0: r2 = call test_arrays
      1: store , r2
      2: r4 = call test_structs
      3: store , r4
      4: r5 = load a
      5: return r5

