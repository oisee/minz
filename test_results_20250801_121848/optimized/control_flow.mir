; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.control_flow.test_if(x: u8) -> u8
  @smc
  Instructions:
      0: UNKNOWN_OP_30 ; Load from anchor x$imm0
      1: r3 = 10
      2: r4 = r2 > r3
      3: jump_if_not r4, else_1
      4: UNKNOWN_OP_30 ; Load from anchor x$imm0
      5: r6 = 2
      6: r7 = r5 * r6
      7: return r7
      8: else_1:
      9: UNKNOWN_OP_30 ; Load from anchor x$imm0
     10: r9 = 5
     11: r10 = r8 > r9
     12: jump_if_not r10, else_3
     13: UNKNOWN_OP_30 ; Load from anchor x$imm0
     14: r12 = 10
     15: r13 = r11 + r12
     16: return r13
     17: else_3:
     18: UNKNOWN_OP_30 ; Load from anchor x$imm0
     19: return r14

Function .Users.alice.dev.minz-ts.examples.control_flow.test_while(n: u8) -> u8
  @smc
  Locals:
    r2 = sum: u8
    r4 = i: u8
  Instructions:
      0: r3 = 0
      1: store , r3
      2: r5 = 0
      3: store , r5
      4: loop_5:
      5: r6 = load i
      6: UNKNOWN_OP_30 ; Load from anchor n$imm0
      7: r8 = r6 < r7
      8: jump_if_not r8, end_loop_6
      9: r9 = load sum
     10: r10 = load i
     11: r11 = r9 + r10
     12: store sum, r11
     13: r12 = load i
     14: r13 = 1
     15: r14 = r12 + r13
     16: store i, r14
     17: jump loop_5
     18: end_loop_6:
     19: r15 = load sum
     20: return r15

