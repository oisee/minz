; MinZ Intermediate Representation (MIR)
; Module: main

Function .Users.alice.dev.minz-ts.examples.test_bit_field_comprehensive.test_8bit_fields() -> void
  @smc
  Locals:
    r1 = raw: u8
    r3 = flags: bits<u8>
    r5 = c: u8
    r8 = z: u8
    r11 = s: u8
    r20 = old_sign: u8
    r25 = new_sign: u8
  Instructions:
      0: r2 = 130
      1: store , r2
      2: r4 = load raw
      3: store , r4
      4: LOAD_BIT_FIELD ; Load bit field carry (offset 0, width 1)
      5: store , r7
      6: LOAD_BIT_FIELD ; Load bit field zero (offset 6, width 1)
      7: store , r10
      8: LOAD_BIT_FIELD ; Load bit field sign (offset 7, width 1)
      9: store , r13
     10: STORE_BIT_FIELD ; Store bit field zero (offset 6, width 1)
     11: STORE_BIT_FIELD ; Store bit field carry (offset 0, width 1)
     12: STORE_BIT_FIELD ; Store bit field parity (offset 2, width 1)
     13: LOAD_BIT_FIELD ; Load bit field sign (offset 7, width 1)
     14: store , r22
     15: STORE_BIT_FIELD ; Store bit field sign (offset 7, width 1)
     16: LOAD_BIT_FIELD ; Load bit field sign (offset 7, width 1)
     17: store , r27
     18: LOAD_BIT_FIELD ; Load bit field carry (offset 0, width 1)
     19: LOAD_BIT_FIELD ; Load bit field zero (offset 6, width 1)
     20: STORE_BIT_FIELD ; Store bit field half_carry (offset 4, width 1)
     21: return

Function .Users.alice.dev.minz-ts.examples.test_bit_field_comprehensive.test_16bit_fields() -> void
  @smc
  Locals:
    r1 = raw: u16
    r3 = sprite: bits<u16>
    r11 = x: u16
  Instructions:
      0: r2 = 0
      1: store , r2
      2: r4 = load raw
      3: store , r4
      4: STORE_BIT_FIELD ; Store bit field x_coord (offset 0, width 9)
      5: STORE_BIT_FIELD ; Store bit field palette_id (offset 9, width 3)
      6: STORE_BIT_FIELD ; Store bit field priority (offset 12, width 2)
      7: LOAD_BIT_FIELD ; Load bit field x_coord (offset 0, width 9)
      8: store , r13
      9: STORE_BIT_FIELD ; Store bit field x_coord (offset 0, width 9)
     10: LOAD_BIT_FIELD ; Load bit field h_flip (offset 14, width 1)
     11: r20 = 0
     12: r21 = r19 == r20
     13: jump_if_not r21, else_1
     14: STORE_BIT_FIELD ; Store bit field h_flip (offset 14, width 1)
     15: STORE_BIT_FIELD ; Store bit field v_flip (offset 15, width 1)
     16: jump end_if_2
     17: else_1:
     18: end_if_2:
     19: return

Function .Users.alice.dev.minz-ts.examples.test_bit_field_comprehensive.test_field_expressions() -> void
  @smc
  Locals:
    r1 = flags: bits<u8>
    r3 = result: u8
  Instructions:
      0: r2 = 0
      1: store , r2
      2: LOAD_BIT_FIELD ; Load bit field carry (offset 0, width 1)
      3: LOAD_BIT_FIELD ; Load bit field zero (offset 6, width 1)
      4: r8 = 2
      5: r9 = r7 * r8
      6: r10 = r5 + r9
      7: LOAD_BIT_FIELD ; Load bit field sign (offset 7, width 1)
      8: r13 = 4
      9: r14 = r12 * r13
     10: r15 = r10 + r14
     11: store , r15
     12: LOAD_BIT_FIELD ; Load bit field zero (offset 6, width 1)
     13: r18 = 1
     14: r19 = r17 == r18
     15: jump_if_not r19, else_3
     16: STORE_BIT_FIELD ; Store bit field sign (offset 7, width 1)
     17: jump end_if_4
     18: else_3:
     19: end_if_4:
     20: STORE_BIT_FIELD ; Store bit field carry (offset 0, width 1)
     21: STORE_BIT_FIELD ; Store bit field zero (offset 6, width 1)
     22: STORE_BIT_FIELD ; Store bit field sign (offset 7, width 1)
     23: STORE_BIT_FIELD ; Store bit field parity (offset 2, width 1)
     24: return

Function .Users.alice.dev.minz-ts.examples.test_bit_field_comprehensive.main() -> void
  @smc
  Instructions:
      0: r1 = call test_8bit_fields
      1: r2 = call test_16bit_fields
      2: r3 = call test_field_expressions
      3: UNKNOWN_OP_83
      4: UNKNOWN_OP_82
      5: return

