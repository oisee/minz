; MinZ generated code
; Generated: 2025-08-01 12:18:55


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.add_bytes
.Users.alice.dev.minz-ts.examples.test_register_params.add_bytes:
; TRUE SMC function with immediate anchors
a$immOP:
    LD A, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
    ; Register 3 already in A
b$immOP:
    LD A, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    LD B, A         ; Store to physical register B
    ; r5 = r3 + r4
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r5
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.add_words
.Users.alice.dev.minz-ts.examples.test_register_params.add_words:
; TRUE SMC function with immediate anchors
x$immOP:
    LD HL, 0       ; x anchor (will be patched)
x$imm0 EQU x$immOP+1
    ; Register 3 already in HL
y$immOP:
    LD HL, 0       ; y anchor (will be patched)
y$imm0 EQU y$immOP+1
    LD D, H
    LD E, L
    ; r5 = r3 + r4
    ; Register 3 already in HL
    LD D, H
    LD E, L
    LD H, D
    LD L, E
    ADD HL, DE
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; return r5
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.process
.Users.alice.dev.minz-ts.examples.test_register_params.process:
; TRUE SMC function with immediate anchors
value$immOP:
    LD A, 0        ; value anchor (will be patched)
value$imm0 EQU value$immOP+1
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; store , r5
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD ($F008), A
count$immOP:
    LD HL, 0       ; count anchor (will be patched)
count$imm0 EQU count$immOP+1
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; Initialize loop variable i
    ; Register 6 already in HL
    ; for_loop_1:
for_loop_1:
    ; Check i < end
    LD D, H
    LD E, L
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r9, for_end_2
    LD A, H
    OR A
    JP Z, for_end_2
    ; r10 = load sum
    LD A, ($F008)
    LD L, A         ; Store to physical register L
ptr$immOP:
    LD HL, 0       ; ptr anchor (will be patched)
ptr$imm0 EQU ptr$immOP+1
    ; r12 = *r11
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r13 = r10 + r12
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 13 already in HL
    ; store sum, r13
    LD A, L
    LD ($F008), A
    LD HL, (ptr$imm0)   ; Reuse from anchor
    LD ($F01C), HL    ; Virtual register 14 to memory
    ; r15 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r16 = r14 + r15
    LD HL, ($F01C)    ; Virtual register 14 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store ptr, r16
    LD ($F000), HL
    ; r17 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_1
    JP for_loop_1
    ; for_end_2:
for_end_2:
    ; r18 = load sum
    LD A, ($F008)
    LD L, A         ; Store to HL (low byte)
    ; return r18
    ; Register 18 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.many_params
.Users.alice.dev.minz-ts.examples.test_register_params.many_params:
; TRUE SMC function with immediate anchors
a$immOP:
    LD A, 0        ; a anchor (will be patched)
a$imm0 EQU a$immOP+1
    LD H, A         ; Store to physical register H
b$immOP:
    LD A, 0        ; b anchor (will be patched)
b$imm0 EQU b$immOP+1
    LD L, A         ; Store to physical register L
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    ADD HL, DE
c$immOP:
    LD A, 0        ; c anchor (will be patched)
c$imm0 EQU c$immOP+1
    LD L, A         ; Store to physical register L
    ; r10 = r8 + r9
    LD D, H
    LD E, L
    ADD HL, DE
d$immOP:
    LD A, 0        ; d anchor (will be patched)
d$imm0 EQU d$immOP+1
    LD L, A         ; Store to physical register L
    ; r12 = r10 + r11
    LD D, H
    LD E, L
    ADD HL, DE
e$immOP:
    LD A, 0        ; e anchor (will be patched)
e$imm0 EQU e$immOP+1
    LD L, A         ; Store to physical register L
    ; r14 = r12 + r13
    LD D, H
    LD E, L
    ADD HL, DE
    ; return r14
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum
.Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum:
; TRUE SMC function with immediate anchors
n$immOP:
    LD A, 0        ; n anchor (will be patched)
n$imm0 EQU n$immOP+1
    LD L, A         ; Store to physical register L
    ; r3 = 0
    LD A, 0
    LD ($F006), A     ; Virtual register 3 to memory
    ; r4 = r2 == r3
    LD D, H
    LD E, L
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP Z, .L3
    LD HL, 0
    JP .L4
.L3:
    LD HL, 1
.L4:
    ; jump_if_not r4, else_3
    LD A, H
    OR A
    JP Z, else_3
    ; r5 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; return r5
    RET
    ; else_3:
else_3:
    LD A, (n$imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    LD A, (n$imm0)    ; Reuse from anchor
    LD H, A         ; Store to physical register H
    ; r10 = call recursive_sum
    ; Call to recursive_sum (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum
    LD A, ($F012)     ; Virtual register 9 from memory
    LD (n$imm0), A        ; Patch n
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum
    ; r11 = r6 + r10
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 11 already in HL
    ; return r11
    ; Register 11 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.test_register_params.main
.Users.alice.dev.minz-ts.examples.test_register_params.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
; Recursive context handled via stack push/pop of SMC parameters
    ; r4 = call add_bytes
    ; Call to add_bytes (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F006)    ; Virtual register 3 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F004)    ; Virtual register 2 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_register_params.add_bytes
    LD A, ($F004)     ; Virtual register 2 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F006)     ; Virtual register 3 from memory
    LD (b$imm0), A        ; Patch b
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.add_bytes
    ; store , r4
    LD ($F002), HL
    ; r8 = call add_words
    ; Call to add_words (args: 2)
    ; Stack-based parameter passing
    LD HL, ($F00E)    ; Virtual register 7 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F00C)    ; Virtual register 6 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_register_params.add_words
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD (x$imm0), HL       ; Patch x (atomic)
    LD HL, ($F00E)    ; Virtual register 7 from memory
    LD (y$imm0), HL       ; Patch y (atomic)
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.add_words
    ; store , r8
    LD ($F00A), HL
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r15 = &r14
    ; Address-of operation for register r14
    LD HL, $F01C  ; Variable address
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; r17 = call process
    ; Call to process (args: 3)
    ; Stack-based parameter passing
    LD HL, ($F020)    ; Virtual register 16 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F01E)    ; Virtual register 15 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F016)    ; Virtual register 11 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_register_params.process
    LD A, ($F016)     ; Virtual register 11 from memory
    LD (value$imm0), A        ; Patch value
    LD HL, ($F01E)    ; Virtual register 15 from memory
    LD (ptr$imm0), HL       ; Patch ptr (atomic)
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD (count$imm0), HL       ; Patch count (atomic)
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.process
    ; store , r17
    LD ($F014), HL
    ; r24 = call many_params
    ; Call to many_params (args: 5)
    ; Stack-based parameter passing
    LD HL, ($F02E)    ; Virtual register 23 from memory
    PUSH HL       ; Argument 4
    LD HL, ($F02C)    ; Virtual register 22 from memory
    PUSH HL       ; Argument 3
    LD HL, ($F02A)    ; Virtual register 21 from memory
    PUSH HL       ; Argument 2
    LD HL, ($F028)    ; Virtual register 20 from memory
    PUSH HL       ; Argument 1
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_register_params.many_params
    LD A, ($F026)     ; Virtual register 19 from memory
    LD (a$imm0), A        ; Patch a
    LD A, ($F028)     ; Virtual register 20 from memory
    LD (b$imm0), A        ; Patch b
    LD A, ($F02A)     ; Virtual register 21 from memory
    LD (c$imm0), A        ; Patch c
    LD A, ($F02C)     ; Virtual register 22 from memory
    LD (d$imm0), A        ; Patch d
    LD A, ($F02E)     ; Virtual register 23 from memory
    LD (e$imm0), A        ; Patch e
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.many_params
    ; store , r24
    LD ($F024), HL
    ; r27 = call recursive_sum
    ; Call to recursive_sum (args: 1)
    ; Stack-based parameter passing
    LD HL, ($F034)    ; Virtual register 26 from memory
    PUSH HL       ; Argument 0
    ; Found function, UsesTrueSMC=true
    ; TRUE SMC call to .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum
    LD A, ($F034)     ; Virtual register 26 from memory
    LD (n$imm0), A        ; Patch n
    CALL .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum
    ; Register 27 already in HL
    ; store , r27
    ; Register 27 already in HL
    LD ($F032), HL
    ; return
    RET

; TRUE SMC PATCH-TABLE
; Format: DW anchor_addr, DB size, DB param_tag
PATCH_TABLE:
    DW a$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.add_bytes.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.add_bytes.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW x$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.add_words.x
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW y$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.add_words.y
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW value$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.process.value
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW ptr$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.process.ptr
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW count$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.process.count
    DB 2              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW a$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.many_params.a
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW b$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.many_params.b
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW c$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.many_params.c
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW d$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.many_params.d
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW e$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.many_params.e
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW n$imm0           ; .Users.alice.dev.minz-ts.examples.test_register_params.recursive_sum.n
    DB 1              ; Size in bytes
    DB 0              ; Reserved for param tag
    DW 0              ; End of table
PATCH_TABLE_END:

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
