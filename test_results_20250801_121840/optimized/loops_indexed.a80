; MinZ generated code
; Generated: 2025-08-01 12:18:40


; Data section
    ORG $F000

.Users.alice.dev.minz-ts.examples.loops_indexed.scores:
    DS 24

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.minz-ts.examples.loops_indexed.main
.Users.alice.dev.minz-ts.examples.loops_indexed.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    PUSH BC
    PUSH DE
    ; r2 = 0
    LD A, 0
    ; Register 2 already in A
    ; store , r2
    ; Register 2 already in A
    LD ($F002), A
    ; loop_1:
loop_1:
    ; r3 = load i
    LD A, ($F002)
    LD C, A         ; Store to physical register C
    ; r4 = 8
    LD A, 8
    LD D, A         ; Store to physical register D
    ; r5 = r3 < r4
    LD D, H
    LD E, L
    EX DE, HL
    OR A      ; Clear carry
    SBC HL, DE
    JP M, .L1
    LD HL, 0
    JP .L2
.L1:
    LD HL, 1
.L2:
    ; jump_if_not r5, end_loop_2
    LD A, E
    OR A
    JP Z, end_loop_2
    ; r6 = load i
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r7 = 10
    LD A, 10
    LD L, A         ; Store to physical register L
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    ADD HL, DE
    ; r9 = addr(.Users.alice.dev.minz-ts.examples.loops_indexed.scores)
    LD HL, .Users.alice.dev.minz-ts.examples.loops_indexed.scores
    LD ($F012), HL    ; Virtual register 9 to memory
    ; Load array element (.Users.alice.dev.minz-ts.examples.loops_indexed.Score)
    LD HL, ($F012)    ; Virtual register 9 from memory
    PUSH HL
    LD D, B
    LD E, C
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD E, A         ; Store to DE (low byte)
    ; Store to field player_id (offset 0)
    LD H, D
    LD L, E
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r12 = load i
    LD A, ($F002)
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; r13 = 100
    LD A, 100
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r14 = r12 * r13
    ; 16-bit multiplication
    LD (mul_src1_2), HL  ; Save multiplicand
    LD (mul_src2_2), HL  ; Save multiplier
    LD HL, 0             ; Result = 0
    LD DE, (mul_src1_2)  ; DE = multiplicand
    LD BC, (mul_src2_2)  ; BC = multiplier
    LD A, B
    OR C                 ; Check if multiplier is 0
    JR Z, .mul16_done_2
.mul16_loop_2:
    ADD HL, DE           ; Result += multiplicand
    DEC BC
    LD A, B
    OR C
    JR NZ, .mul16_loop_2
.mul16_done_2:
mul_src1_2: DW 0
mul_src2_2: DW 0
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r15 = addr(.Users.alice.dev.minz-ts.examples.loops_indexed.scores)
    LD HL, .Users.alice.dev.minz-ts.examples.loops_indexed.scores
    ; Load array element (.Users.alice.dev.minz-ts.examples.loops_indexed.Score)
    PUSH HL
    LD HL, ($F020)    ; Virtual register 16 from memory
    EX DE, HL
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; Store to field points (offset 1)
    ; Register 17 already in HL
    LD DE, 1
    ADD HL, DE
    PUSH HL
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r18 = load i
    LD A, ($F002)
    LD ($F024), A     ; Virtual register 18 to memory
    ; r19 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r20 = r18 + r19
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r20
    LD A, L
    LD ($F002), A
    ; jump loop_1
    JP loop_1
    ; end_loop_2:
end_loop_2:
    ; r22 = 0
    LD A, 0
    LD ($F02C), A     ; Virtual register 22 to memory
    ; store , r22
    LD HL, ($F02C)    ; Virtual register 22 from memory
    LD ($F02A), HL
    ; r24 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; store , r24
    LD A, L
    LD ($F02E), A
    ; return
    POP DE
    POP BC
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)
    OR A               ; Check for null terminator
    RET Z              ; Return if null
    RST 16             ; Print character
    INC HL             ; Next character
    JR print_string

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB "true", 0
bool_false_str:
    DB "false", 0


    END main
