; MinZ Intermediate Representation (MIR)
; Module: main

Function ...test_case_minimal.test() -> void
  @smc
  Locals:
    r1 = x: u8
    r3 = result: u8
  Instructions:
      0: r2 = 2
      1: store x, r2
      2: r4 = load x
      3: r5 = 1
      4: r6 = r4 == r5
      5: JUMP_IF
      6: jump case_expr_arm_1_3
      7: case_expr_arm_0_2:
      8: r7 = 10
      9: r1 = r7
     10: jump case_expr_end_1
     11: r8 = 2
     12: r9 = r4 == r8
     13: JUMP_IF
     14: jump case_expr_arm_2_4
     15: case_expr_arm_1_3:
     16: r10 = 20
     17: r1 = r10
     18: jump case_expr_end_1
     19: jump case_expr_arm_2_4
     20: case_expr_arm_2_4:
     21: r11 = 30
     22: r1 = r11
     23: case_expr_end_1:
     24: store result, r1
     25: r12 = load result
     26: r0 = call print_u8_decimal ; Call runtime print_u8_decimal
     27: return

Function ...test_case_minimal.main() -> void
  @smc
  Instructions:
      0: r1 = call ...test_case_minimal.test
      1: return

