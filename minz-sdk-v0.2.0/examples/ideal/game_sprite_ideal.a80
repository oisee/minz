; MinZ ideal code - game_sprite.minz
; Sprite drawing with perfect SMC

    ORG $8000

; Function: draw_sprite(x: u8, y: u8, sprite: u16) -> void
draw_sprite:
draw_sprite_param_x:
    LD A, #00      ; SMC parameter x
    LD E, A        ; E = x coordinate
    
draw_sprite_param_y:
    LD A, #00      ; SMC parameter y
    
    ; Calculate screen address from (x,y)
    ; ZX Spectrum screen address = 16384 + (y/8)*256 + (y%8)*32 + x/8
    LD L, A        ; L = y
    LD H, 0
    
    ; Calculate y/8 * 256 (just move to H)
    LD A, L
    AND %11111000  ; y & 0xF8
    RRCA
    RRCA
    RRCA           ; y/8
    LD H, A        ; H = (y/8)
    
    ; Calculate (y%8) * 32
    LD A, L
    AND %00000111  ; y & 7
    RLCA
    RLCA
    RLCA
    RLCA
    RLCA           ; (y%8) * 32
    LD L, A
    
    ; Add x/8
    LD A, E
    RRCA
    RRCA
    RRCA
    AND %00011111  ; x/8
    OR L
    LD L, A
    
    ; Add screen base address
    LD DE, 16384
    ADD HL, DE     ; HL = screen address
    
draw_sprite_param_sprite:
    LD DE, #0000   ; SMC parameter sprite (pointer)
    
    ; Draw 8x8 sprite
    LD B, 8        ; 8 rows
draw_loop:
    LD A, (DE)     ; Get sprite byte
    LD (HL), A     ; Draw to screen
    INC DE         ; Next sprite byte
    INC H          ; Next screen row
    DJNZ draw_loop
    
    RET

; Simple sprite data (smiley face)
sprite_smiley:
    DB %00111100   ; ..XXXX..
    DB %01000010   ; .X....X.
    DB %10100101   ; X.X..X.X
    DB %10000001   ; X......X
    DB %10100101   ; X.X..X.X
    DB %10011001   ; X..XX..X
    DB %01000010   ; .X....X.
    DB %00111100   ; ..XXXX..

; Function: main() -> void
main:
    ; Draw sprite at (64, 64)
    LD A, 64
    LD (draw_sprite_param_x + 1), A
    LD (draw_sprite_param_y + 1), A
    
    LD HL, sprite_smiley
    LD (draw_sprite_param_sprite + 1), HL
    
    CALL draw_sprite
    RET

    END main