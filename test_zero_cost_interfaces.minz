// Test Zero-Cost Interfaces - Monomorphization at compile time!

// Define an interface
interface Drawable {
    fun draw(self) -> u8;
}

// Implement for Circle
struct Circle {
    radius: u8
}

impl Drawable for Circle {
    fun draw(self) -> u8 {
        // Draw circle logic
        return self.radius * 2;  // Diameter
    }
}

// Implement for Rectangle  
struct Rectangle {
    width: u8,
    height: u8
}

impl Drawable for Rectangle {
    fun draw(self) -> u8 {
        // Draw rectangle logic
        return self.width + self.height;  // Perimeter / 2
    }
}

// Generic function that takes Drawable
fun render(shape: Drawable) -> u8 {
    return shape.draw();  // Should compile to direct call!
}

fun main() -> void {
    let circle = Circle { radius: 5 };
    let rect = Rectangle { width: 10, height: 20 };
    
    // These should compile to DIRECT calls - no vtables!
    let c_result = render(circle);   // Should become: Circle_draw(circle)
    let r_result = render(rect);     // Should become: Rectangle_draw(rect)
    
    @print("Circle result: {}\n", c_result);
    @print("Rectangle result: {}\n", r_result);
    
    // Direct method calls should also work
    let direct_c = circle.draw();
    let direct_r = rect.draw();
    
    @print("Direct circle: {}\n", direct_c);
    @print("Direct rect: {}\n", direct_r);
}